// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/profiletype"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ProfileType is the model entity for the ProfileType schema.
type ProfileType struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// 类型名
	TypeName string `json:"type_name"  db:"type_name"`
	// 预警等级
	WarningLevel *int `json:"warning_level" db:"warning_level"`
	// 预警启用
	WarningEnabled *bool `json:"warning_enabled" db:"warning_enabled"`
	// 租户号
	TenantID uuid.UUID `json:"tenant_id"  db:"tenant_id"`
	// 描述
	Description string `json:"description"  db:"description"`
	// 可删除
	Deleteable bool `json:"deleteable" db:"deleteable"`
	// 启用
	Enabled bool `json:"enabled" db:"enabled"`
	// 人员类型
	TypeCode *string `json:"type_code"  db:"type_code"`
	// 有效时长
	FaceValidityHours *int `json:"face_validity_hours"  db:"face_validity_hours"`
	// 创建时间
	CreatedTime *time.Time `json:"created_time,omitempty" db:"created_time"`
	// 更新时间
	UpdatedTime  *time.Time `json:"updated_time,omitempty" db:"updated_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProfileType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case profiletype.FieldWarningEnabled, profiletype.FieldDeleteable, profiletype.FieldEnabled:
			values[i] = new(sql.NullBool)
		case profiletype.FieldID, profiletype.FieldWarningLevel, profiletype.FieldFaceValidityHours:
			values[i] = new(sql.NullInt64)
		case profiletype.FieldTypeName, profiletype.FieldDescription, profiletype.FieldTypeCode:
			values[i] = new(sql.NullString)
		case profiletype.FieldCreatedTime, profiletype.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		case profiletype.FieldTenantID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProfileType fields.
func (pt *ProfileType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profiletype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = int64(value.Int64)
		case profiletype.FieldTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type_name", values[i])
			} else if value.Valid {
				pt.TypeName = value.String
			}
		case profiletype.FieldWarningLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field warning_level", values[i])
			} else if value.Valid {
				pt.WarningLevel = new(int)
				*pt.WarningLevel = int(value.Int64)
			}
		case profiletype.FieldWarningEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field warning_enabled", values[i])
			} else if value.Valid {
				pt.WarningEnabled = new(bool)
				*pt.WarningEnabled = value.Bool
			}
		case profiletype.FieldTenantID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				pt.TenantID = *value
			}
		case profiletype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pt.Description = value.String
			}
		case profiletype.FieldDeleteable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleteable", values[i])
			} else if value.Valid {
				pt.Deleteable = value.Bool
			}
		case profiletype.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				pt.Enabled = value.Bool
			}
		case profiletype.FieldTypeCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type_code", values[i])
			} else if value.Valid {
				pt.TypeCode = new(string)
				*pt.TypeCode = value.String
			}
		case profiletype.FieldFaceValidityHours:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field face_validity_hours", values[i])
			} else if value.Valid {
				pt.FaceValidityHours = new(int)
				*pt.FaceValidityHours = int(value.Int64)
			}
		case profiletype.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				pt.CreatedTime = new(time.Time)
				*pt.CreatedTime = value.Time
			}
		case profiletype.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				pt.UpdatedTime = new(time.Time)
				*pt.UpdatedTime = value.Time
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProfileType.
// This includes values selected through modifiers, order, etc.
func (pt *ProfileType) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// Update returns a builder for updating this ProfileType.
// Note that you need to call ProfileType.Unwrap() before calling this method if this ProfileType
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *ProfileType) Update() *ProfileTypeUpdateOne {
	return NewProfileTypeClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the ProfileType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *ProfileType) Unwrap() *ProfileType {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("genclients: ProfileType is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *ProfileType) String() string {
	var builder strings.Builder
	builder.WriteString("ProfileType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("type_name=")
	builder.WriteString(pt.TypeName)
	builder.WriteString(", ")
	if v := pt.WarningLevel; v != nil {
		builder.WriteString("warning_level=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pt.WarningEnabled; v != nil {
		builder.WriteString("warning_enabled=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", pt.TenantID))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pt.Description)
	builder.WriteString(", ")
	builder.WriteString("deleteable=")
	builder.WriteString(fmt.Sprintf("%v", pt.Deleteable))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", pt.Enabled))
	builder.WriteString(", ")
	if v := pt.TypeCode; v != nil {
		builder.WriteString("type_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pt.FaceValidityHours; v != nil {
		builder.WriteString("face_validity_hours=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pt.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pt.UpdatedTime; v != nil {
		builder.WriteString("updated_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ProfileTypes is a parsable slice of ProfileType.
type ProfileTypes []*ProfileType
