// Code generated by ent, DO NOT EDIT.

package fmdemands

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the fmdemands type in the database.
	Label = "fm_demands"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSupplier holds the string denoting the supplier field in the database.
	FieldSupplier = "supplier"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPhonenum holds the string denoting the phonenum field in the database.
	FieldPhonenum = "phonenum"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldProvince holds the string denoting the province field in the database.
	FieldProvince = "province"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldArea holds the string denoting the area field in the database.
	FieldArea = "area"
	// FieldStreet holds the string denoting the street field in the database.
	FieldStreet = "street"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// Table holds the table name of the fmdemands in the database.
	Table = "fm_demands"
)

// Columns holds all SQL columns for fmdemands fields.
var Columns = []string{
	FieldID,
	FieldSupplier,
	FieldUsername,
	FieldPhonenum,
	FieldEmail,
	FieldProvince,
	FieldCity,
	FieldArea,
	FieldStreet,
	FieldMessage,
	FieldCreator,
	FieldCreatedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSupplier holds the default value on creation for the "supplier" field.
	DefaultSupplier string
	// SupplierValidator is a validator for the "supplier" field. It is called by the builders before save.
	SupplierValidator func(string) error
	// DefaultUsername holds the default value on creation for the "username" field.
	DefaultUsername string
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// DefaultPhonenum holds the default value on creation for the "phonenum" field.
	DefaultPhonenum string
	// PhonenumValidator is a validator for the "phonenum" field. It is called by the builders before save.
	PhonenumValidator func(string) error
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultProvince holds the default value on creation for the "province" field.
	DefaultProvince string
	// ProvinceValidator is a validator for the "province" field. It is called by the builders before save.
	ProvinceValidator func(string) error
	// DefaultCity holds the default value on creation for the "city" field.
	DefaultCity string
	// CityValidator is a validator for the "city" field. It is called by the builders before save.
	CityValidator func(string) error
	// DefaultArea holds the default value on creation for the "area" field.
	DefaultArea string
	// AreaValidator is a validator for the "area" field. It is called by the builders before save.
	AreaValidator func(string) error
	// DefaultStreet holds the default value on creation for the "street" field.
	DefaultStreet string
	// StreetValidator is a validator for the "street" field. It is called by the builders before save.
	StreetValidator func(string) error
	// DefaultMessage holds the default value on creation for the "message" field.
	DefaultMessage string
	// MessageValidator is a validator for the "message" field. It is called by the builders before save.
	MessageValidator func(string) error
	// DefaultCreator holds the default value on creation for the "creator" field.
	DefaultCreator string
	// CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	CreatorValidator func(string) error
)

// OrderOption defines the ordering options for the FmDemands queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySupplier orders the results by the supplier field.
func BySupplier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSupplier, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPhonenum orders the results by the phonenum field.
func ByPhonenum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhonenum, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByProvince orders the results by the province field.
func ByProvince(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvince, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByArea orders the results by the area field.
func ByArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArea, opts...).ToFunc()
}

// ByStreet orders the results by the street field.
func ByStreet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreet, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByCreator orders the results by the creator field.
func ByCreator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreator, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}
