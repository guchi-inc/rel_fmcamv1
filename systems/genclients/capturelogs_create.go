// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/capturelogs"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CaptureLogsCreate is the builder for creating a CaptureLogs entity.
type CaptureLogsCreate struct {
	config
	mutation *CaptureLogsMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (clc *CaptureLogsCreate) SetTenantID(u uuid.UUID) *CaptureLogsCreate {
	clc.mutation.SetTenantID(u)
	return clc
}

// SetDeviceID sets the "device_id" field.
func (clc *CaptureLogsCreate) SetDeviceID(i int64) *CaptureLogsCreate {
	clc.mutation.SetDeviceID(i)
	return clc
}

// SetMatchedProfileID sets the "matched_profile_id" field.
func (clc *CaptureLogsCreate) SetMatchedProfileID(i int64) *CaptureLogsCreate {
	clc.mutation.SetMatchedProfileID(i)
	return clc
}

// SetFuncType sets the "func_type" field.
func (clc *CaptureLogsCreate) SetFuncType(i int8) *CaptureLogsCreate {
	clc.mutation.SetFuncType(i)
	return clc
}

// SetNillableFuncType sets the "func_type" field if the given value is not nil.
func (clc *CaptureLogsCreate) SetNillableFuncType(i *int8) *CaptureLogsCreate {
	if i != nil {
		clc.SetFuncType(*i)
	}
	return clc
}

// SetMatchScore sets the "match_score" field.
func (clc *CaptureLogsCreate) SetMatchScore(f float32) *CaptureLogsCreate {
	clc.mutation.SetMatchScore(f)
	return clc
}

// SetNillableMatchScore sets the "match_score" field if the given value is not nil.
func (clc *CaptureLogsCreate) SetNillableMatchScore(f *float32) *CaptureLogsCreate {
	if f != nil {
		clc.SetMatchScore(*f)
	}
	return clc
}

// SetHasAlert sets the "has_alert" field.
func (clc *CaptureLogsCreate) SetHasAlert(b bool) *CaptureLogsCreate {
	clc.mutation.SetHasAlert(b)
	return clc
}

// SetNillableHasAlert sets the "has_alert" field if the given value is not nil.
func (clc *CaptureLogsCreate) SetNillableHasAlert(b *bool) *CaptureLogsCreate {
	if b != nil {
		clc.SetHasAlert(*b)
	}
	return clc
}

// SetDeviceName sets the "device_name" field.
func (clc *CaptureLogsCreate) SetDeviceName(s string) *CaptureLogsCreate {
	clc.mutation.SetDeviceName(s)
	return clc
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (clc *CaptureLogsCreate) SetNillableDeviceName(s *string) *CaptureLogsCreate {
	if s != nil {
		clc.SetDeviceName(*s)
	}
	return clc
}

// SetDeviceLocation sets the "device_location" field.
func (clc *CaptureLogsCreate) SetDeviceLocation(s string) *CaptureLogsCreate {
	clc.mutation.SetDeviceLocation(s)
	return clc
}

// SetNillableDeviceLocation sets the "device_location" field if the given value is not nil.
func (clc *CaptureLogsCreate) SetNillableDeviceLocation(s *string) *CaptureLogsCreate {
	if s != nil {
		clc.SetDeviceLocation(*s)
	}
	return clc
}

// SetContent sets the "content" field.
func (clc *CaptureLogsCreate) SetContent(s string) *CaptureLogsCreate {
	clc.mutation.SetContent(s)
	return clc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (clc *CaptureLogsCreate) SetNillableContent(s *string) *CaptureLogsCreate {
	if s != nil {
		clc.SetContent(*s)
	}
	return clc
}

// SetCaptureImageURL sets the "capture_image_url" field.
func (clc *CaptureLogsCreate) SetCaptureImageURL(s string) *CaptureLogsCreate {
	clc.mutation.SetCaptureImageURL(s)
	return clc
}

// SetNillableCaptureImageURL sets the "capture_image_url" field if the given value is not nil.
func (clc *CaptureLogsCreate) SetNillableCaptureImageURL(s *string) *CaptureLogsCreate {
	if s != nil {
		clc.SetCaptureImageURL(*s)
	}
	return clc
}

// SetCaptureTime sets the "capture_time" field.
func (clc *CaptureLogsCreate) SetCaptureTime(t time.Time) *CaptureLogsCreate {
	clc.mutation.SetCaptureTime(t)
	return clc
}

// SetNillableCaptureTime sets the "capture_time" field if the given value is not nil.
func (clc *CaptureLogsCreate) SetNillableCaptureTime(t *time.Time) *CaptureLogsCreate {
	if t != nil {
		clc.SetCaptureTime(*t)
	}
	return clc
}

// SetID sets the "id" field.
func (clc *CaptureLogsCreate) SetID(i int64) *CaptureLogsCreate {
	clc.mutation.SetID(i)
	return clc
}

// Mutation returns the CaptureLogsMutation object of the builder.
func (clc *CaptureLogsCreate) Mutation() *CaptureLogsMutation {
	return clc.mutation
}

// Save creates the CaptureLogs in the database.
func (clc *CaptureLogsCreate) Save(ctx context.Context) (*CaptureLogs, error) {
	clc.defaults()
	return withHooks(ctx, clc.sqlSave, clc.mutation, clc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clc *CaptureLogsCreate) SaveX(ctx context.Context) *CaptureLogs {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *CaptureLogsCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *CaptureLogsCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clc *CaptureLogsCreate) defaults() {
	if _, ok := clc.mutation.FuncType(); !ok {
		v := capturelogs.DefaultFuncType
		clc.mutation.SetFuncType(v)
	}
	if _, ok := clc.mutation.MatchScore(); !ok {
		v := capturelogs.DefaultMatchScore
		clc.mutation.SetMatchScore(v)
	}
	if _, ok := clc.mutation.HasAlert(); !ok {
		v := capturelogs.DefaultHasAlert
		clc.mutation.SetHasAlert(v)
	}
	if _, ok := clc.mutation.CaptureImageURL(); !ok {
		v := capturelogs.DefaultCaptureImageURL
		clc.mutation.SetCaptureImageURL(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clc *CaptureLogsCreate) check() error {
	if _, ok := clc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`genclients: missing required field "CaptureLogs.tenant_id"`)}
	}
	if _, ok := clc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`genclients: missing required field "CaptureLogs.device_id"`)}
	}
	if _, ok := clc.mutation.MatchedProfileID(); !ok {
		return &ValidationError{Name: "matched_profile_id", err: errors.New(`genclients: missing required field "CaptureLogs.matched_profile_id"`)}
	}
	if _, ok := clc.mutation.HasAlert(); !ok {
		return &ValidationError{Name: "has_alert", err: errors.New(`genclients: missing required field "CaptureLogs.has_alert"`)}
	}
	if v, ok := clc.mutation.CaptureImageURL(); ok {
		if err := capturelogs.CaptureImageURLValidator(v); err != nil {
			return &ValidationError{Name: "capture_image_url", err: fmt.Errorf(`genclients: validator failed for field "CaptureLogs.capture_image_url": %w`, err)}
		}
	}
	return nil
}

func (clc *CaptureLogsCreate) sqlSave(ctx context.Context) (*CaptureLogs, error) {
	if err := clc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	clc.mutation.id = &_node.ID
	clc.mutation.done = true
	return _node, nil
}

func (clc *CaptureLogsCreate) createSpec() (*CaptureLogs, *sqlgraph.CreateSpec) {
	var (
		_node = &CaptureLogs{config: clc.config}
		_spec = sqlgraph.NewCreateSpec(capturelogs.Table, sqlgraph.NewFieldSpec(capturelogs.FieldID, field.TypeInt64))
	)
	if id, ok := clc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := clc.mutation.TenantID(); ok {
		_spec.SetField(capturelogs.FieldTenantID, field.TypeUUID, value)
		_node.TenantID = value
	}
	if value, ok := clc.mutation.DeviceID(); ok {
		_spec.SetField(capturelogs.FieldDeviceID, field.TypeInt64, value)
		_node.DeviceID = value
	}
	if value, ok := clc.mutation.MatchedProfileID(); ok {
		_spec.SetField(capturelogs.FieldMatchedProfileID, field.TypeInt64, value)
		_node.MatchedProfileID = value
	}
	if value, ok := clc.mutation.FuncType(); ok {
		_spec.SetField(capturelogs.FieldFuncType, field.TypeInt8, value)
		_node.FuncType = value
	}
	if value, ok := clc.mutation.MatchScore(); ok {
		_spec.SetField(capturelogs.FieldMatchScore, field.TypeFloat32, value)
		_node.MatchScore = value
	}
	if value, ok := clc.mutation.HasAlert(); ok {
		_spec.SetField(capturelogs.FieldHasAlert, field.TypeBool, value)
		_node.HasAlert = value
	}
	if value, ok := clc.mutation.DeviceName(); ok {
		_spec.SetField(capturelogs.FieldDeviceName, field.TypeString, value)
		_node.DeviceName = &value
	}
	if value, ok := clc.mutation.DeviceLocation(); ok {
		_spec.SetField(capturelogs.FieldDeviceLocation, field.TypeString, value)
		_node.DeviceLocation = &value
	}
	if value, ok := clc.mutation.Content(); ok {
		_spec.SetField(capturelogs.FieldContent, field.TypeString, value)
		_node.Content = &value
	}
	if value, ok := clc.mutation.CaptureImageURL(); ok {
		_spec.SetField(capturelogs.FieldCaptureImageURL, field.TypeString, value)
		_node.CaptureImageURL = value
	}
	if value, ok := clc.mutation.CaptureTime(); ok {
		_spec.SetField(capturelogs.FieldCaptureTime, field.TypeTime, value)
		_node.CaptureTime = &value
	}
	return _node, _spec
}

// CaptureLogsCreateBulk is the builder for creating many CaptureLogs entities in bulk.
type CaptureLogsCreateBulk struct {
	config
	err      error
	builders []*CaptureLogsCreate
}

// Save creates the CaptureLogs entities in the database.
func (clcb *CaptureLogsCreateBulk) Save(ctx context.Context) ([]*CaptureLogs, error) {
	if clcb.err != nil {
		return nil, clcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*CaptureLogs, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CaptureLogsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *CaptureLogsCreateBulk) SaveX(ctx context.Context) []*CaptureLogs {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *CaptureLogsCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *CaptureLogsCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}
