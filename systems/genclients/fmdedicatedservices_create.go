// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"fmcam/systems/genclients/fmdedicatedservices"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FmDedicatedServicesCreate is the builder for creating a FmDedicatedServices entity.
type FmDedicatedServicesCreate struct {
	config
	mutation *FmDedicatedServicesMutation
	hooks    []Hook
}

// SetWorkID sets the "work_id" field.
func (fdsc *FmDedicatedServicesCreate) SetWorkID(i int64) *FmDedicatedServicesCreate {
	fdsc.mutation.SetWorkID(i)
	return fdsc
}

// SetNillableWorkID sets the "work_id" field if the given value is not nil.
func (fdsc *FmDedicatedServicesCreate) SetNillableWorkID(i *int64) *FmDedicatedServicesCreate {
	if i != nil {
		fdsc.SetWorkID(*i)
	}
	return fdsc
}

// SetContacts sets the "contacts" field.
func (fdsc *FmDedicatedServicesCreate) SetContacts(s string) *FmDedicatedServicesCreate {
	fdsc.mutation.SetContacts(s)
	return fdsc
}

// SetNillableContacts sets the "contacts" field if the given value is not nil.
func (fdsc *FmDedicatedServicesCreate) SetNillableContacts(s *string) *FmDedicatedServicesCreate {
	if s != nil {
		fdsc.SetContacts(*s)
	}
	return fdsc
}

// SetSupplier sets the "supplier" field.
func (fdsc *FmDedicatedServicesCreate) SetSupplier(s string) *FmDedicatedServicesCreate {
	fdsc.mutation.SetSupplier(s)
	return fdsc
}

// SetNillableSupplier sets the "supplier" field if the given value is not nil.
func (fdsc *FmDedicatedServicesCreate) SetNillableSupplier(s *string) *FmDedicatedServicesCreate {
	if s != nil {
		fdsc.SetSupplier(*s)
	}
	return fdsc
}

// SetPhonenum sets the "phonenum" field.
func (fdsc *FmDedicatedServicesCreate) SetPhonenum(s string) *FmDedicatedServicesCreate {
	fdsc.mutation.SetPhonenum(s)
	return fdsc
}

// SetNillablePhonenum sets the "phonenum" field if the given value is not nil.
func (fdsc *FmDedicatedServicesCreate) SetNillablePhonenum(s *string) *FmDedicatedServicesCreate {
	if s != nil {
		fdsc.SetPhonenum(*s)
	}
	return fdsc
}

// SetEmail sets the "email" field.
func (fdsc *FmDedicatedServicesCreate) SetEmail(s string) *FmDedicatedServicesCreate {
	fdsc.mutation.SetEmail(s)
	return fdsc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (fdsc *FmDedicatedServicesCreate) SetNillableEmail(s *string) *FmDedicatedServicesCreate {
	if s != nil {
		fdsc.SetEmail(*s)
	}
	return fdsc
}

// SetFax sets the "fax" field.
func (fdsc *FmDedicatedServicesCreate) SetFax(s string) *FmDedicatedServicesCreate {
	fdsc.mutation.SetFax(s)
	return fdsc
}

// SetNillableFax sets the "fax" field if the given value is not nil.
func (fdsc *FmDedicatedServicesCreate) SetNillableFax(s *string) *FmDedicatedServicesCreate {
	if s != nil {
		fdsc.SetFax(*s)
	}
	return fdsc
}

// SetDescription sets the "description" field.
func (fdsc *FmDedicatedServicesCreate) SetDescription(s string) *FmDedicatedServicesCreate {
	fdsc.mutation.SetDescription(s)
	return fdsc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fdsc *FmDedicatedServicesCreate) SetNillableDescription(s *string) *FmDedicatedServicesCreate {
	if s != nil {
		fdsc.SetDescription(*s)
	}
	return fdsc
}

// SetCreator sets the "creator" field.
func (fdsc *FmDedicatedServicesCreate) SetCreator(s string) *FmDedicatedServicesCreate {
	fdsc.mutation.SetCreator(s)
	return fdsc
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (fdsc *FmDedicatedServicesCreate) SetNillableCreator(s *string) *FmDedicatedServicesCreate {
	if s != nil {
		fdsc.SetCreator(*s)
	}
	return fdsc
}

// SetCreatedTime sets the "created_time" field.
func (fdsc *FmDedicatedServicesCreate) SetCreatedTime(t time.Time) *FmDedicatedServicesCreate {
	fdsc.mutation.SetCreatedTime(t)
	return fdsc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fdsc *FmDedicatedServicesCreate) SetNillableCreatedTime(t *time.Time) *FmDedicatedServicesCreate {
	if t != nil {
		fdsc.SetCreatedTime(*t)
	}
	return fdsc
}

// SetID sets the "id" field.
func (fdsc *FmDedicatedServicesCreate) SetID(i int64) *FmDedicatedServicesCreate {
	fdsc.mutation.SetID(i)
	return fdsc
}

// Mutation returns the FmDedicatedServicesMutation object of the builder.
func (fdsc *FmDedicatedServicesCreate) Mutation() *FmDedicatedServicesMutation {
	return fdsc.mutation
}

// Save creates the FmDedicatedServices in the database.
func (fdsc *FmDedicatedServicesCreate) Save(ctx context.Context) (*FmDedicatedServices, error) {
	fdsc.defaults()
	return withHooks(ctx, fdsc.sqlSave, fdsc.mutation, fdsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fdsc *FmDedicatedServicesCreate) SaveX(ctx context.Context) *FmDedicatedServices {
	v, err := fdsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdsc *FmDedicatedServicesCreate) Exec(ctx context.Context) error {
	_, err := fdsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdsc *FmDedicatedServicesCreate) ExecX(ctx context.Context) {
	if err := fdsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fdsc *FmDedicatedServicesCreate) defaults() {
	if _, ok := fdsc.mutation.Contacts(); !ok {
		v := fmdedicatedservices.DefaultContacts
		fdsc.mutation.SetContacts(v)
	}
	if _, ok := fdsc.mutation.Supplier(); !ok {
		v := fmdedicatedservices.DefaultSupplier
		fdsc.mutation.SetSupplier(v)
	}
	if _, ok := fdsc.mutation.Phonenum(); !ok {
		v := fmdedicatedservices.DefaultPhonenum
		fdsc.mutation.SetPhonenum(v)
	}
	if _, ok := fdsc.mutation.Email(); !ok {
		v := fmdedicatedservices.DefaultEmail
		fdsc.mutation.SetEmail(v)
	}
	if _, ok := fdsc.mutation.Fax(); !ok {
		v := fmdedicatedservices.DefaultFax
		fdsc.mutation.SetFax(v)
	}
	if _, ok := fdsc.mutation.Description(); !ok {
		v := fmdedicatedservices.DefaultDescription
		fdsc.mutation.SetDescription(v)
	}
	if _, ok := fdsc.mutation.Creator(); !ok {
		v := fmdedicatedservices.DefaultCreator
		fdsc.mutation.SetCreator(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fdsc *FmDedicatedServicesCreate) check() error {
	if v, ok := fdsc.mutation.Contacts(); ok {
		if err := fmdedicatedservices.ContactsValidator(v); err != nil {
			return &ValidationError{Name: "contacts", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.contacts": %w`, err)}
		}
	}
	if v, ok := fdsc.mutation.Supplier(); ok {
		if err := fmdedicatedservices.SupplierValidator(v); err != nil {
			return &ValidationError{Name: "supplier", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.supplier": %w`, err)}
		}
	}
	if v, ok := fdsc.mutation.Phonenum(); ok {
		if err := fmdedicatedservices.PhonenumValidator(v); err != nil {
			return &ValidationError{Name: "phonenum", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.phonenum": %w`, err)}
		}
	}
	if v, ok := fdsc.mutation.Email(); ok {
		if err := fmdedicatedservices.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.email": %w`, err)}
		}
	}
	if v, ok := fdsc.mutation.Fax(); ok {
		if err := fmdedicatedservices.FaxValidator(v); err != nil {
			return &ValidationError{Name: "fax", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.fax": %w`, err)}
		}
	}
	if v, ok := fdsc.mutation.Description(); ok {
		if err := fmdedicatedservices.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.description": %w`, err)}
		}
	}
	if v, ok := fdsc.mutation.Creator(); ok {
		if err := fmdedicatedservices.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.creator": %w`, err)}
		}
	}
	return nil
}

func (fdsc *FmDedicatedServicesCreate) sqlSave(ctx context.Context) (*FmDedicatedServices, error) {
	if err := fdsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fdsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fdsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fdsc.mutation.id = &_node.ID
	fdsc.mutation.done = true
	return _node, nil
}

func (fdsc *FmDedicatedServicesCreate) createSpec() (*FmDedicatedServices, *sqlgraph.CreateSpec) {
	var (
		_node = &FmDedicatedServices{config: fdsc.config}
		_spec = sqlgraph.NewCreateSpec(fmdedicatedservices.Table, sqlgraph.NewFieldSpec(fmdedicatedservices.FieldID, field.TypeInt64))
	)
	if id, ok := fdsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fdsc.mutation.WorkID(); ok {
		_spec.SetField(fmdedicatedservices.FieldWorkID, field.TypeInt64, value)
		_node.WorkID = &value
	}
	if value, ok := fdsc.mutation.Contacts(); ok {
		_spec.SetField(fmdedicatedservices.FieldContacts, field.TypeString, value)
		_node.Contacts = &value
	}
	if value, ok := fdsc.mutation.Supplier(); ok {
		_spec.SetField(fmdedicatedservices.FieldSupplier, field.TypeString, value)
		_node.Supplier = &value
	}
	if value, ok := fdsc.mutation.Phonenum(); ok {
		_spec.SetField(fmdedicatedservices.FieldPhonenum, field.TypeString, value)
		_node.Phonenum = &value
	}
	if value, ok := fdsc.mutation.Email(); ok {
		_spec.SetField(fmdedicatedservices.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := fdsc.mutation.Fax(); ok {
		_spec.SetField(fmdedicatedservices.FieldFax, field.TypeString, value)
		_node.Fax = &value
	}
	if value, ok := fdsc.mutation.Description(); ok {
		_spec.SetField(fmdedicatedservices.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := fdsc.mutation.Creator(); ok {
		_spec.SetField(fmdedicatedservices.FieldCreator, field.TypeString, value)
		_node.Creator = &value
	}
	if value, ok := fdsc.mutation.CreatedTime(); ok {
		_spec.SetField(fmdedicatedservices.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	return _node, _spec
}

// FmDedicatedServicesCreateBulk is the builder for creating many FmDedicatedServices entities in bulk.
type FmDedicatedServicesCreateBulk struct {
	config
	err      error
	builders []*FmDedicatedServicesCreate
}

// Save creates the FmDedicatedServices entities in the database.
func (fdscb *FmDedicatedServicesCreateBulk) Save(ctx context.Context) ([]*FmDedicatedServices, error) {
	if fdscb.err != nil {
		return nil, fdscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fdscb.builders))
	nodes := make([]*FmDedicatedServices, len(fdscb.builders))
	mutators := make([]Mutator, len(fdscb.builders))
	for i := range fdscb.builders {
		func(i int, root context.Context) {
			builder := fdscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FmDedicatedServicesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fdscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fdscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fdscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fdscb *FmDedicatedServicesCreateBulk) SaveX(ctx context.Context) []*FmDedicatedServices {
	v, err := fdscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdscb *FmDedicatedServicesCreateBulk) Exec(ctx context.Context) error {
	_, err := fdscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdscb *FmDedicatedServicesCreateBulk) ExecX(ctx context.Context) {
	if err := fdscb.Exec(ctx); err != nil {
		panic(err)
	}
}
