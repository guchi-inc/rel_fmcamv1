// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/temporaryface"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TemporaryFace is the model entity for the TemporaryFace schema.
type TemporaryFace struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// 租户号
	TenantID uuid.UUID `json:"tenant_id"  db:"tenant_id"`
	// ProfileID holds the value of the "profile_id" field.
	ProfileID *int64 `json:"profile_id" db:"profile_id"`
	// 特征向量
	FaceEmbedding []byte `json:"face_embedding"  db:"face_embedding"`
	// 照片地址
	ImgURL *string `json:"img_url"  db:"img_url"`
	// 最后抓拍位置
	UpdatedLocation *string `json:"updated_location"  db:"updated_location"`
	// CaptureCount holds the value of the "capture_count" field.
	CaptureCount int `json:"capture_count" db:"capture_count"`
	// 首次被抓拍时间
	CreatedTime *time.Time `json:"created_time" db:"created_time"`
	// 最后被抓拍时间
	UpdatedTime *time.Time `json:"updated_time" db:"updated_time"`
	// 过期清理时间
	ExpiresTime  time.Time `json:"expires_time" db:"expires_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TemporaryFace) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case temporaryface.FieldFaceEmbedding:
			values[i] = new([]byte)
		case temporaryface.FieldID, temporaryface.FieldProfileID, temporaryface.FieldCaptureCount:
			values[i] = new(sql.NullInt64)
		case temporaryface.FieldImgURL, temporaryface.FieldUpdatedLocation:
			values[i] = new(sql.NullString)
		case temporaryface.FieldCreatedTime, temporaryface.FieldUpdatedTime, temporaryface.FieldExpiresTime:
			values[i] = new(sql.NullTime)
		case temporaryface.FieldTenantID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TemporaryFace fields.
func (tf *TemporaryFace) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case temporaryface.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tf.ID = int64(value.Int64)
		case temporaryface.FieldTenantID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				tf.TenantID = *value
			}
		case temporaryface.FieldProfileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field profile_id", values[i])
			} else if value.Valid {
				tf.ProfileID = new(int64)
				*tf.ProfileID = value.Int64
			}
		case temporaryface.FieldFaceEmbedding:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field face_embedding", values[i])
			} else if value != nil {
				tf.FaceEmbedding = *value
			}
		case temporaryface.FieldImgURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_url", values[i])
			} else if value.Valid {
				tf.ImgURL = new(string)
				*tf.ImgURL = value.String
			}
		case temporaryface.FieldUpdatedLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_location", values[i])
			} else if value.Valid {
				tf.UpdatedLocation = new(string)
				*tf.UpdatedLocation = value.String
			}
		case temporaryface.FieldCaptureCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field capture_count", values[i])
			} else if value.Valid {
				tf.CaptureCount = int(value.Int64)
			}
		case temporaryface.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				tf.CreatedTime = new(time.Time)
				*tf.CreatedTime = value.Time
			}
		case temporaryface.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				tf.UpdatedTime = new(time.Time)
				*tf.UpdatedTime = value.Time
			}
		case temporaryface.FieldExpiresTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_time", values[i])
			} else if value.Valid {
				tf.ExpiresTime = value.Time
			}
		default:
			tf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TemporaryFace.
// This includes values selected through modifiers, order, etc.
func (tf *TemporaryFace) Value(name string) (ent.Value, error) {
	return tf.selectValues.Get(name)
}

// Update returns a builder for updating this TemporaryFace.
// Note that you need to call TemporaryFace.Unwrap() before calling this method if this TemporaryFace
// was returned from a transaction, and the transaction was committed or rolled back.
func (tf *TemporaryFace) Update() *TemporaryFaceUpdateOne {
	return NewTemporaryFaceClient(tf.config).UpdateOne(tf)
}

// Unwrap unwraps the TemporaryFace entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tf *TemporaryFace) Unwrap() *TemporaryFace {
	_tx, ok := tf.config.driver.(*txDriver)
	if !ok {
		panic("genclients: TemporaryFace is not a transactional entity")
	}
	tf.config.driver = _tx.drv
	return tf
}

// String implements the fmt.Stringer.
func (tf *TemporaryFace) String() string {
	var builder strings.Builder
	builder.WriteString("TemporaryFace(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tf.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", tf.TenantID))
	builder.WriteString(", ")
	if v := tf.ProfileID; v != nil {
		builder.WriteString("profile_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("face_embedding=")
	builder.WriteString(fmt.Sprintf("%v", tf.FaceEmbedding))
	builder.WriteString(", ")
	if v := tf.ImgURL; v != nil {
		builder.WriteString("img_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tf.UpdatedLocation; v != nil {
		builder.WriteString("updated_location=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("capture_count=")
	builder.WriteString(fmt.Sprintf("%v", tf.CaptureCount))
	builder.WriteString(", ")
	if v := tf.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := tf.UpdatedTime; v != nil {
		builder.WriteString("updated_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("expires_time=")
	builder.WriteString(tf.ExpiresTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TemporaryFaces is a parsable slice of TemporaryFace.
type TemporaryFaces []*TemporaryFace
