// Code generated by ent, DO NOT EDIT.

package fieldmetadata

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the fieldmetadata type in the database.
	Label = "field_metadata"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTableName holds the string denoting the table_name field in the database.
	FieldTableName = "table_name"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCname holds the string denoting the cname field in the database.
	FieldCname = "cname"
	// FieldDataType holds the string denoting the data_type field in the database.
	FieldDataType = "data_type"
	// FieldIsVisible holds the string denoting the is_visible field in the database.
	FieldIsVisible = "is_visible"
	// FieldIsSearchable holds the string denoting the is_searchable field in the database.
	FieldIsSearchable = "is_searchable"
	// FieldIsEditable holds the string denoting the is_editable field in the database.
	FieldIsEditable = "is_editable"
	// FieldIsRequired holds the string denoting the is_required field in the database.
	FieldIsRequired = "is_required"
	// FieldMaxLength holds the string denoting the max_length field in the database.
	FieldMaxLength = "max_length"
	// FieldDefaultValue holds the string denoting the default_value field in the database.
	FieldDefaultValue = "default_value"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// Table holds the table name of the fieldmetadata in the database.
	Table = "field_metadata"
)

// Columns holds all SQL columns for fieldmetadata fields.
var Columns = []string{
	FieldID,
	FieldTableName,
	FieldName,
	FieldCname,
	FieldDataType,
	FieldIsVisible,
	FieldIsSearchable,
	FieldIsEditable,
	FieldIsRequired,
	FieldMaxLength,
	FieldDefaultValue,
	FieldDescription,
	FieldCreatedTime,
	FieldUpdatedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TableNameValidator is a validator for the "table_name" field. It is called by the builders before save.
	TableNameValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CnameValidator is a validator for the "cname" field. It is called by the builders before save.
	CnameValidator func(string) error
	// DataTypeValidator is a validator for the "data_type" field. It is called by the builders before save.
	DataTypeValidator func(string) error
	// DefaultIsVisible holds the default value on creation for the "is_visible" field.
	DefaultIsVisible bool
	// DefaultIsSearchable holds the default value on creation for the "is_searchable" field.
	DefaultIsSearchable bool
	// DefaultIsEditable holds the default value on creation for the "is_editable" field.
	DefaultIsEditable bool
	// DefaultIsRequired holds the default value on creation for the "is_required" field.
	DefaultIsRequired bool
	// DefaultMaxLength holds the default value on creation for the "max_length" field.
	DefaultMaxLength int
	// DefaultDefaultValue holds the default value on creation for the "default_value" field.
	DefaultDefaultValue string
	// DefaultValueValidator is a validator for the "default_value" field. It is called by the builders before save.
	DefaultValueValidator func(string) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// UpdateDefaultUpdatedTime holds the default value on update for the "updated_time" field.
	UpdateDefaultUpdatedTime func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// OrderOption defines the ordering options for the FieldMetadata queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTableName orders the results by the table_name field.
func ByTableName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCname orders the results by the cname field.
func ByCname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCname, opts...).ToFunc()
}

// ByDataType orders the results by the data_type field.
func ByDataType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataType, opts...).ToFunc()
}

// ByIsVisible orders the results by the is_visible field.
func ByIsVisible(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsVisible, opts...).ToFunc()
}

// ByIsSearchable orders the results by the is_searchable field.
func ByIsSearchable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSearchable, opts...).ToFunc()
}

// ByIsEditable orders the results by the is_editable field.
func ByIsEditable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsEditable, opts...).ToFunc()
}

// ByIsRequired orders the results by the is_required field.
func ByIsRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRequired, opts...).ToFunc()
}

// ByMaxLength orders the results by the max_length field.
func ByMaxLength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxLength, opts...).ToFunc()
}

// ByDefaultValue orders the results by the default_value field.
func ByDefaultValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultValue, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}
