// Code generated by ent, DO NOT EDIT.

package fieldmetadata

import (
	"fmcam/systems/genclients/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLTE(FieldID, id))
}

// TableName applies equality check predicate on the "table_name" field. It's identical to TableNameEQ.
func TableName(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldTableName, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldName, v))
}

// Cname applies equality check predicate on the "cname" field. It's identical to CnameEQ.
func Cname(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldCname, v))
}

// DataType applies equality check predicate on the "data_type" field. It's identical to DataTypeEQ.
func DataType(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldDataType, v))
}

// IsVisible applies equality check predicate on the "is_visible" field. It's identical to IsVisibleEQ.
func IsVisible(v bool) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldIsVisible, v))
}

// IsSearchable applies equality check predicate on the "is_searchable" field. It's identical to IsSearchableEQ.
func IsSearchable(v bool) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldIsSearchable, v))
}

// IsEditable applies equality check predicate on the "is_editable" field. It's identical to IsEditableEQ.
func IsEditable(v bool) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldIsEditable, v))
}

// IsRequired applies equality check predicate on the "is_required" field. It's identical to IsRequiredEQ.
func IsRequired(v bool) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldIsRequired, v))
}

// MaxLength applies equality check predicate on the "max_length" field. It's identical to MaxLengthEQ.
func MaxLength(v int) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldMaxLength, v))
}

// DefaultValue applies equality check predicate on the "default_value" field. It's identical to DefaultValueEQ.
func DefaultValue(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldDefaultValue, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldDescription, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldCreatedTime, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldUpdatedTime, v))
}

// TableNameEQ applies the EQ predicate on the "table_name" field.
func TableNameEQ(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldTableName, v))
}

// TableNameNEQ applies the NEQ predicate on the "table_name" field.
func TableNameNEQ(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNEQ(FieldTableName, v))
}

// TableNameIn applies the In predicate on the "table_name" field.
func TableNameIn(vs ...string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldIn(FieldTableName, vs...))
}

// TableNameNotIn applies the NotIn predicate on the "table_name" field.
func TableNameNotIn(vs ...string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNotIn(FieldTableName, vs...))
}

// TableNameGT applies the GT predicate on the "table_name" field.
func TableNameGT(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGT(FieldTableName, v))
}

// TableNameGTE applies the GTE predicate on the "table_name" field.
func TableNameGTE(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGTE(FieldTableName, v))
}

// TableNameLT applies the LT predicate on the "table_name" field.
func TableNameLT(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLT(FieldTableName, v))
}

// TableNameLTE applies the LTE predicate on the "table_name" field.
func TableNameLTE(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLTE(FieldTableName, v))
}

// TableNameContains applies the Contains predicate on the "table_name" field.
func TableNameContains(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldContains(FieldTableName, v))
}

// TableNameHasPrefix applies the HasPrefix predicate on the "table_name" field.
func TableNameHasPrefix(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldHasPrefix(FieldTableName, v))
}

// TableNameHasSuffix applies the HasSuffix predicate on the "table_name" field.
func TableNameHasSuffix(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldHasSuffix(FieldTableName, v))
}

// TableNameEqualFold applies the EqualFold predicate on the "table_name" field.
func TableNameEqualFold(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEqualFold(FieldTableName, v))
}

// TableNameContainsFold applies the ContainsFold predicate on the "table_name" field.
func TableNameContainsFold(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldContainsFold(FieldTableName, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldContainsFold(FieldName, v))
}

// CnameEQ applies the EQ predicate on the "cname" field.
func CnameEQ(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldCname, v))
}

// CnameNEQ applies the NEQ predicate on the "cname" field.
func CnameNEQ(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNEQ(FieldCname, v))
}

// CnameIn applies the In predicate on the "cname" field.
func CnameIn(vs ...string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldIn(FieldCname, vs...))
}

// CnameNotIn applies the NotIn predicate on the "cname" field.
func CnameNotIn(vs ...string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNotIn(FieldCname, vs...))
}

// CnameGT applies the GT predicate on the "cname" field.
func CnameGT(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGT(FieldCname, v))
}

// CnameGTE applies the GTE predicate on the "cname" field.
func CnameGTE(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGTE(FieldCname, v))
}

// CnameLT applies the LT predicate on the "cname" field.
func CnameLT(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLT(FieldCname, v))
}

// CnameLTE applies the LTE predicate on the "cname" field.
func CnameLTE(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLTE(FieldCname, v))
}

// CnameContains applies the Contains predicate on the "cname" field.
func CnameContains(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldContains(FieldCname, v))
}

// CnameHasPrefix applies the HasPrefix predicate on the "cname" field.
func CnameHasPrefix(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldHasPrefix(FieldCname, v))
}

// CnameHasSuffix applies the HasSuffix predicate on the "cname" field.
func CnameHasSuffix(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldHasSuffix(FieldCname, v))
}

// CnameEqualFold applies the EqualFold predicate on the "cname" field.
func CnameEqualFold(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEqualFold(FieldCname, v))
}

// CnameContainsFold applies the ContainsFold predicate on the "cname" field.
func CnameContainsFold(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldContainsFold(FieldCname, v))
}

// DataTypeEQ applies the EQ predicate on the "data_type" field.
func DataTypeEQ(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldDataType, v))
}

// DataTypeNEQ applies the NEQ predicate on the "data_type" field.
func DataTypeNEQ(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNEQ(FieldDataType, v))
}

// DataTypeIn applies the In predicate on the "data_type" field.
func DataTypeIn(vs ...string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldIn(FieldDataType, vs...))
}

// DataTypeNotIn applies the NotIn predicate on the "data_type" field.
func DataTypeNotIn(vs ...string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNotIn(FieldDataType, vs...))
}

// DataTypeGT applies the GT predicate on the "data_type" field.
func DataTypeGT(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGT(FieldDataType, v))
}

// DataTypeGTE applies the GTE predicate on the "data_type" field.
func DataTypeGTE(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGTE(FieldDataType, v))
}

// DataTypeLT applies the LT predicate on the "data_type" field.
func DataTypeLT(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLT(FieldDataType, v))
}

// DataTypeLTE applies the LTE predicate on the "data_type" field.
func DataTypeLTE(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLTE(FieldDataType, v))
}

// DataTypeContains applies the Contains predicate on the "data_type" field.
func DataTypeContains(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldContains(FieldDataType, v))
}

// DataTypeHasPrefix applies the HasPrefix predicate on the "data_type" field.
func DataTypeHasPrefix(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldHasPrefix(FieldDataType, v))
}

// DataTypeHasSuffix applies the HasSuffix predicate on the "data_type" field.
func DataTypeHasSuffix(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldHasSuffix(FieldDataType, v))
}

// DataTypeEqualFold applies the EqualFold predicate on the "data_type" field.
func DataTypeEqualFold(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEqualFold(FieldDataType, v))
}

// DataTypeContainsFold applies the ContainsFold predicate on the "data_type" field.
func DataTypeContainsFold(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldContainsFold(FieldDataType, v))
}

// IsVisibleEQ applies the EQ predicate on the "is_visible" field.
func IsVisibleEQ(v bool) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldIsVisible, v))
}

// IsVisibleNEQ applies the NEQ predicate on the "is_visible" field.
func IsVisibleNEQ(v bool) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNEQ(FieldIsVisible, v))
}

// IsSearchableEQ applies the EQ predicate on the "is_searchable" field.
func IsSearchableEQ(v bool) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldIsSearchable, v))
}

// IsSearchableNEQ applies the NEQ predicate on the "is_searchable" field.
func IsSearchableNEQ(v bool) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNEQ(FieldIsSearchable, v))
}

// IsEditableEQ applies the EQ predicate on the "is_editable" field.
func IsEditableEQ(v bool) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldIsEditable, v))
}

// IsEditableNEQ applies the NEQ predicate on the "is_editable" field.
func IsEditableNEQ(v bool) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNEQ(FieldIsEditable, v))
}

// IsRequiredEQ applies the EQ predicate on the "is_required" field.
func IsRequiredEQ(v bool) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldIsRequired, v))
}

// IsRequiredNEQ applies the NEQ predicate on the "is_required" field.
func IsRequiredNEQ(v bool) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNEQ(FieldIsRequired, v))
}

// MaxLengthEQ applies the EQ predicate on the "max_length" field.
func MaxLengthEQ(v int) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldMaxLength, v))
}

// MaxLengthNEQ applies the NEQ predicate on the "max_length" field.
func MaxLengthNEQ(v int) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNEQ(FieldMaxLength, v))
}

// MaxLengthIn applies the In predicate on the "max_length" field.
func MaxLengthIn(vs ...int) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldIn(FieldMaxLength, vs...))
}

// MaxLengthNotIn applies the NotIn predicate on the "max_length" field.
func MaxLengthNotIn(vs ...int) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNotIn(FieldMaxLength, vs...))
}

// MaxLengthGT applies the GT predicate on the "max_length" field.
func MaxLengthGT(v int) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGT(FieldMaxLength, v))
}

// MaxLengthGTE applies the GTE predicate on the "max_length" field.
func MaxLengthGTE(v int) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGTE(FieldMaxLength, v))
}

// MaxLengthLT applies the LT predicate on the "max_length" field.
func MaxLengthLT(v int) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLT(FieldMaxLength, v))
}

// MaxLengthLTE applies the LTE predicate on the "max_length" field.
func MaxLengthLTE(v int) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLTE(FieldMaxLength, v))
}

// DefaultValueEQ applies the EQ predicate on the "default_value" field.
func DefaultValueEQ(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldDefaultValue, v))
}

// DefaultValueNEQ applies the NEQ predicate on the "default_value" field.
func DefaultValueNEQ(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNEQ(FieldDefaultValue, v))
}

// DefaultValueIn applies the In predicate on the "default_value" field.
func DefaultValueIn(vs ...string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldIn(FieldDefaultValue, vs...))
}

// DefaultValueNotIn applies the NotIn predicate on the "default_value" field.
func DefaultValueNotIn(vs ...string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNotIn(FieldDefaultValue, vs...))
}

// DefaultValueGT applies the GT predicate on the "default_value" field.
func DefaultValueGT(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGT(FieldDefaultValue, v))
}

// DefaultValueGTE applies the GTE predicate on the "default_value" field.
func DefaultValueGTE(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGTE(FieldDefaultValue, v))
}

// DefaultValueLT applies the LT predicate on the "default_value" field.
func DefaultValueLT(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLT(FieldDefaultValue, v))
}

// DefaultValueLTE applies the LTE predicate on the "default_value" field.
func DefaultValueLTE(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLTE(FieldDefaultValue, v))
}

// DefaultValueContains applies the Contains predicate on the "default_value" field.
func DefaultValueContains(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldContains(FieldDefaultValue, v))
}

// DefaultValueHasPrefix applies the HasPrefix predicate on the "default_value" field.
func DefaultValueHasPrefix(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldHasPrefix(FieldDefaultValue, v))
}

// DefaultValueHasSuffix applies the HasSuffix predicate on the "default_value" field.
func DefaultValueHasSuffix(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldHasSuffix(FieldDefaultValue, v))
}

// DefaultValueEqualFold applies the EqualFold predicate on the "default_value" field.
func DefaultValueEqualFold(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEqualFold(FieldDefaultValue, v))
}

// DefaultValueContainsFold applies the ContainsFold predicate on the "default_value" field.
func DefaultValueContainsFold(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldContainsFold(FieldDefaultValue, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLTE(FieldCreatedTime, v))
}

// CreatedTimeIsNil applies the IsNil predicate on the "created_time" field.
func CreatedTimeIsNil() predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldIsNull(FieldCreatedTime))
}

// CreatedTimeNotNil applies the NotNil predicate on the "created_time" field.
func CreatedTimeNotNil() predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNotNull(FieldCreatedTime))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldLTE(FieldUpdatedTime, v))
}

// UpdatedTimeIsNil applies the IsNil predicate on the "updated_time" field.
func UpdatedTimeIsNil() predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldIsNull(FieldUpdatedTime))
}

// UpdatedTimeNotNil applies the NotNil predicate on the "updated_time" field.
func UpdatedTimeNotNil() predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.FieldNotNull(FieldUpdatedTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FieldMetadata) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FieldMetadata) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FieldMetadata) predicate.FieldMetadata {
	return predicate.FieldMetadata(sql.NotPredicates(p))
}
