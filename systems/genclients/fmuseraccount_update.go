// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/fmuseraccount"
	"fmcam/systems/genclients/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FmUserAccountUpdate is the builder for updating FmUserAccount entities.
type FmUserAccountUpdate struct {
	config
	hooks    []Hook
	mutation *FmUserAccountMutation
}

// Where appends a list predicates to the FmUserAccountUpdate builder.
func (fuau *FmUserAccountUpdate) Where(ps ...predicate.FmUserAccount) *FmUserAccountUpdate {
	fuau.mutation.Where(ps...)
	return fuau
}

// SetUsername sets the "username" field.
func (fuau *FmUserAccountUpdate) SetUsername(s string) *FmUserAccountUpdate {
	fuau.mutation.SetUsername(s)
	return fuau
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableUsername(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetUsername(*s)
	}
	return fuau
}

// SetLoginName sets the "login_name" field.
func (fuau *FmUserAccountUpdate) SetLoginName(s string) *FmUserAccountUpdate {
	fuau.mutation.SetLoginName(s)
	return fuau
}

// SetNillableLoginName sets the "login_name" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableLoginName(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetLoginName(*s)
	}
	return fuau
}

// SetPassword sets the "password" field.
func (fuau *FmUserAccountUpdate) SetPassword(s string) *FmUserAccountUpdate {
	fuau.mutation.SetPassword(s)
	return fuau
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillablePassword(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetPassword(*s)
	}
	return fuau
}

// SetLeaderFlag sets the "leader_flag" field.
func (fuau *FmUserAccountUpdate) SetLeaderFlag(s string) *FmUserAccountUpdate {
	fuau.mutation.SetLeaderFlag(s)
	return fuau
}

// SetNillableLeaderFlag sets the "leader_flag" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableLeaderFlag(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetLeaderFlag(*s)
	}
	return fuau
}

// ClearLeaderFlag clears the value of the "leader_flag" field.
func (fuau *FmUserAccountUpdate) ClearLeaderFlag() *FmUserAccountUpdate {
	fuau.mutation.ClearLeaderFlag()
	return fuau
}

// SetPosition sets the "position" field.
func (fuau *FmUserAccountUpdate) SetPosition(s string) *FmUserAccountUpdate {
	fuau.mutation.SetPosition(s)
	return fuau
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillablePosition(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetPosition(*s)
	}
	return fuau
}

// ClearPosition clears the value of the "position" field.
func (fuau *FmUserAccountUpdate) ClearPosition() *FmUserAccountUpdate {
	fuau.mutation.ClearPosition()
	return fuau
}

// SetDepartment sets the "department" field.
func (fuau *FmUserAccountUpdate) SetDepartment(s string) *FmUserAccountUpdate {
	fuau.mutation.SetDepartment(s)
	return fuau
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableDepartment(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetDepartment(*s)
	}
	return fuau
}

// ClearDepartment clears the value of the "department" field.
func (fuau *FmUserAccountUpdate) ClearDepartment() *FmUserAccountUpdate {
	fuau.mutation.ClearDepartment()
	return fuau
}

// SetEmail sets the "email" field.
func (fuau *FmUserAccountUpdate) SetEmail(s string) *FmUserAccountUpdate {
	fuau.mutation.SetEmail(s)
	return fuau
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableEmail(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetEmail(*s)
	}
	return fuau
}

// ClearEmail clears the value of the "email" field.
func (fuau *FmUserAccountUpdate) ClearEmail() *FmUserAccountUpdate {
	fuau.mutation.ClearEmail()
	return fuau
}

// SetPhonenum sets the "phonenum" field.
func (fuau *FmUserAccountUpdate) SetPhonenum(s string) *FmUserAccountUpdate {
	fuau.mutation.SetPhonenum(s)
	return fuau
}

// SetNillablePhonenum sets the "phonenum" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillablePhonenum(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetPhonenum(*s)
	}
	return fuau
}

// ClearPhonenum clears the value of the "phonenum" field.
func (fuau *FmUserAccountUpdate) ClearPhonenum() *FmUserAccountUpdate {
	fuau.mutation.ClearPhonenum()
	return fuau
}

// SetDescription sets the "description" field.
func (fuau *FmUserAccountUpdate) SetDescription(s string) *FmUserAccountUpdate {
	fuau.mutation.SetDescription(s)
	return fuau
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableDescription(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetDescription(*s)
	}
	return fuau
}

// ClearDescription clears the value of the "description" field.
func (fuau *FmUserAccountUpdate) ClearDescription() *FmUserAccountUpdate {
	fuau.mutation.ClearDescription()
	return fuau
}

// SetEthnicity sets the "ethnicity" field.
func (fuau *FmUserAccountUpdate) SetEthnicity(s string) *FmUserAccountUpdate {
	fuau.mutation.SetEthnicity(s)
	return fuau
}

// SetNillableEthnicity sets the "ethnicity" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableEthnicity(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetEthnicity(*s)
	}
	return fuau
}

// ClearEthnicity clears the value of the "ethnicity" field.
func (fuau *FmUserAccountUpdate) ClearEthnicity() *FmUserAccountUpdate {
	fuau.mutation.ClearEthnicity()
	return fuau
}

// SetGender sets the "gender" field.
func (fuau *FmUserAccountUpdate) SetGender(s string) *FmUserAccountUpdate {
	fuau.mutation.SetGender(s)
	return fuau
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableGender(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetGender(*s)
	}
	return fuau
}

// ClearGender clears the value of the "gender" field.
func (fuau *FmUserAccountUpdate) ClearGender() *FmUserAccountUpdate {
	fuau.mutation.ClearGender()
	return fuau
}

// SetLocal sets the "local" field.
func (fuau *FmUserAccountUpdate) SetLocal(s string) *FmUserAccountUpdate {
	fuau.mutation.SetLocal(s)
	return fuau
}

// SetNillableLocal sets the "local" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableLocal(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetLocal(*s)
	}
	return fuau
}

// ClearLocal clears the value of the "local" field.
func (fuau *FmUserAccountUpdate) ClearLocal() *FmUserAccountUpdate {
	fuau.mutation.ClearLocal()
	return fuau
}

// SetLocalhost sets the "localhost" field.
func (fuau *FmUserAccountUpdate) SetLocalhost(s string) *FmUserAccountUpdate {
	fuau.mutation.SetLocalhost(s)
	return fuau
}

// SetNillableLocalhost sets the "localhost" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableLocalhost(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetLocalhost(*s)
	}
	return fuau
}

// ClearLocalhost clears the value of the "localhost" field.
func (fuau *FmUserAccountUpdate) ClearLocalhost() *FmUserAccountUpdate {
	fuau.mutation.ClearLocalhost()
	return fuau
}

// SetM2Localhost sets the "m2_localhost" field.
func (fuau *FmUserAccountUpdate) SetM2Localhost(s string) *FmUserAccountUpdate {
	fuau.mutation.SetM2Localhost(s)
	return fuau
}

// SetNillableM2Localhost sets the "m2_localhost" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableM2Localhost(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetM2Localhost(*s)
	}
	return fuau
}

// ClearM2Localhost clears the value of the "m2_localhost" field.
func (fuau *FmUserAccountUpdate) ClearM2Localhost() *FmUserAccountUpdate {
	fuau.mutation.ClearM2Localhost()
	return fuau
}

// SetIsmanager sets the "ismanager" field.
func (fuau *FmUserAccountUpdate) SetIsmanager(s string) *FmUserAccountUpdate {
	fuau.mutation.SetIsmanager(s)
	return fuau
}

// SetNillableIsmanager sets the "ismanager" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableIsmanager(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetIsmanager(*s)
	}
	return fuau
}

// ClearIsmanager clears the value of the "ismanager" field.
func (fuau *FmUserAccountUpdate) ClearIsmanager() *FmUserAccountUpdate {
	fuau.mutation.ClearIsmanager()
	return fuau
}

// SetIsystem sets the "isystem" field.
func (fuau *FmUserAccountUpdate) SetIsystem(s string) *FmUserAccountUpdate {
	fuau.mutation.SetIsystem(s)
	return fuau
}

// SetNillableIsystem sets the "isystem" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableIsystem(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetIsystem(*s)
	}
	return fuau
}

// ClearIsystem clears the value of the "isystem" field.
func (fuau *FmUserAccountUpdate) ClearIsystem() *FmUserAccountUpdate {
	fuau.mutation.ClearIsystem()
	return fuau
}

// SetEnabled sets the "enabled" field.
func (fuau *FmUserAccountUpdate) SetEnabled(b bool) *FmUserAccountUpdate {
	fuau.mutation.SetEnabled(b)
	return fuau
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableEnabled(b *bool) *FmUserAccountUpdate {
	if b != nil {
		fuau.SetEnabled(*b)
	}
	return fuau
}

// ClearEnabled clears the value of the "enabled" field.
func (fuau *FmUserAccountUpdate) ClearEnabled() *FmUserAccountUpdate {
	fuau.mutation.ClearEnabled()
	return fuau
}

// SetIsSms sets the "is_sms" field.
func (fuau *FmUserAccountUpdate) SetIsSms(b bool) *FmUserAccountUpdate {
	fuau.mutation.SetIsSms(b)
	return fuau
}

// SetNillableIsSms sets the "is_sms" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableIsSms(b *bool) *FmUserAccountUpdate {
	if b != nil {
		fuau.SetIsSms(*b)
	}
	return fuau
}

// ClearIsSms clears the value of the "is_sms" field.
func (fuau *FmUserAccountUpdate) ClearIsSms() *FmUserAccountUpdate {
	fuau.mutation.ClearIsSms()
	return fuau
}

// SetMemberID sets the "member_id" field.
func (fuau *FmUserAccountUpdate) SetMemberID(s string) *FmUserAccountUpdate {
	fuau.mutation.SetMemberID(s)
	return fuau
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableMemberID(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetMemberID(*s)
	}
	return fuau
}

// ClearMemberID clears the value of the "member_id" field.
func (fuau *FmUserAccountUpdate) ClearMemberID() *FmUserAccountUpdate {
	fuau.mutation.ClearMemberID()
	return fuau
}

// SetLeaderID sets the "leader_id" field.
func (fuau *FmUserAccountUpdate) SetLeaderID(s string) *FmUserAccountUpdate {
	fuau.mutation.SetLeaderID(s)
	return fuau
}

// SetNillableLeaderID sets the "leader_id" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableLeaderID(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetLeaderID(*s)
	}
	return fuau
}

// ClearLeaderID clears the value of the "leader_id" field.
func (fuau *FmUserAccountUpdate) ClearLeaderID() *FmUserAccountUpdate {
	fuau.mutation.ClearLeaderID()
	return fuau
}

// SetDeviceTime sets the "device_time" field.
func (fuau *FmUserAccountUpdate) SetDeviceTime(s string) *FmUserAccountUpdate {
	fuau.mutation.SetDeviceTime(s)
	return fuau
}

// SetNillableDeviceTime sets the "device_time" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableDeviceTime(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetDeviceTime(*s)
	}
	return fuau
}

// ClearDeviceTime clears the value of the "device_time" field.
func (fuau *FmUserAccountUpdate) ClearDeviceTime() *FmUserAccountUpdate {
	fuau.mutation.ClearDeviceTime()
	return fuau
}

// SetTenantID sets the "tenant_id" field.
func (fuau *FmUserAccountUpdate) SetTenantID(u uuid.UUID) *FmUserAccountUpdate {
	fuau.mutation.SetTenantID(u)
	return fuau
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableTenantID(u *uuid.UUID) *FmUserAccountUpdate {
	if u != nil {
		fuau.SetTenantID(*u)
	}
	return fuau
}

// ClearTenantID clears the value of the "tenant_id" field.
func (fuau *FmUserAccountUpdate) ClearTenantID() *FmUserAccountUpdate {
	fuau.mutation.ClearTenantID()
	return fuau
}

// SetDeleteFlag sets the "delete_flag" field.
func (fuau *FmUserAccountUpdate) SetDeleteFlag(s string) *FmUserAccountUpdate {
	fuau.mutation.SetDeleteFlag(s)
	return fuau
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableDeleteFlag(s *string) *FmUserAccountUpdate {
	if s != nil {
		fuau.SetDeleteFlag(*s)
	}
	return fuau
}

// ClearDeleteFlag clears the value of the "delete_flag" field.
func (fuau *FmUserAccountUpdate) ClearDeleteFlag() *FmUserAccountUpdate {
	fuau.mutation.ClearDeleteFlag()
	return fuau
}

// SetCreatedTime sets the "created_time" field.
func (fuau *FmUserAccountUpdate) SetCreatedTime(t time.Time) *FmUserAccountUpdate {
	fuau.mutation.SetCreatedTime(t)
	return fuau
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableCreatedTime(t *time.Time) *FmUserAccountUpdate {
	if t != nil {
		fuau.SetCreatedTime(*t)
	}
	return fuau
}

// ClearCreatedTime clears the value of the "created_time" field.
func (fuau *FmUserAccountUpdate) ClearCreatedTime() *FmUserAccountUpdate {
	fuau.mutation.ClearCreatedTime()
	return fuau
}

// SetUpdatedTime sets the "updated_time" field.
func (fuau *FmUserAccountUpdate) SetUpdatedTime(t time.Time) *FmUserAccountUpdate {
	fuau.mutation.SetUpdatedTime(t)
	return fuau
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (fuau *FmUserAccountUpdate) ClearUpdatedTime() *FmUserAccountUpdate {
	fuau.mutation.ClearUpdatedTime()
	return fuau
}

// SetDeletedTime sets the "deleted_time" field.
func (fuau *FmUserAccountUpdate) SetDeletedTime(t time.Time) *FmUserAccountUpdate {
	fuau.mutation.SetDeletedTime(t)
	return fuau
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (fuau *FmUserAccountUpdate) SetNillableDeletedTime(t *time.Time) *FmUserAccountUpdate {
	if t != nil {
		fuau.SetDeletedTime(*t)
	}
	return fuau
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (fuau *FmUserAccountUpdate) ClearDeletedTime() *FmUserAccountUpdate {
	fuau.mutation.ClearDeletedTime()
	return fuau
}

// Mutation returns the FmUserAccountMutation object of the builder.
func (fuau *FmUserAccountUpdate) Mutation() *FmUserAccountMutation {
	return fuau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fuau *FmUserAccountUpdate) Save(ctx context.Context) (int, error) {
	fuau.defaults()
	return withHooks(ctx, fuau.sqlSave, fuau.mutation, fuau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuau *FmUserAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := fuau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fuau *FmUserAccountUpdate) Exec(ctx context.Context) error {
	_, err := fuau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuau *FmUserAccountUpdate) ExecX(ctx context.Context) {
	if err := fuau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuau *FmUserAccountUpdate) defaults() {
	if _, ok := fuau.mutation.UpdatedTime(); !ok && !fuau.mutation.UpdatedTimeCleared() {
		v := fmuseraccount.UpdateDefaultUpdatedTime()
		fuau.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuau *FmUserAccountUpdate) check() error {
	if v, ok := fuau.mutation.Username(); ok {
		if err := fmuseraccount.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`genclients: validator failed for field "FmUserAccount.username": %w`, err)}
		}
	}
	if v, ok := fuau.mutation.LoginName(); ok {
		if err := fmuseraccount.LoginNameValidator(v); err != nil {
			return &ValidationError{Name: "login_name", err: fmt.Errorf(`genclients: validator failed for field "FmUserAccount.login_name": %w`, err)}
		}
	}
	if v, ok := fuau.mutation.Password(); ok {
		if err := fmuseraccount.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`genclients: validator failed for field "FmUserAccount.password": %w`, err)}
		}
	}
	return nil
}

func (fuau *FmUserAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fuau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fmuseraccount.Table, fmuseraccount.Columns, sqlgraph.NewFieldSpec(fmuseraccount.FieldID, field.TypeInt64))
	if ps := fuau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuau.mutation.Username(); ok {
		_spec.SetField(fmuseraccount.FieldUsername, field.TypeString, value)
	}
	if value, ok := fuau.mutation.LoginName(); ok {
		_spec.SetField(fmuseraccount.FieldLoginName, field.TypeString, value)
	}
	if value, ok := fuau.mutation.Password(); ok {
		_spec.SetField(fmuseraccount.FieldPassword, field.TypeString, value)
	}
	if value, ok := fuau.mutation.LeaderFlag(); ok {
		_spec.SetField(fmuseraccount.FieldLeaderFlag, field.TypeString, value)
	}
	if fuau.mutation.LeaderFlagCleared() {
		_spec.ClearField(fmuseraccount.FieldLeaderFlag, field.TypeString)
	}
	if value, ok := fuau.mutation.Position(); ok {
		_spec.SetField(fmuseraccount.FieldPosition, field.TypeString, value)
	}
	if fuau.mutation.PositionCleared() {
		_spec.ClearField(fmuseraccount.FieldPosition, field.TypeString)
	}
	if value, ok := fuau.mutation.Department(); ok {
		_spec.SetField(fmuseraccount.FieldDepartment, field.TypeString, value)
	}
	if fuau.mutation.DepartmentCleared() {
		_spec.ClearField(fmuseraccount.FieldDepartment, field.TypeString)
	}
	if value, ok := fuau.mutation.Email(); ok {
		_spec.SetField(fmuseraccount.FieldEmail, field.TypeString, value)
	}
	if fuau.mutation.EmailCleared() {
		_spec.ClearField(fmuseraccount.FieldEmail, field.TypeString)
	}
	if value, ok := fuau.mutation.Phonenum(); ok {
		_spec.SetField(fmuseraccount.FieldPhonenum, field.TypeString, value)
	}
	if fuau.mutation.PhonenumCleared() {
		_spec.ClearField(fmuseraccount.FieldPhonenum, field.TypeString)
	}
	if value, ok := fuau.mutation.Description(); ok {
		_spec.SetField(fmuseraccount.FieldDescription, field.TypeString, value)
	}
	if fuau.mutation.DescriptionCleared() {
		_spec.ClearField(fmuseraccount.FieldDescription, field.TypeString)
	}
	if value, ok := fuau.mutation.Ethnicity(); ok {
		_spec.SetField(fmuseraccount.FieldEthnicity, field.TypeString, value)
	}
	if fuau.mutation.EthnicityCleared() {
		_spec.ClearField(fmuseraccount.FieldEthnicity, field.TypeString)
	}
	if value, ok := fuau.mutation.Gender(); ok {
		_spec.SetField(fmuseraccount.FieldGender, field.TypeString, value)
	}
	if fuau.mutation.GenderCleared() {
		_spec.ClearField(fmuseraccount.FieldGender, field.TypeString)
	}
	if value, ok := fuau.mutation.Local(); ok {
		_spec.SetField(fmuseraccount.FieldLocal, field.TypeString, value)
	}
	if fuau.mutation.LocalCleared() {
		_spec.ClearField(fmuseraccount.FieldLocal, field.TypeString)
	}
	if value, ok := fuau.mutation.Localhost(); ok {
		_spec.SetField(fmuseraccount.FieldLocalhost, field.TypeString, value)
	}
	if fuau.mutation.LocalhostCleared() {
		_spec.ClearField(fmuseraccount.FieldLocalhost, field.TypeString)
	}
	if value, ok := fuau.mutation.M2Localhost(); ok {
		_spec.SetField(fmuseraccount.FieldM2Localhost, field.TypeString, value)
	}
	if fuau.mutation.M2LocalhostCleared() {
		_spec.ClearField(fmuseraccount.FieldM2Localhost, field.TypeString)
	}
	if value, ok := fuau.mutation.Ismanager(); ok {
		_spec.SetField(fmuseraccount.FieldIsmanager, field.TypeString, value)
	}
	if fuau.mutation.IsmanagerCleared() {
		_spec.ClearField(fmuseraccount.FieldIsmanager, field.TypeString)
	}
	if value, ok := fuau.mutation.Isystem(); ok {
		_spec.SetField(fmuseraccount.FieldIsystem, field.TypeString, value)
	}
	if fuau.mutation.IsystemCleared() {
		_spec.ClearField(fmuseraccount.FieldIsystem, field.TypeString)
	}
	if value, ok := fuau.mutation.Enabled(); ok {
		_spec.SetField(fmuseraccount.FieldEnabled, field.TypeBool, value)
	}
	if fuau.mutation.EnabledCleared() {
		_spec.ClearField(fmuseraccount.FieldEnabled, field.TypeBool)
	}
	if value, ok := fuau.mutation.IsSms(); ok {
		_spec.SetField(fmuseraccount.FieldIsSms, field.TypeBool, value)
	}
	if fuau.mutation.IsSmsCleared() {
		_spec.ClearField(fmuseraccount.FieldIsSms, field.TypeBool)
	}
	if value, ok := fuau.mutation.MemberID(); ok {
		_spec.SetField(fmuseraccount.FieldMemberID, field.TypeString, value)
	}
	if fuau.mutation.MemberIDCleared() {
		_spec.ClearField(fmuseraccount.FieldMemberID, field.TypeString)
	}
	if value, ok := fuau.mutation.LeaderID(); ok {
		_spec.SetField(fmuseraccount.FieldLeaderID, field.TypeString, value)
	}
	if fuau.mutation.LeaderIDCleared() {
		_spec.ClearField(fmuseraccount.FieldLeaderID, field.TypeString)
	}
	if value, ok := fuau.mutation.DeviceTime(); ok {
		_spec.SetField(fmuseraccount.FieldDeviceTime, field.TypeString, value)
	}
	if fuau.mutation.DeviceTimeCleared() {
		_spec.ClearField(fmuseraccount.FieldDeviceTime, field.TypeString)
	}
	if value, ok := fuau.mutation.TenantID(); ok {
		_spec.SetField(fmuseraccount.FieldTenantID, field.TypeUUID, value)
	}
	if fuau.mutation.TenantIDCleared() {
		_spec.ClearField(fmuseraccount.FieldTenantID, field.TypeUUID)
	}
	if value, ok := fuau.mutation.DeleteFlag(); ok {
		_spec.SetField(fmuseraccount.FieldDeleteFlag, field.TypeString, value)
	}
	if fuau.mutation.DeleteFlagCleared() {
		_spec.ClearField(fmuseraccount.FieldDeleteFlag, field.TypeString)
	}
	if value, ok := fuau.mutation.CreatedTime(); ok {
		_spec.SetField(fmuseraccount.FieldCreatedTime, field.TypeTime, value)
	}
	if fuau.mutation.CreatedTimeCleared() {
		_spec.ClearField(fmuseraccount.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := fuau.mutation.UpdatedTime(); ok {
		_spec.SetField(fmuseraccount.FieldUpdatedTime, field.TypeTime, value)
	}
	if fuau.mutation.UpdatedTimeCleared() {
		_spec.ClearField(fmuseraccount.FieldUpdatedTime, field.TypeTime)
	}
	if value, ok := fuau.mutation.DeletedTime(); ok {
		_spec.SetField(fmuseraccount.FieldDeletedTime, field.TypeTime, value)
	}
	if fuau.mutation.DeletedTimeCleared() {
		_spec.ClearField(fmuseraccount.FieldDeletedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fuau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fmuseraccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fuau.mutation.done = true
	return n, nil
}

// FmUserAccountUpdateOne is the builder for updating a single FmUserAccount entity.
type FmUserAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FmUserAccountMutation
}

// SetUsername sets the "username" field.
func (fuauo *FmUserAccountUpdateOne) SetUsername(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetUsername(s)
	return fuauo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableUsername(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetUsername(*s)
	}
	return fuauo
}

// SetLoginName sets the "login_name" field.
func (fuauo *FmUserAccountUpdateOne) SetLoginName(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetLoginName(s)
	return fuauo
}

// SetNillableLoginName sets the "login_name" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableLoginName(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetLoginName(*s)
	}
	return fuauo
}

// SetPassword sets the "password" field.
func (fuauo *FmUserAccountUpdateOne) SetPassword(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetPassword(s)
	return fuauo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillablePassword(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetPassword(*s)
	}
	return fuauo
}

// SetLeaderFlag sets the "leader_flag" field.
func (fuauo *FmUserAccountUpdateOne) SetLeaderFlag(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetLeaderFlag(s)
	return fuauo
}

// SetNillableLeaderFlag sets the "leader_flag" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableLeaderFlag(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetLeaderFlag(*s)
	}
	return fuauo
}

// ClearLeaderFlag clears the value of the "leader_flag" field.
func (fuauo *FmUserAccountUpdateOne) ClearLeaderFlag() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearLeaderFlag()
	return fuauo
}

// SetPosition sets the "position" field.
func (fuauo *FmUserAccountUpdateOne) SetPosition(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetPosition(s)
	return fuauo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillablePosition(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetPosition(*s)
	}
	return fuauo
}

// ClearPosition clears the value of the "position" field.
func (fuauo *FmUserAccountUpdateOne) ClearPosition() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearPosition()
	return fuauo
}

// SetDepartment sets the "department" field.
func (fuauo *FmUserAccountUpdateOne) SetDepartment(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetDepartment(s)
	return fuauo
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableDepartment(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetDepartment(*s)
	}
	return fuauo
}

// ClearDepartment clears the value of the "department" field.
func (fuauo *FmUserAccountUpdateOne) ClearDepartment() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearDepartment()
	return fuauo
}

// SetEmail sets the "email" field.
func (fuauo *FmUserAccountUpdateOne) SetEmail(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetEmail(s)
	return fuauo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableEmail(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetEmail(*s)
	}
	return fuauo
}

// ClearEmail clears the value of the "email" field.
func (fuauo *FmUserAccountUpdateOne) ClearEmail() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearEmail()
	return fuauo
}

// SetPhonenum sets the "phonenum" field.
func (fuauo *FmUserAccountUpdateOne) SetPhonenum(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetPhonenum(s)
	return fuauo
}

// SetNillablePhonenum sets the "phonenum" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillablePhonenum(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetPhonenum(*s)
	}
	return fuauo
}

// ClearPhonenum clears the value of the "phonenum" field.
func (fuauo *FmUserAccountUpdateOne) ClearPhonenum() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearPhonenum()
	return fuauo
}

// SetDescription sets the "description" field.
func (fuauo *FmUserAccountUpdateOne) SetDescription(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetDescription(s)
	return fuauo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableDescription(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetDescription(*s)
	}
	return fuauo
}

// ClearDescription clears the value of the "description" field.
func (fuauo *FmUserAccountUpdateOne) ClearDescription() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearDescription()
	return fuauo
}

// SetEthnicity sets the "ethnicity" field.
func (fuauo *FmUserAccountUpdateOne) SetEthnicity(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetEthnicity(s)
	return fuauo
}

// SetNillableEthnicity sets the "ethnicity" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableEthnicity(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetEthnicity(*s)
	}
	return fuauo
}

// ClearEthnicity clears the value of the "ethnicity" field.
func (fuauo *FmUserAccountUpdateOne) ClearEthnicity() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearEthnicity()
	return fuauo
}

// SetGender sets the "gender" field.
func (fuauo *FmUserAccountUpdateOne) SetGender(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetGender(s)
	return fuauo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableGender(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetGender(*s)
	}
	return fuauo
}

// ClearGender clears the value of the "gender" field.
func (fuauo *FmUserAccountUpdateOne) ClearGender() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearGender()
	return fuauo
}

// SetLocal sets the "local" field.
func (fuauo *FmUserAccountUpdateOne) SetLocal(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetLocal(s)
	return fuauo
}

// SetNillableLocal sets the "local" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableLocal(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetLocal(*s)
	}
	return fuauo
}

// ClearLocal clears the value of the "local" field.
func (fuauo *FmUserAccountUpdateOne) ClearLocal() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearLocal()
	return fuauo
}

// SetLocalhost sets the "localhost" field.
func (fuauo *FmUserAccountUpdateOne) SetLocalhost(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetLocalhost(s)
	return fuauo
}

// SetNillableLocalhost sets the "localhost" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableLocalhost(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetLocalhost(*s)
	}
	return fuauo
}

// ClearLocalhost clears the value of the "localhost" field.
func (fuauo *FmUserAccountUpdateOne) ClearLocalhost() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearLocalhost()
	return fuauo
}

// SetM2Localhost sets the "m2_localhost" field.
func (fuauo *FmUserAccountUpdateOne) SetM2Localhost(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetM2Localhost(s)
	return fuauo
}

// SetNillableM2Localhost sets the "m2_localhost" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableM2Localhost(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetM2Localhost(*s)
	}
	return fuauo
}

// ClearM2Localhost clears the value of the "m2_localhost" field.
func (fuauo *FmUserAccountUpdateOne) ClearM2Localhost() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearM2Localhost()
	return fuauo
}

// SetIsmanager sets the "ismanager" field.
func (fuauo *FmUserAccountUpdateOne) SetIsmanager(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetIsmanager(s)
	return fuauo
}

// SetNillableIsmanager sets the "ismanager" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableIsmanager(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetIsmanager(*s)
	}
	return fuauo
}

// ClearIsmanager clears the value of the "ismanager" field.
func (fuauo *FmUserAccountUpdateOne) ClearIsmanager() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearIsmanager()
	return fuauo
}

// SetIsystem sets the "isystem" field.
func (fuauo *FmUserAccountUpdateOne) SetIsystem(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetIsystem(s)
	return fuauo
}

// SetNillableIsystem sets the "isystem" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableIsystem(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetIsystem(*s)
	}
	return fuauo
}

// ClearIsystem clears the value of the "isystem" field.
func (fuauo *FmUserAccountUpdateOne) ClearIsystem() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearIsystem()
	return fuauo
}

// SetEnabled sets the "enabled" field.
func (fuauo *FmUserAccountUpdateOne) SetEnabled(b bool) *FmUserAccountUpdateOne {
	fuauo.mutation.SetEnabled(b)
	return fuauo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableEnabled(b *bool) *FmUserAccountUpdateOne {
	if b != nil {
		fuauo.SetEnabled(*b)
	}
	return fuauo
}

// ClearEnabled clears the value of the "enabled" field.
func (fuauo *FmUserAccountUpdateOne) ClearEnabled() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearEnabled()
	return fuauo
}

// SetIsSms sets the "is_sms" field.
func (fuauo *FmUserAccountUpdateOne) SetIsSms(b bool) *FmUserAccountUpdateOne {
	fuauo.mutation.SetIsSms(b)
	return fuauo
}

// SetNillableIsSms sets the "is_sms" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableIsSms(b *bool) *FmUserAccountUpdateOne {
	if b != nil {
		fuauo.SetIsSms(*b)
	}
	return fuauo
}

// ClearIsSms clears the value of the "is_sms" field.
func (fuauo *FmUserAccountUpdateOne) ClearIsSms() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearIsSms()
	return fuauo
}

// SetMemberID sets the "member_id" field.
func (fuauo *FmUserAccountUpdateOne) SetMemberID(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetMemberID(s)
	return fuauo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableMemberID(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetMemberID(*s)
	}
	return fuauo
}

// ClearMemberID clears the value of the "member_id" field.
func (fuauo *FmUserAccountUpdateOne) ClearMemberID() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearMemberID()
	return fuauo
}

// SetLeaderID sets the "leader_id" field.
func (fuauo *FmUserAccountUpdateOne) SetLeaderID(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetLeaderID(s)
	return fuauo
}

// SetNillableLeaderID sets the "leader_id" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableLeaderID(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetLeaderID(*s)
	}
	return fuauo
}

// ClearLeaderID clears the value of the "leader_id" field.
func (fuauo *FmUserAccountUpdateOne) ClearLeaderID() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearLeaderID()
	return fuauo
}

// SetDeviceTime sets the "device_time" field.
func (fuauo *FmUserAccountUpdateOne) SetDeviceTime(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetDeviceTime(s)
	return fuauo
}

// SetNillableDeviceTime sets the "device_time" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableDeviceTime(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetDeviceTime(*s)
	}
	return fuauo
}

// ClearDeviceTime clears the value of the "device_time" field.
func (fuauo *FmUserAccountUpdateOne) ClearDeviceTime() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearDeviceTime()
	return fuauo
}

// SetTenantID sets the "tenant_id" field.
func (fuauo *FmUserAccountUpdateOne) SetTenantID(u uuid.UUID) *FmUserAccountUpdateOne {
	fuauo.mutation.SetTenantID(u)
	return fuauo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableTenantID(u *uuid.UUID) *FmUserAccountUpdateOne {
	if u != nil {
		fuauo.SetTenantID(*u)
	}
	return fuauo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (fuauo *FmUserAccountUpdateOne) ClearTenantID() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearTenantID()
	return fuauo
}

// SetDeleteFlag sets the "delete_flag" field.
func (fuauo *FmUserAccountUpdateOne) SetDeleteFlag(s string) *FmUserAccountUpdateOne {
	fuauo.mutation.SetDeleteFlag(s)
	return fuauo
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableDeleteFlag(s *string) *FmUserAccountUpdateOne {
	if s != nil {
		fuauo.SetDeleteFlag(*s)
	}
	return fuauo
}

// ClearDeleteFlag clears the value of the "delete_flag" field.
func (fuauo *FmUserAccountUpdateOne) ClearDeleteFlag() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearDeleteFlag()
	return fuauo
}

// SetCreatedTime sets the "created_time" field.
func (fuauo *FmUserAccountUpdateOne) SetCreatedTime(t time.Time) *FmUserAccountUpdateOne {
	fuauo.mutation.SetCreatedTime(t)
	return fuauo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableCreatedTime(t *time.Time) *FmUserAccountUpdateOne {
	if t != nil {
		fuauo.SetCreatedTime(*t)
	}
	return fuauo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (fuauo *FmUserAccountUpdateOne) ClearCreatedTime() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearCreatedTime()
	return fuauo
}

// SetUpdatedTime sets the "updated_time" field.
func (fuauo *FmUserAccountUpdateOne) SetUpdatedTime(t time.Time) *FmUserAccountUpdateOne {
	fuauo.mutation.SetUpdatedTime(t)
	return fuauo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (fuauo *FmUserAccountUpdateOne) ClearUpdatedTime() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearUpdatedTime()
	return fuauo
}

// SetDeletedTime sets the "deleted_time" field.
func (fuauo *FmUserAccountUpdateOne) SetDeletedTime(t time.Time) *FmUserAccountUpdateOne {
	fuauo.mutation.SetDeletedTime(t)
	return fuauo
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (fuauo *FmUserAccountUpdateOne) SetNillableDeletedTime(t *time.Time) *FmUserAccountUpdateOne {
	if t != nil {
		fuauo.SetDeletedTime(*t)
	}
	return fuauo
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (fuauo *FmUserAccountUpdateOne) ClearDeletedTime() *FmUserAccountUpdateOne {
	fuauo.mutation.ClearDeletedTime()
	return fuauo
}

// Mutation returns the FmUserAccountMutation object of the builder.
func (fuauo *FmUserAccountUpdateOne) Mutation() *FmUserAccountMutation {
	return fuauo.mutation
}

// Where appends a list predicates to the FmUserAccountUpdate builder.
func (fuauo *FmUserAccountUpdateOne) Where(ps ...predicate.FmUserAccount) *FmUserAccountUpdateOne {
	fuauo.mutation.Where(ps...)
	return fuauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuauo *FmUserAccountUpdateOne) Select(field string, fields ...string) *FmUserAccountUpdateOne {
	fuauo.fields = append([]string{field}, fields...)
	return fuauo
}

// Save executes the query and returns the updated FmUserAccount entity.
func (fuauo *FmUserAccountUpdateOne) Save(ctx context.Context) (*FmUserAccount, error) {
	fuauo.defaults()
	return withHooks(ctx, fuauo.sqlSave, fuauo.mutation, fuauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuauo *FmUserAccountUpdateOne) SaveX(ctx context.Context) *FmUserAccount {
	node, err := fuauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuauo *FmUserAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := fuauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuauo *FmUserAccountUpdateOne) ExecX(ctx context.Context) {
	if err := fuauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuauo *FmUserAccountUpdateOne) defaults() {
	if _, ok := fuauo.mutation.UpdatedTime(); !ok && !fuauo.mutation.UpdatedTimeCleared() {
		v := fmuseraccount.UpdateDefaultUpdatedTime()
		fuauo.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuauo *FmUserAccountUpdateOne) check() error {
	if v, ok := fuauo.mutation.Username(); ok {
		if err := fmuseraccount.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`genclients: validator failed for field "FmUserAccount.username": %w`, err)}
		}
	}
	if v, ok := fuauo.mutation.LoginName(); ok {
		if err := fmuseraccount.LoginNameValidator(v); err != nil {
			return &ValidationError{Name: "login_name", err: fmt.Errorf(`genclients: validator failed for field "FmUserAccount.login_name": %w`, err)}
		}
	}
	if v, ok := fuauo.mutation.Password(); ok {
		if err := fmuseraccount.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`genclients: validator failed for field "FmUserAccount.password": %w`, err)}
		}
	}
	return nil
}

func (fuauo *FmUserAccountUpdateOne) sqlSave(ctx context.Context) (_node *FmUserAccount, err error) {
	if err := fuauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fmuseraccount.Table, fmuseraccount.Columns, sqlgraph.NewFieldSpec(fmuseraccount.FieldID, field.TypeInt64))
	id, ok := fuauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "FmUserAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fmuseraccount.FieldID)
		for _, f := range fields {
			if !fmuseraccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != fmuseraccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuauo.mutation.Username(); ok {
		_spec.SetField(fmuseraccount.FieldUsername, field.TypeString, value)
	}
	if value, ok := fuauo.mutation.LoginName(); ok {
		_spec.SetField(fmuseraccount.FieldLoginName, field.TypeString, value)
	}
	if value, ok := fuauo.mutation.Password(); ok {
		_spec.SetField(fmuseraccount.FieldPassword, field.TypeString, value)
	}
	if value, ok := fuauo.mutation.LeaderFlag(); ok {
		_spec.SetField(fmuseraccount.FieldLeaderFlag, field.TypeString, value)
	}
	if fuauo.mutation.LeaderFlagCleared() {
		_spec.ClearField(fmuseraccount.FieldLeaderFlag, field.TypeString)
	}
	if value, ok := fuauo.mutation.Position(); ok {
		_spec.SetField(fmuseraccount.FieldPosition, field.TypeString, value)
	}
	if fuauo.mutation.PositionCleared() {
		_spec.ClearField(fmuseraccount.FieldPosition, field.TypeString)
	}
	if value, ok := fuauo.mutation.Department(); ok {
		_spec.SetField(fmuseraccount.FieldDepartment, field.TypeString, value)
	}
	if fuauo.mutation.DepartmentCleared() {
		_spec.ClearField(fmuseraccount.FieldDepartment, field.TypeString)
	}
	if value, ok := fuauo.mutation.Email(); ok {
		_spec.SetField(fmuseraccount.FieldEmail, field.TypeString, value)
	}
	if fuauo.mutation.EmailCleared() {
		_spec.ClearField(fmuseraccount.FieldEmail, field.TypeString)
	}
	if value, ok := fuauo.mutation.Phonenum(); ok {
		_spec.SetField(fmuseraccount.FieldPhonenum, field.TypeString, value)
	}
	if fuauo.mutation.PhonenumCleared() {
		_spec.ClearField(fmuseraccount.FieldPhonenum, field.TypeString)
	}
	if value, ok := fuauo.mutation.Description(); ok {
		_spec.SetField(fmuseraccount.FieldDescription, field.TypeString, value)
	}
	if fuauo.mutation.DescriptionCleared() {
		_spec.ClearField(fmuseraccount.FieldDescription, field.TypeString)
	}
	if value, ok := fuauo.mutation.Ethnicity(); ok {
		_spec.SetField(fmuseraccount.FieldEthnicity, field.TypeString, value)
	}
	if fuauo.mutation.EthnicityCleared() {
		_spec.ClearField(fmuseraccount.FieldEthnicity, field.TypeString)
	}
	if value, ok := fuauo.mutation.Gender(); ok {
		_spec.SetField(fmuseraccount.FieldGender, field.TypeString, value)
	}
	if fuauo.mutation.GenderCleared() {
		_spec.ClearField(fmuseraccount.FieldGender, field.TypeString)
	}
	if value, ok := fuauo.mutation.Local(); ok {
		_spec.SetField(fmuseraccount.FieldLocal, field.TypeString, value)
	}
	if fuauo.mutation.LocalCleared() {
		_spec.ClearField(fmuseraccount.FieldLocal, field.TypeString)
	}
	if value, ok := fuauo.mutation.Localhost(); ok {
		_spec.SetField(fmuseraccount.FieldLocalhost, field.TypeString, value)
	}
	if fuauo.mutation.LocalhostCleared() {
		_spec.ClearField(fmuseraccount.FieldLocalhost, field.TypeString)
	}
	if value, ok := fuauo.mutation.M2Localhost(); ok {
		_spec.SetField(fmuseraccount.FieldM2Localhost, field.TypeString, value)
	}
	if fuauo.mutation.M2LocalhostCleared() {
		_spec.ClearField(fmuseraccount.FieldM2Localhost, field.TypeString)
	}
	if value, ok := fuauo.mutation.Ismanager(); ok {
		_spec.SetField(fmuseraccount.FieldIsmanager, field.TypeString, value)
	}
	if fuauo.mutation.IsmanagerCleared() {
		_spec.ClearField(fmuseraccount.FieldIsmanager, field.TypeString)
	}
	if value, ok := fuauo.mutation.Isystem(); ok {
		_spec.SetField(fmuseraccount.FieldIsystem, field.TypeString, value)
	}
	if fuauo.mutation.IsystemCleared() {
		_spec.ClearField(fmuseraccount.FieldIsystem, field.TypeString)
	}
	if value, ok := fuauo.mutation.Enabled(); ok {
		_spec.SetField(fmuseraccount.FieldEnabled, field.TypeBool, value)
	}
	if fuauo.mutation.EnabledCleared() {
		_spec.ClearField(fmuseraccount.FieldEnabled, field.TypeBool)
	}
	if value, ok := fuauo.mutation.IsSms(); ok {
		_spec.SetField(fmuseraccount.FieldIsSms, field.TypeBool, value)
	}
	if fuauo.mutation.IsSmsCleared() {
		_spec.ClearField(fmuseraccount.FieldIsSms, field.TypeBool)
	}
	if value, ok := fuauo.mutation.MemberID(); ok {
		_spec.SetField(fmuseraccount.FieldMemberID, field.TypeString, value)
	}
	if fuauo.mutation.MemberIDCleared() {
		_spec.ClearField(fmuseraccount.FieldMemberID, field.TypeString)
	}
	if value, ok := fuauo.mutation.LeaderID(); ok {
		_spec.SetField(fmuseraccount.FieldLeaderID, field.TypeString, value)
	}
	if fuauo.mutation.LeaderIDCleared() {
		_spec.ClearField(fmuseraccount.FieldLeaderID, field.TypeString)
	}
	if value, ok := fuauo.mutation.DeviceTime(); ok {
		_spec.SetField(fmuseraccount.FieldDeviceTime, field.TypeString, value)
	}
	if fuauo.mutation.DeviceTimeCleared() {
		_spec.ClearField(fmuseraccount.FieldDeviceTime, field.TypeString)
	}
	if value, ok := fuauo.mutation.TenantID(); ok {
		_spec.SetField(fmuseraccount.FieldTenantID, field.TypeUUID, value)
	}
	if fuauo.mutation.TenantIDCleared() {
		_spec.ClearField(fmuseraccount.FieldTenantID, field.TypeUUID)
	}
	if value, ok := fuauo.mutation.DeleteFlag(); ok {
		_spec.SetField(fmuseraccount.FieldDeleteFlag, field.TypeString, value)
	}
	if fuauo.mutation.DeleteFlagCleared() {
		_spec.ClearField(fmuseraccount.FieldDeleteFlag, field.TypeString)
	}
	if value, ok := fuauo.mutation.CreatedTime(); ok {
		_spec.SetField(fmuseraccount.FieldCreatedTime, field.TypeTime, value)
	}
	if fuauo.mutation.CreatedTimeCleared() {
		_spec.ClearField(fmuseraccount.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := fuauo.mutation.UpdatedTime(); ok {
		_spec.SetField(fmuseraccount.FieldUpdatedTime, field.TypeTime, value)
	}
	if fuauo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(fmuseraccount.FieldUpdatedTime, field.TypeTime)
	}
	if value, ok := fuauo.mutation.DeletedTime(); ok {
		_spec.SetField(fmuseraccount.FieldDeletedTime, field.TypeTime, value)
	}
	if fuauo.mutation.DeletedTimeCleared() {
		_spec.ClearField(fmuseraccount.FieldDeletedTime, field.TypeTime)
	}
	_node = &FmUserAccount{config: fuauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fmuseraccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuauo.mutation.done = true
	return _node, nil
}
