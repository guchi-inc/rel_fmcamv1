// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/models/schema"
	"fmcam/systems/genclients/alerts"
	"fmcam/systems/genclients/capturelogs"
	"fmcam/systems/genclients/devices"
	"fmcam/systems/genclients/faces"
	"fmcam/systems/genclients/fieldmetadata"
	"fmcam/systems/genclients/fmalertdefinition"
	"fmcam/systems/genclients/fmalertgroup"
	"fmcam/systems/genclients/fmdedicatedservices"
	"fmcam/systems/genclients/fmdemands"
	"fmcam/systems/genclients/fmpmsapi"
	"fmcam/systems/genclients/fmuseraccount"
	"fmcam/systems/genclients/govarea"
	"fmcam/systems/genclients/govcity"
	"fmcam/systems/genclients/govstreet"
	"fmcam/systems/genclients/profiles"
	"fmcam/systems/genclients/profiletype"
	"fmcam/systems/genclients/province"
	"fmcam/systems/genclients/sqllog"
	"fmcam/systems/genclients/temporaryface"
	"fmcam/systems/genclients/tenants"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	alertsFields := schema.Alerts{}.Fields()
	_ = alertsFields
	// alertsDescAlertLevel is the schema descriptor for alert_level field.
	alertsDescAlertLevel := alertsFields[4].Descriptor()
	// alerts.DefaultAlertLevel holds the default value on creation for the alert_level field.
	alerts.DefaultAlertLevel = alertsDescAlertLevel.Default.(int8)
	// alertsDescStatus is the schema descriptor for status field.
	alertsDescStatus := alertsFields[5].Descriptor()
	// alerts.DefaultStatus holds the default value on creation for the status field.
	alerts.DefaultStatus = alertsDescStatus.Default.(int8)
	// alertsDescRemarks is the schema descriptor for remarks field.
	alertsDescRemarks := alertsFields[8].Descriptor()
	// alerts.DefaultRemarks holds the default value on creation for the remarks field.
	alerts.DefaultRemarks = alertsDescRemarks.Default.(string)
	capturelogsFields := schema.CaptureLogs{}.Fields()
	_ = capturelogsFields
	// capturelogsDescFuncType is the schema descriptor for func_type field.
	capturelogsDescFuncType := capturelogsFields[4].Descriptor()
	// capturelogs.DefaultFuncType holds the default value on creation for the func_type field.
	capturelogs.DefaultFuncType = capturelogsDescFuncType.Default.(int8)
	// capturelogsDescMatchScore is the schema descriptor for match_score field.
	capturelogsDescMatchScore := capturelogsFields[5].Descriptor()
	// capturelogs.DefaultMatchScore holds the default value on creation for the match_score field.
	capturelogs.DefaultMatchScore = capturelogsDescMatchScore.Default.(float32)
	// capturelogsDescHasAlert is the schema descriptor for has_alert field.
	capturelogsDescHasAlert := capturelogsFields[6].Descriptor()
	// capturelogs.DefaultHasAlert holds the default value on creation for the has_alert field.
	capturelogs.DefaultHasAlert = capturelogsDescHasAlert.Default.(bool)
	// capturelogsDescCaptureImageURL is the schema descriptor for capture_image_url field.
	capturelogsDescCaptureImageURL := capturelogsFields[10].Descriptor()
	// capturelogs.DefaultCaptureImageURL holds the default value on creation for the capture_image_url field.
	capturelogs.DefaultCaptureImageURL = capturelogsDescCaptureImageURL.Default.(string)
	// capturelogs.CaptureImageURLValidator is a validator for the "capture_image_url" field. It is called by the builders before save.
	capturelogs.CaptureImageURLValidator = capturelogsDescCaptureImageURL.Validators[0].(func(string) error)
	devicesFields := schema.Devices{}.Fields()
	_ = devicesFields
	// devicesDescName is the schema descriptor for name field.
	devicesDescName := devicesFields[2].Descriptor()
	// devices.DefaultName holds the default value on creation for the name field.
	devices.DefaultName = devicesDescName.Default.(string)
	// devices.NameValidator is a validator for the "name" field. It is called by the builders before save.
	devices.NameValidator = devicesDescName.Validators[0].(func(string) error)
	// devicesDescURL is the schema descriptor for url field.
	devicesDescURL := devicesFields[3].Descriptor()
	// devices.DefaultURL holds the default value on creation for the url field.
	devices.DefaultURL = devicesDescURL.Default.(string)
	// devices.URLValidator is a validator for the "url" field. It is called by the builders before save.
	devices.URLValidator = devicesDescURL.Validators[0].(func(string) error)
	// devicesDescLocation is the schema descriptor for location field.
	devicesDescLocation := devicesFields[4].Descriptor()
	// devices.DefaultLocation holds the default value on creation for the location field.
	devices.DefaultLocation = devicesDescLocation.Default.(string)
	// devices.LocationValidator is a validator for the "location" field. It is called by the builders before save.
	devices.LocationValidator = devicesDescLocation.Validators[0].(func(string) error)
	// devicesDescFuncType is the schema descriptor for func_type field.
	devicesDescFuncType := devicesFields[5].Descriptor()
	// devices.DefaultFuncType holds the default value on creation for the func_type field.
	devices.DefaultFuncType = devicesDescFuncType.Default.(int)
	// devicesDescRoiEnabled is the schema descriptor for roi_enabled field.
	devicesDescRoiEnabled := devicesFields[13].Descriptor()
	// devices.DefaultRoiEnabled holds the default value on creation for the roi_enabled field.
	devices.DefaultRoiEnabled = devicesDescRoiEnabled.Default.(bool)
	// devicesDescEnabled is the schema descriptor for enabled field.
	devicesDescEnabled := devicesFields[14].Descriptor()
	// devices.DefaultEnabled holds the default value on creation for the enabled field.
	devices.DefaultEnabled = devicesDescEnabled.Default.(bool)
	// devicesDescTargetFps is the schema descriptor for target_fps field.
	devicesDescTargetFps := devicesFields[15].Descriptor()
	// devices.DefaultTargetFps holds the default value on creation for the target_fps field.
	devices.DefaultTargetFps = devicesDescTargetFps.Default.(int64)
	// devicesDescUpdatedTime is the schema descriptor for updated_time field.
	devicesDescUpdatedTime := devicesFields[18].Descriptor()
	// devices.UpdateDefaultUpdatedTime holds the default value on update for the updated_time field.
	devices.UpdateDefaultUpdatedTime = devicesDescUpdatedTime.UpdateDefault.(func() time.Time)
	fmpmsapiFields := schema.FMPMSApi{}.Fields()
	_ = fmpmsapiFields
	// fmpmsapiDescPmsName is the schema descriptor for pms_name field.
	fmpmsapiDescPmsName := fmpmsapiFields[1].Descriptor()
	// fmpmsapi.DefaultPmsName holds the default value on creation for the pms_name field.
	fmpmsapi.DefaultPmsName = fmpmsapiDescPmsName.Default.(string)
	// fmpmsapi.PmsNameValidator is a validator for the "pms_name" field. It is called by the builders before save.
	fmpmsapi.PmsNameValidator = func() func(string) error {
		validators := fmpmsapiDescPmsName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(pms_name string) error {
			for _, fn := range fns {
				if err := fn(pms_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmpmsapiDescPmsAPI is the schema descriptor for pms_api field.
	fmpmsapiDescPmsAPI := fmpmsapiFields[2].Descriptor()
	// fmpmsapi.DefaultPmsAPI holds the default value on creation for the pms_api field.
	fmpmsapi.DefaultPmsAPI = fmpmsapiDescPmsAPI.Default.(string)
	// fmpmsapi.PmsAPIValidator is a validator for the "pms_api" field. It is called by the builders before save.
	fmpmsapi.PmsAPIValidator = func() func(string) error {
		validators := fmpmsapiDescPmsAPI.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(pms_api string) error {
			for _, fn := range fns {
				if err := fn(pms_api); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmpmsapiDescEnabled is the schema descriptor for enabled field.
	fmpmsapiDescEnabled := fmpmsapiFields[3].Descriptor()
	// fmpmsapi.DefaultEnabled holds the default value on creation for the enabled field.
	fmpmsapi.DefaultEnabled = fmpmsapiDescEnabled.Default.(bool)
	// fmpmsapiDescContact is the schema descriptor for contact field.
	fmpmsapiDescContact := fmpmsapiFields[4].Descriptor()
	// fmpmsapi.DefaultContact holds the default value on creation for the contact field.
	fmpmsapi.DefaultContact = fmpmsapiDescContact.Default.(string)
	// fmpmsapi.ContactValidator is a validator for the "contact" field. It is called by the builders before save.
	fmpmsapi.ContactValidator = func() func(string) error {
		validators := fmpmsapiDescContact.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(contact string) error {
			for _, fn := range fns {
				if err := fn(contact); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmpmsapiDescPhonenum is the schema descriptor for phonenum field.
	fmpmsapiDescPhonenum := fmpmsapiFields[5].Descriptor()
	// fmpmsapi.DefaultPhonenum holds the default value on creation for the phonenum field.
	fmpmsapi.DefaultPhonenum = fmpmsapiDescPhonenum.Default.(string)
	// fmpmsapi.PhonenumValidator is a validator for the "phonenum" field. It is called by the builders before save.
	fmpmsapi.PhonenumValidator = func() func(string) error {
		validators := fmpmsapiDescPhonenum.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phonenum string) error {
			for _, fn := range fns {
				if err := fn(phonenum); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmpmsapiDescDescription is the schema descriptor for description field.
	fmpmsapiDescDescription := fmpmsapiFields[6].Descriptor()
	// fmpmsapi.DefaultDescription holds the default value on creation for the description field.
	fmpmsapi.DefaultDescription = fmpmsapiDescDescription.Default.(string)
	// fmpmsapi.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	fmpmsapi.DescriptionValidator = func() func(string) error {
		validators := fmpmsapiDescDescription.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(description string) error {
			for _, fn := range fns {
				if err := fn(description); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmpmsapiDescDeleteFlag is the schema descriptor for delete_flag field.
	fmpmsapiDescDeleteFlag := fmpmsapiFields[7].Descriptor()
	// fmpmsapi.DefaultDeleteFlag holds the default value on creation for the delete_flag field.
	fmpmsapi.DefaultDeleteFlag = fmpmsapiDescDeleteFlag.Default.(string)
	// fmpmsapi.DeleteFlagValidator is a validator for the "delete_flag" field. It is called by the builders before save.
	fmpmsapi.DeleteFlagValidator = func() func(string) error {
		validators := fmpmsapiDescDeleteFlag.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(delete_flag string) error {
			for _, fn := range fns {
				if err := fn(delete_flag); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmpmsapiDescCreator is the schema descriptor for creator field.
	fmpmsapiDescCreator := fmpmsapiFields[8].Descriptor()
	// fmpmsapi.DefaultCreator holds the default value on creation for the creator field.
	fmpmsapi.DefaultCreator = fmpmsapiDescCreator.Default.(string)
	// fmpmsapi.CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	fmpmsapi.CreatorValidator = func() func(string) error {
		validators := fmpmsapiDescCreator.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(creator string) error {
			for _, fn := range fns {
				if err := fn(creator); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	facesFields := schema.Faces{}.Fields()
	_ = facesFields
	// facesDescFaceEmbedding is the schema descriptor for face_embedding field.
	facesDescFaceEmbedding := facesFields[3].Descriptor()
	// faces.FaceEmbeddingValidator is a validator for the "face_embedding" field. It is called by the builders before save.
	faces.FaceEmbeddingValidator = facesDescFaceEmbedding.Validators[0].(func([]byte) error)
	// facesDescImageURL is the schema descriptor for image_url field.
	facesDescImageURL := facesFields[4].Descriptor()
	// faces.DefaultImageURL holds the default value on creation for the image_url field.
	faces.DefaultImageURL = facesDescImageURL.Default.(string)
	// faces.ImageURLValidator is a validator for the "image_url" field. It is called by the builders before save.
	faces.ImageURLValidator = facesDescImageURL.Validators[0].(func(string) error)
	// facesDescIsPrimary is the schema descriptor for is_primary field.
	facesDescIsPrimary := facesFields[5].Descriptor()
	// faces.DefaultIsPrimary holds the default value on creation for the is_primary field.
	faces.DefaultIsPrimary = facesDescIsPrimary.Default.(bool)
	// facesDescUpdatedLocation is the schema descriptor for updated_location field.
	facesDescUpdatedLocation := facesFields[6].Descriptor()
	// faces.UpdatedLocationValidator is a validator for the "updated_location" field. It is called by the builders before save.
	faces.UpdatedLocationValidator = facesDescUpdatedLocation.Validators[0].(func(string) error)
	// facesDescUpdatedTime is the schema descriptor for updated_time field.
	facesDescUpdatedTime := facesFields[10].Descriptor()
	// faces.UpdateDefaultUpdatedTime holds the default value on update for the updated_time field.
	faces.UpdateDefaultUpdatedTime = facesDescUpdatedTime.UpdateDefault.(func() time.Time)
	fieldmetadataFields := schema.FieldMetadata{}.Fields()
	_ = fieldmetadataFields
	// fieldmetadataDescTableName is the schema descriptor for table_name field.
	fieldmetadataDescTableName := fieldmetadataFields[1].Descriptor()
	// fieldmetadata.TableNameValidator is a validator for the "table_name" field. It is called by the builders before save.
	fieldmetadata.TableNameValidator = func() func(string) error {
		validators := fieldmetadataDescTableName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(table_name string) error {
			for _, fn := range fns {
				if err := fn(table_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fieldmetadataDescName is the schema descriptor for name field.
	fieldmetadataDescName := fieldmetadataFields[2].Descriptor()
	// fieldmetadata.NameValidator is a validator for the "name" field. It is called by the builders before save.
	fieldmetadata.NameValidator = func() func(string) error {
		validators := fieldmetadataDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fieldmetadataDescCname is the schema descriptor for cname field.
	fieldmetadataDescCname := fieldmetadataFields[3].Descriptor()
	// fieldmetadata.CnameValidator is a validator for the "cname" field. It is called by the builders before save.
	fieldmetadata.CnameValidator = func() func(string) error {
		validators := fieldmetadataDescCname.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(cname string) error {
			for _, fn := range fns {
				if err := fn(cname); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fieldmetadataDescDataType is the schema descriptor for data_type field.
	fieldmetadataDescDataType := fieldmetadataFields[4].Descriptor()
	// fieldmetadata.DataTypeValidator is a validator for the "data_type" field. It is called by the builders before save.
	fieldmetadata.DataTypeValidator = func() func(string) error {
		validators := fieldmetadataDescDataType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(data_type string) error {
			for _, fn := range fns {
				if err := fn(data_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fieldmetadataDescIsVisible is the schema descriptor for is_visible field.
	fieldmetadataDescIsVisible := fieldmetadataFields[5].Descriptor()
	// fieldmetadata.DefaultIsVisible holds the default value on creation for the is_visible field.
	fieldmetadata.DefaultIsVisible = fieldmetadataDescIsVisible.Default.(bool)
	// fieldmetadataDescIsSearchable is the schema descriptor for is_searchable field.
	fieldmetadataDescIsSearchable := fieldmetadataFields[6].Descriptor()
	// fieldmetadata.DefaultIsSearchable holds the default value on creation for the is_searchable field.
	fieldmetadata.DefaultIsSearchable = fieldmetadataDescIsSearchable.Default.(bool)
	// fieldmetadataDescIsEditable is the schema descriptor for is_editable field.
	fieldmetadataDescIsEditable := fieldmetadataFields[7].Descriptor()
	// fieldmetadata.DefaultIsEditable holds the default value on creation for the is_editable field.
	fieldmetadata.DefaultIsEditable = fieldmetadataDescIsEditable.Default.(bool)
	// fieldmetadataDescIsRequired is the schema descriptor for is_required field.
	fieldmetadataDescIsRequired := fieldmetadataFields[8].Descriptor()
	// fieldmetadata.DefaultIsRequired holds the default value on creation for the is_required field.
	fieldmetadata.DefaultIsRequired = fieldmetadataDescIsRequired.Default.(bool)
	// fieldmetadataDescMaxLength is the schema descriptor for max_length field.
	fieldmetadataDescMaxLength := fieldmetadataFields[9].Descriptor()
	// fieldmetadata.DefaultMaxLength holds the default value on creation for the max_length field.
	fieldmetadata.DefaultMaxLength = fieldmetadataDescMaxLength.Default.(int)
	// fieldmetadataDescDefaultValue is the schema descriptor for default_value field.
	fieldmetadataDescDefaultValue := fieldmetadataFields[10].Descriptor()
	// fieldmetadata.DefaultDefaultValue holds the default value on creation for the default_value field.
	fieldmetadata.DefaultDefaultValue = fieldmetadataDescDefaultValue.Default.(string)
	// fieldmetadata.DefaultValueValidator is a validator for the "default_value" field. It is called by the builders before save.
	fieldmetadata.DefaultValueValidator = fieldmetadataDescDefaultValue.Validators[0].(func(string) error)
	// fieldmetadataDescDescription is the schema descriptor for description field.
	fieldmetadataDescDescription := fieldmetadataFields[11].Descriptor()
	// fieldmetadata.DefaultDescription holds the default value on creation for the description field.
	fieldmetadata.DefaultDescription = fieldmetadataDescDescription.Default.(string)
	// fieldmetadata.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	fieldmetadata.DescriptionValidator = fieldmetadataDescDescription.Validators[0].(func(string) error)
	// fieldmetadataDescUpdatedTime is the schema descriptor for updated_time field.
	fieldmetadataDescUpdatedTime := fieldmetadataFields[13].Descriptor()
	// fieldmetadata.UpdateDefaultUpdatedTime holds the default value on update for the updated_time field.
	fieldmetadata.UpdateDefaultUpdatedTime = fieldmetadataDescUpdatedTime.UpdateDefault.(func() time.Time)
	// fieldmetadataDescID is the schema descriptor for id field.
	fieldmetadataDescID := fieldmetadataFields[0].Descriptor()
	// fieldmetadata.IDValidator is a validator for the "id" field. It is called by the builders before save.
	fieldmetadata.IDValidator = fieldmetadataDescID.Validators[0].(func(int64) error)
	fmalertdefinitionFields := schema.FmAlertDefinition{}.Fields()
	_ = fmalertdefinitionFields
	// fmalertdefinitionDescAction is the schema descriptor for action field.
	fmalertdefinitionDescAction := fmalertdefinitionFields[4].Descriptor()
	// fmalertdefinition.ActionValidator is a validator for the "action" field. It is called by the builders before save.
	fmalertdefinition.ActionValidator = fmalertdefinitionDescAction.Validators[0].(func(string) error)
	// fmalertdefinitionDescAlarmSound is the schema descriptor for alarm_sound field.
	fmalertdefinitionDescAlarmSound := fmalertdefinitionFields[5].Descriptor()
	// fmalertdefinition.AlarmSoundValidator is a validator for the "alarm_sound" field. It is called by the builders before save.
	fmalertdefinition.AlarmSoundValidator = fmalertdefinitionDescAlarmSound.Validators[0].(func(string) error)
	// fmalertdefinitionDescUpdatedTime is the schema descriptor for updated_time field.
	fmalertdefinitionDescUpdatedTime := fmalertdefinitionFields[7].Descriptor()
	// fmalertdefinition.UpdateDefaultUpdatedTime holds the default value on update for the updated_time field.
	fmalertdefinition.UpdateDefaultUpdatedTime = fmalertdefinitionDescUpdatedTime.UpdateDefault.(func() time.Time)
	fmalertgroupFields := schema.FmAlertGroup{}.Fields()
	_ = fmalertgroupFields
	// fmalertgroupDescGroupName is the schema descriptor for group_name field.
	fmalertgroupDescGroupName := fmalertgroupFields[1].Descriptor()
	// fmalertgroup.GroupNameValidator is a validator for the "group_name" field. It is called by the builders before save.
	fmalertgroup.GroupNameValidator = func() func(string) error {
		validators := fmalertgroupDescGroupName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(group_name string) error {
			for _, fn := range fns {
				if err := fn(group_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmalertgroupDescGroupType is the schema descriptor for group_type field.
	fmalertgroupDescGroupType := fmalertgroupFields[3].Descriptor()
	// fmalertgroup.DefaultGroupType holds the default value on creation for the group_type field.
	fmalertgroup.DefaultGroupType = fmalertgroupDescGroupType.Default.(int8)
	// fmalertgroupDescEnabled is the schema descriptor for enabled field.
	fmalertgroupDescEnabled := fmalertgroupFields[4].Descriptor()
	// fmalertgroup.DefaultEnabled holds the default value on creation for the enabled field.
	fmalertgroup.DefaultEnabled = fmalertgroupDescEnabled.Default.(bool)
	// fmalertgroupDescCustomization is the schema descriptor for customization field.
	fmalertgroupDescCustomization := fmalertgroupFields[5].Descriptor()
	// fmalertgroup.CustomizationValidator is a validator for the "customization" field. It is called by the builders before save.
	fmalertgroup.CustomizationValidator = func() func(string) error {
		validators := fmalertgroupDescCustomization.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(customization string) error {
			for _, fn := range fns {
				if err := fn(customization); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmalertgroupDescDescription is the schema descriptor for description field.
	fmalertgroupDescDescription := fmalertgroupFields[6].Descriptor()
	// fmalertgroup.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	fmalertgroup.DescriptionValidator = fmalertgroupDescDescription.Validators[0].(func(string) error)
	// fmalertgroupDescCreator is the schema descriptor for creator field.
	fmalertgroupDescCreator := fmalertgroupFields[7].Descriptor()
	// fmalertgroup.CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	fmalertgroup.CreatorValidator = fmalertgroupDescCreator.Validators[0].(func(string) error)
	// fmalertgroupDescUpdatedTime is the schema descriptor for updated_time field.
	fmalertgroupDescUpdatedTime := fmalertgroupFields[10].Descriptor()
	// fmalertgroup.UpdateDefaultUpdatedTime holds the default value on update for the updated_time field.
	fmalertgroup.UpdateDefaultUpdatedTime = fmalertgroupDescUpdatedTime.UpdateDefault.(func() time.Time)
	fmdedicatedservicesFields := schema.FmDedicatedServices{}.Fields()
	_ = fmdedicatedservicesFields
	// fmdedicatedservicesDescContacts is the schema descriptor for contacts field.
	fmdedicatedservicesDescContacts := fmdedicatedservicesFields[2].Descriptor()
	// fmdedicatedservices.DefaultContacts holds the default value on creation for the contacts field.
	fmdedicatedservices.DefaultContacts = fmdedicatedservicesDescContacts.Default.(string)
	// fmdedicatedservices.ContactsValidator is a validator for the "contacts" field. It is called by the builders before save.
	fmdedicatedservices.ContactsValidator = func() func(string) error {
		validators := fmdedicatedservicesDescContacts.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(contacts string) error {
			for _, fn := range fns {
				if err := fn(contacts); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmdedicatedservicesDescSupplier is the schema descriptor for supplier field.
	fmdedicatedservicesDescSupplier := fmdedicatedservicesFields[3].Descriptor()
	// fmdedicatedservices.DefaultSupplier holds the default value on creation for the supplier field.
	fmdedicatedservices.DefaultSupplier = fmdedicatedservicesDescSupplier.Default.(string)
	// fmdedicatedservices.SupplierValidator is a validator for the "supplier" field. It is called by the builders before save.
	fmdedicatedservices.SupplierValidator = func() func(string) error {
		validators := fmdedicatedservicesDescSupplier.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(supplier string) error {
			for _, fn := range fns {
				if err := fn(supplier); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmdedicatedservicesDescPhonenum is the schema descriptor for phonenum field.
	fmdedicatedservicesDescPhonenum := fmdedicatedservicesFields[4].Descriptor()
	// fmdedicatedservices.DefaultPhonenum holds the default value on creation for the phonenum field.
	fmdedicatedservices.DefaultPhonenum = fmdedicatedservicesDescPhonenum.Default.(string)
	// fmdedicatedservices.PhonenumValidator is a validator for the "phonenum" field. It is called by the builders before save.
	fmdedicatedservices.PhonenumValidator = func() func(string) error {
		validators := fmdedicatedservicesDescPhonenum.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phonenum string) error {
			for _, fn := range fns {
				if err := fn(phonenum); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmdedicatedservicesDescEmail is the schema descriptor for email field.
	fmdedicatedservicesDescEmail := fmdedicatedservicesFields[5].Descriptor()
	// fmdedicatedservices.DefaultEmail holds the default value on creation for the email field.
	fmdedicatedservices.DefaultEmail = fmdedicatedservicesDescEmail.Default.(string)
	// fmdedicatedservices.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	fmdedicatedservices.EmailValidator = func() func(string) error {
		validators := fmdedicatedservicesDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmdedicatedservicesDescFax is the schema descriptor for fax field.
	fmdedicatedservicesDescFax := fmdedicatedservicesFields[6].Descriptor()
	// fmdedicatedservices.DefaultFax holds the default value on creation for the fax field.
	fmdedicatedservices.DefaultFax = fmdedicatedservicesDescFax.Default.(string)
	// fmdedicatedservices.FaxValidator is a validator for the "fax" field. It is called by the builders before save.
	fmdedicatedservices.FaxValidator = func() func(string) error {
		validators := fmdedicatedservicesDescFax.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(fax string) error {
			for _, fn := range fns {
				if err := fn(fax); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmdedicatedservicesDescDescription is the schema descriptor for description field.
	fmdedicatedservicesDescDescription := fmdedicatedservicesFields[7].Descriptor()
	// fmdedicatedservices.DefaultDescription holds the default value on creation for the description field.
	fmdedicatedservices.DefaultDescription = fmdedicatedservicesDescDescription.Default.(string)
	// fmdedicatedservices.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	fmdedicatedservices.DescriptionValidator = func() func(string) error {
		validators := fmdedicatedservicesDescDescription.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(description string) error {
			for _, fn := range fns {
				if err := fn(description); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmdedicatedservicesDescCreator is the schema descriptor for creator field.
	fmdedicatedservicesDescCreator := fmdedicatedservicesFields[8].Descriptor()
	// fmdedicatedservices.DefaultCreator holds the default value on creation for the creator field.
	fmdedicatedservices.DefaultCreator = fmdedicatedservicesDescCreator.Default.(string)
	// fmdedicatedservices.CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	fmdedicatedservices.CreatorValidator = func() func(string) error {
		validators := fmdedicatedservicesDescCreator.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(creator string) error {
			for _, fn := range fns {
				if err := fn(creator); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	fmdemandsFields := schema.FmDemands{}.Fields()
	_ = fmdemandsFields
	// fmdemandsDescSupplier is the schema descriptor for supplier field.
	fmdemandsDescSupplier := fmdemandsFields[1].Descriptor()
	// fmdemands.DefaultSupplier holds the default value on creation for the supplier field.
	fmdemands.DefaultSupplier = fmdemandsDescSupplier.Default.(string)
	// fmdemands.SupplierValidator is a validator for the "supplier" field. It is called by the builders before save.
	fmdemands.SupplierValidator = func() func(string) error {
		validators := fmdemandsDescSupplier.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(supplier string) error {
			for _, fn := range fns {
				if err := fn(supplier); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmdemandsDescUsername is the schema descriptor for username field.
	fmdemandsDescUsername := fmdemandsFields[2].Descriptor()
	// fmdemands.DefaultUsername holds the default value on creation for the username field.
	fmdemands.DefaultUsername = fmdemandsDescUsername.Default.(string)
	// fmdemands.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	fmdemands.UsernameValidator = func() func(string) error {
		validators := fmdemandsDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmdemandsDescPhonenum is the schema descriptor for phonenum field.
	fmdemandsDescPhonenum := fmdemandsFields[3].Descriptor()
	// fmdemands.DefaultPhonenum holds the default value on creation for the phonenum field.
	fmdemands.DefaultPhonenum = fmdemandsDescPhonenum.Default.(string)
	// fmdemands.PhonenumValidator is a validator for the "phonenum" field. It is called by the builders before save.
	fmdemands.PhonenumValidator = func() func(string) error {
		validators := fmdemandsDescPhonenum.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phonenum string) error {
			for _, fn := range fns {
				if err := fn(phonenum); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmdemandsDescEmail is the schema descriptor for email field.
	fmdemandsDescEmail := fmdemandsFields[4].Descriptor()
	// fmdemands.DefaultEmail holds the default value on creation for the email field.
	fmdemands.DefaultEmail = fmdemandsDescEmail.Default.(string)
	// fmdemands.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	fmdemands.EmailValidator = func() func(string) error {
		validators := fmdemandsDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmdemandsDescProvince is the schema descriptor for province field.
	fmdemandsDescProvince := fmdemandsFields[5].Descriptor()
	// fmdemands.DefaultProvince holds the default value on creation for the province field.
	fmdemands.DefaultProvince = fmdemandsDescProvince.Default.(string)
	// fmdemands.ProvinceValidator is a validator for the "province" field. It is called by the builders before save.
	fmdemands.ProvinceValidator = func() func(string) error {
		validators := fmdemandsDescProvince.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(province string) error {
			for _, fn := range fns {
				if err := fn(province); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmdemandsDescCity is the schema descriptor for city field.
	fmdemandsDescCity := fmdemandsFields[6].Descriptor()
	// fmdemands.DefaultCity holds the default value on creation for the city field.
	fmdemands.DefaultCity = fmdemandsDescCity.Default.(string)
	// fmdemands.CityValidator is a validator for the "city" field. It is called by the builders before save.
	fmdemands.CityValidator = func() func(string) error {
		validators := fmdemandsDescCity.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(city string) error {
			for _, fn := range fns {
				if err := fn(city); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmdemandsDescArea is the schema descriptor for area field.
	fmdemandsDescArea := fmdemandsFields[7].Descriptor()
	// fmdemands.DefaultArea holds the default value on creation for the area field.
	fmdemands.DefaultArea = fmdemandsDescArea.Default.(string)
	// fmdemands.AreaValidator is a validator for the "area" field. It is called by the builders before save.
	fmdemands.AreaValidator = func() func(string) error {
		validators := fmdemandsDescArea.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(area string) error {
			for _, fn := range fns {
				if err := fn(area); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmdemandsDescStreet is the schema descriptor for street field.
	fmdemandsDescStreet := fmdemandsFields[8].Descriptor()
	// fmdemands.DefaultStreet holds the default value on creation for the street field.
	fmdemands.DefaultStreet = fmdemandsDescStreet.Default.(string)
	// fmdemands.StreetValidator is a validator for the "street" field. It is called by the builders before save.
	fmdemands.StreetValidator = func() func(string) error {
		validators := fmdemandsDescStreet.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(street string) error {
			for _, fn := range fns {
				if err := fn(street); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmdemandsDescMessage is the schema descriptor for message field.
	fmdemandsDescMessage := fmdemandsFields[9].Descriptor()
	// fmdemands.DefaultMessage holds the default value on creation for the message field.
	fmdemands.DefaultMessage = fmdemandsDescMessage.Default.(string)
	// fmdemands.MessageValidator is a validator for the "message" field. It is called by the builders before save.
	fmdemands.MessageValidator = func() func(string) error {
		validators := fmdemandsDescMessage.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(message string) error {
			for _, fn := range fns {
				if err := fn(message); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmdemandsDescCreator is the schema descriptor for creator field.
	fmdemandsDescCreator := fmdemandsFields[10].Descriptor()
	// fmdemands.DefaultCreator holds the default value on creation for the creator field.
	fmdemands.DefaultCreator = fmdemandsDescCreator.Default.(string)
	// fmdemands.CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	fmdemands.CreatorValidator = func() func(string) error {
		validators := fmdemandsDescCreator.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(creator string) error {
			for _, fn := range fns {
				if err := fn(creator); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	fmuseraccountFields := schema.FmUserAccount{}.Fields()
	_ = fmuseraccountFields
	// fmuseraccountDescUsername is the schema descriptor for username field.
	fmuseraccountDescUsername := fmuseraccountFields[1].Descriptor()
	// fmuseraccount.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	fmuseraccount.UsernameValidator = func() func(string) error {
		validators := fmuseraccountDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmuseraccountDescLoginName is the schema descriptor for login_name field.
	fmuseraccountDescLoginName := fmuseraccountFields[2].Descriptor()
	// fmuseraccount.DefaultLoginName holds the default value on creation for the login_name field.
	fmuseraccount.DefaultLoginName = fmuseraccountDescLoginName.Default.(string)
	// fmuseraccount.LoginNameValidator is a validator for the "login_name" field. It is called by the builders before save.
	fmuseraccount.LoginNameValidator = func() func(string) error {
		validators := fmuseraccountDescLoginName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(login_name string) error {
			for _, fn := range fns {
				if err := fn(login_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmuseraccountDescPassword is the schema descriptor for password field.
	fmuseraccountDescPassword := fmuseraccountFields[3].Descriptor()
	// fmuseraccount.DefaultPassword holds the default value on creation for the password field.
	fmuseraccount.DefaultPassword = fmuseraccountDescPassword.Default.(string)
	// fmuseraccount.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	fmuseraccount.PasswordValidator = func() func(string) error {
		validators := fmuseraccountDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fmuseraccountDescEnabled is the schema descriptor for enabled field.
	fmuseraccountDescEnabled := fmuseraccountFields[17].Descriptor()
	// fmuseraccount.DefaultEnabled holds the default value on creation for the enabled field.
	fmuseraccount.DefaultEnabled = fmuseraccountDescEnabled.Default.(bool)
	// fmuseraccountDescUpdatedTime is the schema descriptor for updated_time field.
	fmuseraccountDescUpdatedTime := fmuseraccountFields[25].Descriptor()
	// fmuseraccount.UpdateDefaultUpdatedTime holds the default value on update for the updated_time field.
	fmuseraccount.UpdateDefaultUpdatedTime = fmuseraccountDescUpdatedTime.UpdateDefault.(func() time.Time)
	govareaFields := schema.GovArea{}.Fields()
	_ = govareaFields
	// govareaDescCode is the schema descriptor for code field.
	govareaDescCode := govareaFields[1].Descriptor()
	// govarea.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	govarea.CodeValidator = govareaDescCode.Validators[0].(func(string) error)
	// govareaDescName is the schema descriptor for name field.
	govareaDescName := govareaFields[2].Descriptor()
	// govarea.DefaultName holds the default value on creation for the name field.
	govarea.DefaultName = govareaDescName.Default.(string)
	// govarea.NameValidator is a validator for the "name" field. It is called by the builders before save.
	govarea.NameValidator = govareaDescName.Validators[0].(func(string) error)
	// govareaDescProvinceCode is the schema descriptor for province_code field.
	govareaDescProvinceCode := govareaFields[3].Descriptor()
	// govarea.DefaultProvinceCode holds the default value on creation for the province_code field.
	govarea.DefaultProvinceCode = govareaDescProvinceCode.Default.(string)
	// govarea.ProvinceCodeValidator is a validator for the "province_code" field. It is called by the builders before save.
	govarea.ProvinceCodeValidator = govareaDescProvinceCode.Validators[0].(func(string) error)
	// govareaDescCityCode is the schema descriptor for city_code field.
	govareaDescCityCode := govareaFields[4].Descriptor()
	// govarea.DefaultCityCode holds the default value on creation for the city_code field.
	govarea.DefaultCityCode = govareaDescCityCode.Default.(string)
	// govarea.CityCodeValidator is a validator for the "city_code" field. It is called by the builders before save.
	govarea.CityCodeValidator = govareaDescCityCode.Validators[0].(func(string) error)
	// govareaDescCreator is the schema descriptor for creator field.
	govareaDescCreator := govareaFields[5].Descriptor()
	// govarea.DefaultCreator holds the default value on creation for the creator field.
	govarea.DefaultCreator = govareaDescCreator.Default.(string)
	// govarea.CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	govarea.CreatorValidator = govareaDescCreator.Validators[0].(func(string) error)
	// govareaDescDeleteFlag is the schema descriptor for delete_flag field.
	govareaDescDeleteFlag := govareaFields[6].Descriptor()
	// govarea.DefaultDeleteFlag holds the default value on creation for the delete_flag field.
	govarea.DefaultDeleteFlag = govareaDescDeleteFlag.Default.(string)
	// govarea.DeleteFlagValidator is a validator for the "delete_flag" field. It is called by the builders before save.
	govarea.DeleteFlagValidator = govareaDescDeleteFlag.Validators[0].(func(string) error)
	govcityFields := schema.GovCity{}.Fields()
	_ = govcityFields
	// govcityDescCode is the schema descriptor for code field.
	govcityDescCode := govcityFields[1].Descriptor()
	// govcity.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	govcity.CodeValidator = govcityDescCode.Validators[0].(func(string) error)
	// govcityDescName is the schema descriptor for name field.
	govcityDescName := govcityFields[2].Descriptor()
	// govcity.DefaultName holds the default value on creation for the name field.
	govcity.DefaultName = govcityDescName.Default.(string)
	// govcity.NameValidator is a validator for the "name" field. It is called by the builders before save.
	govcity.NameValidator = govcityDescName.Validators[0].(func(string) error)
	// govcityDescProvinceCode is the schema descriptor for province_code field.
	govcityDescProvinceCode := govcityFields[3].Descriptor()
	// govcity.DefaultProvinceCode holds the default value on creation for the province_code field.
	govcity.DefaultProvinceCode = govcityDescProvinceCode.Default.(string)
	// govcity.ProvinceCodeValidator is a validator for the "province_code" field. It is called by the builders before save.
	govcity.ProvinceCodeValidator = govcityDescProvinceCode.Validators[0].(func(string) error)
	// govcityDescCreator is the schema descriptor for creator field.
	govcityDescCreator := govcityFields[4].Descriptor()
	// govcity.DefaultCreator holds the default value on creation for the creator field.
	govcity.DefaultCreator = govcityDescCreator.Default.(string)
	// govcity.CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	govcity.CreatorValidator = govcityDescCreator.Validators[0].(func(string) error)
	// govcityDescDeleteFlag is the schema descriptor for delete_flag field.
	govcityDescDeleteFlag := govcityFields[5].Descriptor()
	// govcity.DefaultDeleteFlag holds the default value on creation for the delete_flag field.
	govcity.DefaultDeleteFlag = govcityDescDeleteFlag.Default.(string)
	// govcity.DeleteFlagValidator is a validator for the "delete_flag" field. It is called by the builders before save.
	govcity.DeleteFlagValidator = govcityDescDeleteFlag.Validators[0].(func(string) error)
	govstreetFields := schema.GovStreet{}.Fields()
	_ = govstreetFields
	// govstreetDescCode is the schema descriptor for code field.
	govstreetDescCode := govstreetFields[1].Descriptor()
	// govstreet.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	govstreet.CodeValidator = govstreetDescCode.Validators[0].(func(string) error)
	// govstreetDescName is the schema descriptor for name field.
	govstreetDescName := govstreetFields[2].Descriptor()
	// govstreet.DefaultName holds the default value on creation for the name field.
	govstreet.DefaultName = govstreetDescName.Default.(string)
	// govstreet.NameValidator is a validator for the "name" field. It is called by the builders before save.
	govstreet.NameValidator = govstreetDescName.Validators[0].(func(string) error)
	// govstreetDescProvinceCode is the schema descriptor for province_code field.
	govstreetDescProvinceCode := govstreetFields[3].Descriptor()
	// govstreet.DefaultProvinceCode holds the default value on creation for the province_code field.
	govstreet.DefaultProvinceCode = govstreetDescProvinceCode.Default.(string)
	// govstreet.ProvinceCodeValidator is a validator for the "province_code" field. It is called by the builders before save.
	govstreet.ProvinceCodeValidator = govstreetDescProvinceCode.Validators[0].(func(string) error)
	// govstreetDescCityCode is the schema descriptor for city_code field.
	govstreetDescCityCode := govstreetFields[4].Descriptor()
	// govstreet.DefaultCityCode holds the default value on creation for the city_code field.
	govstreet.DefaultCityCode = govstreetDescCityCode.Default.(string)
	// govstreet.CityCodeValidator is a validator for the "city_code" field. It is called by the builders before save.
	govstreet.CityCodeValidator = govstreetDescCityCode.Validators[0].(func(string) error)
	// govstreetDescAreaCode is the schema descriptor for area_code field.
	govstreetDescAreaCode := govstreetFields[5].Descriptor()
	// govstreet.DefaultAreaCode holds the default value on creation for the area_code field.
	govstreet.DefaultAreaCode = govstreetDescAreaCode.Default.(string)
	// govstreet.AreaCodeValidator is a validator for the "area_code" field. It is called by the builders before save.
	govstreet.AreaCodeValidator = govstreetDescAreaCode.Validators[0].(func(string) error)
	// govstreetDescCreator is the schema descriptor for creator field.
	govstreetDescCreator := govstreetFields[6].Descriptor()
	// govstreet.DefaultCreator holds the default value on creation for the creator field.
	govstreet.DefaultCreator = govstreetDescCreator.Default.(string)
	// govstreet.CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	govstreet.CreatorValidator = govstreetDescCreator.Validators[0].(func(string) error)
	// govstreetDescDeleteFlag is the schema descriptor for delete_flag field.
	govstreetDescDeleteFlag := govstreetFields[7].Descriptor()
	// govstreet.DefaultDeleteFlag holds the default value on creation for the delete_flag field.
	govstreet.DefaultDeleteFlag = govstreetDescDeleteFlag.Default.(string)
	// govstreet.DeleteFlagValidator is a validator for the "delete_flag" field. It is called by the builders before save.
	govstreet.DeleteFlagValidator = govstreetDescDeleteFlag.Validators[0].(func(string) error)
	profiletypeFields := schema.ProfileType{}.Fields()
	_ = profiletypeFields
	// profiletypeDescTypeName is the schema descriptor for type_name field.
	profiletypeDescTypeName := profiletypeFields[1].Descriptor()
	// profiletype.TypeNameValidator is a validator for the "type_name" field. It is called by the builders before save.
	profiletype.TypeNameValidator = func() func(string) error {
		validators := profiletypeDescTypeName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(type_name string) error {
			for _, fn := range fns {
				if err := fn(type_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// profiletypeDescDescription is the schema descriptor for description field.
	profiletypeDescDescription := profiletypeFields[5].Descriptor()
	// profiletype.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	profiletype.DescriptionValidator = profiletypeDescDescription.Validators[0].(func(string) error)
	// profiletypeDescTypeCode is the schema descriptor for type_code field.
	profiletypeDescTypeCode := profiletypeFields[8].Descriptor()
	// profiletype.DefaultTypeCode holds the default value on creation for the type_code field.
	profiletype.DefaultTypeCode = profiletypeDescTypeCode.Default.(string)
	// profiletype.TypeCodeValidator is a validator for the "type_code" field. It is called by the builders before save.
	profiletype.TypeCodeValidator = profiletypeDescTypeCode.Validators[0].(func(string) error)
	// profiletypeDescFaceValidityHours is the schema descriptor for face_validity_hours field.
	profiletypeDescFaceValidityHours := profiletypeFields[9].Descriptor()
	// profiletype.DefaultFaceValidityHours holds the default value on creation for the face_validity_hours field.
	profiletype.DefaultFaceValidityHours = profiletypeDescFaceValidityHours.Default.(int)
	// profiletypeDescUpdatedTime is the schema descriptor for updated_time field.
	profiletypeDescUpdatedTime := profiletypeFields[11].Descriptor()
	// profiletype.UpdateDefaultUpdatedTime holds the default value on update for the updated_time field.
	profiletype.UpdateDefaultUpdatedTime = profiletypeDescUpdatedTime.UpdateDefault.(func() time.Time)
	profilesFields := schema.Profiles{}.Fields()
	_ = profilesFields
	// profilesDescName is the schema descriptor for name field.
	profilesDescName := profilesFields[2].Descriptor()
	// profiles.NameValidator is a validator for the "name" field. It is called by the builders before save.
	profiles.NameValidator = profilesDescName.Validators[0].(func(string) error)
	// profilesDescIDCardNumber is the schema descriptor for id_card_number field.
	profilesDescIDCardNumber := profilesFields[4].Descriptor()
	// profiles.IDCardNumberValidator is a validator for the "id_card_number" field. It is called by the builders before save.
	profiles.IDCardNumberValidator = profilesDescIDCardNumber.Validators[0].(func(string) error)
	// profilesDescPhoneNumber is the schema descriptor for phone_number field.
	profilesDescPhoneNumber := profilesFields[5].Descriptor()
	// profiles.DefaultPhoneNumber holds the default value on creation for the phone_number field.
	profiles.DefaultPhoneNumber = profilesDescPhoneNumber.Default.(string)
	// profilesDescEnabled is the schema descriptor for enabled field.
	profilesDescEnabled := profilesFields[6].Descriptor()
	// profiles.DefaultEnabled holds the default value on creation for the enabled field.
	profiles.DefaultEnabled = profilesDescEnabled.Default.(bool)
	// profilesDescUpdatedTime is the schema descriptor for updated_time field.
	profilesDescUpdatedTime := profilesFields[10].Descriptor()
	// profiles.UpdateDefaultUpdatedTime holds the default value on update for the updated_time field.
	profiles.UpdateDefaultUpdatedTime = profilesDescUpdatedTime.UpdateDefault.(func() time.Time)
	provinceFields := schema.Province{}.Fields()
	_ = provinceFields
	// provinceDescCode is the schema descriptor for code field.
	provinceDescCode := provinceFields[1].Descriptor()
	// province.DefaultCode holds the default value on creation for the code field.
	province.DefaultCode = provinceDescCode.Default.(string)
	// province.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	province.CodeValidator = func() func(string) error {
		validators := provinceDescCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(code string) error {
			for _, fn := range fns {
				if err := fn(code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// provinceDescName is the schema descriptor for name field.
	provinceDescName := provinceFields[2].Descriptor()
	// province.DefaultName holds the default value on creation for the name field.
	province.DefaultName = provinceDescName.Default.(string)
	// province.NameValidator is a validator for the "name" field. It is called by the builders before save.
	province.NameValidator = func() func(string) error {
		validators := provinceDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// provinceDescCreator is the schema descriptor for creator field.
	provinceDescCreator := provinceFields[3].Descriptor()
	// province.DefaultCreator holds the default value on creation for the creator field.
	province.DefaultCreator = provinceDescCreator.Default.(string)
	// province.CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	province.CreatorValidator = func() func(string) error {
		validators := provinceDescCreator.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(creator string) error {
			for _, fn := range fns {
				if err := fn(creator); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// provinceDescDeleteFlag is the schema descriptor for delete_flag field.
	provinceDescDeleteFlag := provinceFields[4].Descriptor()
	// province.DefaultDeleteFlag holds the default value on creation for the delete_flag field.
	province.DefaultDeleteFlag = provinceDescDeleteFlag.Default.(string)
	// province.DeleteFlagValidator is a validator for the "delete_flag" field. It is called by the builders before save.
	province.DeleteFlagValidator = func() func(string) error {
		validators := provinceDescDeleteFlag.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(delete_flag string) error {
			for _, fn := range fns {
				if err := fn(delete_flag); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	sqllogFields := schema.SqlLog{}.Fields()
	_ = sqllogFields
	// sqllogDescTableName is the schema descriptor for table_name field.
	sqllogDescTableName := sqllogFields[0].Descriptor()
	// sqllog.TableNameValidator is a validator for the "table_name" field. It is called by the builders before save.
	sqllog.TableNameValidator = sqllogDescTableName.Validators[0].(func(string) error)
	// sqllogDescQuery is the schema descriptor for query field.
	sqllogDescQuery := sqllogFields[1].Descriptor()
	// sqllog.QueryValidator is a validator for the "query" field. It is called by the builders before save.
	sqllog.QueryValidator = sqllogDescQuery.Validators[0].(func(string) error)
	// sqllogDescArgs is the schema descriptor for args field.
	sqllogDescArgs := sqllogFields[2].Descriptor()
	// sqllog.ArgsValidator is a validator for the "args" field. It is called by the builders before save.
	sqllog.ArgsValidator = sqllogDescArgs.Validators[0].(func(string) error)
	// sqllogDescDbName is the schema descriptor for db_name field.
	sqllogDescDbName := sqllogFields[4].Descriptor()
	// sqllog.DefaultDbName holds the default value on creation for the db_name field.
	sqllog.DefaultDbName = sqllogDescDbName.Default.(string)
	// sqllog.DbNameValidator is a validator for the "db_name" field. It is called by the builders before save.
	sqllog.DbNameValidator = sqllogDescDbName.Validators[0].(func(string) error)
	// sqllogDescCreator is the schema descriptor for creator field.
	sqllogDescCreator := sqllogFields[8].Descriptor()
	// sqllog.DefaultCreator holds the default value on creation for the creator field.
	sqllog.DefaultCreator = sqllogDescCreator.Default.(string)
	// sqllog.CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	sqllog.CreatorValidator = sqllogDescCreator.Validators[0].(func(string) error)
	temporaryfaceFields := schema.TemporaryFace{}.Fields()
	_ = temporaryfaceFields
	// temporaryfaceDescFaceEmbedding is the schema descriptor for face_embedding field.
	temporaryfaceDescFaceEmbedding := temporaryfaceFields[3].Descriptor()
	// temporaryface.FaceEmbeddingValidator is a validator for the "face_embedding" field. It is called by the builders before save.
	temporaryface.FaceEmbeddingValidator = temporaryfaceDescFaceEmbedding.Validators[0].(func([]byte) error)
	// temporaryfaceDescImgURL is the schema descriptor for img_url field.
	temporaryfaceDescImgURL := temporaryfaceFields[4].Descriptor()
	// temporaryface.ImgURLValidator is a validator for the "img_url" field. It is called by the builders before save.
	temporaryface.ImgURLValidator = temporaryfaceDescImgURL.Validators[0].(func(string) error)
	// temporaryfaceDescUpdatedLocation is the schema descriptor for updated_location field.
	temporaryfaceDescUpdatedLocation := temporaryfaceFields[5].Descriptor()
	// temporaryface.UpdatedLocationValidator is a validator for the "updated_location" field. It is called by the builders before save.
	temporaryface.UpdatedLocationValidator = temporaryfaceDescUpdatedLocation.Validators[0].(func(string) error)
	tenantsFields := schema.Tenants{}.Fields()
	_ = tenantsFields
	// tenantsDescSupplier is the schema descriptor for supplier field.
	tenantsDescSupplier := tenantsFields[1].Descriptor()
	// tenants.SupplierValidator is a validator for the "supplier" field. It is called by the builders before save.
	tenants.SupplierValidator = tenantsDescSupplier.Validators[0].(func(string) error)
	// tenantsDescTenantID is the schema descriptor for tenant_id field.
	tenantsDescTenantID := tenantsFields[2].Descriptor()
	// tenants.DefaultTenantID holds the default value on creation for the tenant_id field.
	tenants.DefaultTenantID = tenantsDescTenantID.Default.(func() uuid.UUID)
	// tenantsDescContacts is the schema descriptor for contacts field.
	tenantsDescContacts := tenantsFields[3].Descriptor()
	// tenants.DefaultContacts holds the default value on creation for the contacts field.
	tenants.DefaultContacts = tenantsDescContacts.Default.(string)
	// tenants.ContactsValidator is a validator for the "contacts" field. It is called by the builders before save.
	tenants.ContactsValidator = tenantsDescContacts.Validators[0].(func(string) error)
	// tenantsDescEmail is the schema descriptor for email field.
	tenantsDescEmail := tenantsFields[4].Descriptor()
	// tenants.DefaultEmail holds the default value on creation for the email field.
	tenants.DefaultEmail = tenantsDescEmail.Default.(string)
	// tenants.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	tenants.EmailValidator = tenantsDescEmail.Validators[0].(func(string) error)
	// tenantsDescDescription is the schema descriptor for description field.
	tenantsDescDescription := tenantsFields[5].Descriptor()
	// tenants.DefaultDescription holds the default value on creation for the description field.
	tenants.DefaultDescription = tenantsDescDescription.Default.(string)
	// tenants.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	tenants.DescriptionValidator = tenantsDescDescription.Validators[0].(func(string) error)
	// tenantsDescType is the schema descriptor for type field.
	tenantsDescType := tenantsFields[6].Descriptor()
	// tenants.DefaultType holds the default value on creation for the type field.
	tenants.DefaultType = tenantsDescType.Default.(string)
	// tenants.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	tenants.TypeValidator = tenantsDescType.Validators[0].(func(string) error)
	// tenantsDescProvince is the schema descriptor for province field.
	tenantsDescProvince := tenantsFields[7].Descriptor()
	// tenants.DefaultProvince holds the default value on creation for the province field.
	tenants.DefaultProvince = tenantsDescProvince.Default.(string)
	// tenants.ProvinceValidator is a validator for the "province" field. It is called by the builders before save.
	tenants.ProvinceValidator = tenantsDescProvince.Validators[0].(func(string) error)
	// tenantsDescCity is the schema descriptor for city field.
	tenantsDescCity := tenantsFields[8].Descriptor()
	// tenants.DefaultCity holds the default value on creation for the city field.
	tenants.DefaultCity = tenantsDescCity.Default.(string)
	// tenants.CityValidator is a validator for the "city" field. It is called by the builders before save.
	tenants.CityValidator = tenantsDescCity.Validators[0].(func(string) error)
	// tenantsDescArea is the schema descriptor for area field.
	tenantsDescArea := tenantsFields[9].Descriptor()
	// tenants.DefaultArea holds the default value on creation for the area field.
	tenants.DefaultArea = tenantsDescArea.Default.(string)
	// tenants.AreaValidator is a validator for the "area" field. It is called by the builders before save.
	tenants.AreaValidator = tenantsDescArea.Validators[0].(func(string) error)
	// tenantsDescStreet is the schema descriptor for street field.
	tenantsDescStreet := tenantsFields[10].Descriptor()
	// tenants.DefaultStreet holds the default value on creation for the street field.
	tenants.DefaultStreet = tenantsDescStreet.Default.(string)
	// tenants.StreetValidator is a validator for the "street" field. It is called by the builders before save.
	tenants.StreetValidator = tenantsDescStreet.Validators[0].(func(string) error)
	// tenantsDescAddress is the schema descriptor for address field.
	tenantsDescAddress := tenantsFields[11].Descriptor()
	// tenants.DefaultAddress holds the default value on creation for the address field.
	tenants.DefaultAddress = tenantsDescAddress.Default.(string)
	// tenants.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	tenants.AddressValidator = tenantsDescAddress.Validators[0].(func(string) error)
	// tenantsDescAddrCode is the schema descriptor for addr_code field.
	tenantsDescAddrCode := tenantsFields[12].Descriptor()
	// tenants.DefaultAddrCode holds the default value on creation for the addr_code field.
	tenants.DefaultAddrCode = tenantsDescAddrCode.Default.(string)
	// tenants.AddrCodeValidator is a validator for the "addr_code" field. It is called by the builders before save.
	tenants.AddrCodeValidator = tenantsDescAddrCode.Validators[0].(func(string) error)
	// tenantsDescFax is the schema descriptor for fax field.
	tenantsDescFax := tenantsFields[13].Descriptor()
	// tenants.DefaultFax holds the default value on creation for the fax field.
	tenants.DefaultFax = tenantsDescFax.Default.(string)
	// tenants.FaxValidator is a validator for the "fax" field. It is called by the builders before save.
	tenants.FaxValidator = tenantsDescFax.Validators[0].(func(string) error)
	// tenantsDescPhoneNum is the schema descriptor for phone_num field.
	tenantsDescPhoneNum := tenantsFields[14].Descriptor()
	// tenants.DefaultPhoneNum holds the default value on creation for the phone_num field.
	tenants.DefaultPhoneNum = tenantsDescPhoneNum.Default.(string)
	// tenants.PhoneNumValidator is a validator for the "phone_num" field. It is called by the builders before save.
	tenants.PhoneNumValidator = tenantsDescPhoneNum.Validators[0].(func(string) error)
	// tenantsDescTelephone is the schema descriptor for telephone field.
	tenantsDescTelephone := tenantsFields[15].Descriptor()
	// tenants.DefaultTelephone holds the default value on creation for the telephone field.
	tenants.DefaultTelephone = tenantsDescTelephone.Default.(string)
	// tenants.TelephoneValidator is a validator for the "telephone" field. It is called by the builders before save.
	tenants.TelephoneValidator = tenantsDescTelephone.Validators[0].(func(string) error)
	// tenantsDescTaxNum is the schema descriptor for tax_num field.
	tenantsDescTaxNum := tenantsFields[16].Descriptor()
	// tenants.DefaultTaxNum holds the default value on creation for the tax_num field.
	tenants.DefaultTaxNum = tenantsDescTaxNum.Default.(string)
	// tenants.TaxNumValidator is a validator for the "tax_num" field. It is called by the builders before save.
	tenants.TaxNumValidator = tenantsDescTaxNum.Validators[0].(func(string) error)
	// tenantsDescBankName is the schema descriptor for bank_name field.
	tenantsDescBankName := tenantsFields[17].Descriptor()
	// tenants.DefaultBankName holds the default value on creation for the bank_name field.
	tenants.DefaultBankName = tenantsDescBankName.Default.(string)
	// tenants.BankNameValidator is a validator for the "bank_name" field. It is called by the builders before save.
	tenants.BankNameValidator = tenantsDescBankName.Validators[0].(func(string) error)
	// tenantsDescAccountNumber is the schema descriptor for account_number field.
	tenantsDescAccountNumber := tenantsFields[18].Descriptor()
	// tenants.DefaultAccountNumber holds the default value on creation for the account_number field.
	tenants.DefaultAccountNumber = tenantsDescAccountNumber.Default.(string)
	// tenants.AccountNumberValidator is a validator for the "account_number" field. It is called by the builders before save.
	tenants.AccountNumberValidator = tenantsDescAccountNumber.Validators[0].(func(string) error)
	// tenantsDescSort is the schema descriptor for sort field.
	tenantsDescSort := tenantsFields[19].Descriptor()
	// tenants.DefaultSort holds the default value on creation for the sort field.
	tenants.DefaultSort = tenantsDescSort.Default.(string)
	// tenants.SortValidator is a validator for the "sort" field. It is called by the builders before save.
	tenants.SortValidator = tenantsDescSort.Validators[0].(func(string) error)
	// tenantsDescEnabled is the schema descriptor for enabled field.
	tenantsDescEnabled := tenantsFields[20].Descriptor()
	// tenants.DefaultEnabled holds the default value on creation for the enabled field.
	tenants.DefaultEnabled = tenantsDescEnabled.Default.(bool)
	// tenantsDescDeleteFlag is the schema descriptor for delete_flag field.
	tenantsDescDeleteFlag := tenantsFields[21].Descriptor()
	// tenants.DefaultDeleteFlag holds the default value on creation for the delete_flag field.
	tenants.DefaultDeleteFlag = tenantsDescDeleteFlag.Default.(string)
	// tenantsDescIsystem is the schema descriptor for isystem field.
	tenantsDescIsystem := tenantsFields[22].Descriptor()
	// tenants.DefaultIsystem holds the default value on creation for the isystem field.
	tenants.DefaultIsystem = tenantsDescIsystem.Default.(bool)
	// tenantsDescTaxRate is the schema descriptor for tax_rate field.
	tenantsDescTaxRate := tenantsFields[23].Descriptor()
	// tenants.DefaultTaxRate holds the default value on creation for the tax_rate field.
	tenants.DefaultTaxRate = tenantsDescTaxRate.Default.(schema.Decimal)
	// tenantsDescAdvanceIn is the schema descriptor for advance_in field.
	tenantsDescAdvanceIn := tenantsFields[24].Descriptor()
	// tenants.DefaultAdvanceIn holds the default value on creation for the advance_in field.
	tenants.DefaultAdvanceIn = tenantsDescAdvanceIn.Default.(schema.Decimal)
	// tenantsDescBeginNeedGet is the schema descriptor for begin_need_get field.
	tenantsDescBeginNeedGet := tenantsFields[25].Descriptor()
	// tenants.DefaultBeginNeedGet holds the default value on creation for the begin_need_get field.
	tenants.DefaultBeginNeedGet = tenantsDescBeginNeedGet.Default.(schema.Decimal)
	// tenantsDescBeginNeedPay is the schema descriptor for begin_need_pay field.
	tenantsDescBeginNeedPay := tenantsFields[26].Descriptor()
	// tenants.DefaultBeginNeedPay holds the default value on creation for the begin_need_pay field.
	tenants.DefaultBeginNeedPay = tenantsDescBeginNeedPay.Default.(schema.Decimal)
	// tenantsDescAllNeedGet is the schema descriptor for all_need_get field.
	tenantsDescAllNeedGet := tenantsFields[27].Descriptor()
	// tenants.DefaultAllNeedGet holds the default value on creation for the all_need_get field.
	tenants.DefaultAllNeedGet = tenantsDescAllNeedGet.Default.(schema.Decimal)
	// tenantsDescAllNeedPay is the schema descriptor for all_need_pay field.
	tenantsDescAllNeedPay := tenantsFields[28].Descriptor()
	// tenants.DefaultAllNeedPay holds the default value on creation for the all_need_pay field.
	tenants.DefaultAllNeedPay = tenantsDescAllNeedPay.Default.(schema.Decimal)
	// tenantsDescCreator is the schema descriptor for creator field.
	tenantsDescCreator := tenantsFields[29].Descriptor()
	// tenants.DefaultCreator holds the default value on creation for the creator field.
	tenants.DefaultCreator = tenantsDescCreator.Default.(string)
	// tenants.CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	tenants.CreatorValidator = tenantsDescCreator.Validators[0].(func(string) error)
	// tenantsDescUpdatedTime is the schema descriptor for updated_time field.
	tenantsDescUpdatedTime := tenantsFields[31].Descriptor()
	// tenants.UpdateDefaultUpdatedTime holds the default value on update for the updated_time field.
	tenants.UpdateDefaultUpdatedTime = tenantsDescUpdatedTime.UpdateDefault.(func() time.Time)
}
