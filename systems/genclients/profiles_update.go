// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/predicate"
	"fmcam/systems/genclients/profiles"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProfilesUpdate is the builder for updating Profiles entities.
type ProfilesUpdate struct {
	config
	hooks    []Hook
	mutation *ProfilesMutation
}

// Where appends a list predicates to the ProfilesUpdate builder.
func (pu *ProfilesUpdate) Where(ps ...predicate.Profiles) *ProfilesUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetTypeID sets the "type_id" field.
func (pu *ProfilesUpdate) SetTypeID(i int64) *ProfilesUpdate {
	pu.mutation.ResetTypeID()
	pu.mutation.SetTypeID(i)
	return pu
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (pu *ProfilesUpdate) SetNillableTypeID(i *int64) *ProfilesUpdate {
	if i != nil {
		pu.SetTypeID(*i)
	}
	return pu
}

// AddTypeID adds i to the "type_id" field.
func (pu *ProfilesUpdate) AddTypeID(i int64) *ProfilesUpdate {
	pu.mutation.AddTypeID(i)
	return pu
}

// ClearTypeID clears the value of the "type_id" field.
func (pu *ProfilesUpdate) ClearTypeID() *ProfilesUpdate {
	pu.mutation.ClearTypeID()
	return pu
}

// SetName sets the "name" field.
func (pu *ProfilesUpdate) SetName(s string) *ProfilesUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProfilesUpdate) SetNillableName(s *string) *ProfilesUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *ProfilesUpdate) ClearName() *ProfilesUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetTenantID sets the "tenant_id" field.
func (pu *ProfilesUpdate) SetTenantID(u uuid.UUID) *ProfilesUpdate {
	pu.mutation.SetTenantID(u)
	return pu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pu *ProfilesUpdate) SetNillableTenantID(u *uuid.UUID) *ProfilesUpdate {
	if u != nil {
		pu.SetTenantID(*u)
	}
	return pu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (pu *ProfilesUpdate) ClearTenantID() *ProfilesUpdate {
	pu.mutation.ClearTenantID()
	return pu
}

// SetIDCardNumber sets the "id_card_number" field.
func (pu *ProfilesUpdate) SetIDCardNumber(s string) *ProfilesUpdate {
	pu.mutation.SetIDCardNumber(s)
	return pu
}

// SetNillableIDCardNumber sets the "id_card_number" field if the given value is not nil.
func (pu *ProfilesUpdate) SetNillableIDCardNumber(s *string) *ProfilesUpdate {
	if s != nil {
		pu.SetIDCardNumber(*s)
	}
	return pu
}

// ClearIDCardNumber clears the value of the "id_card_number" field.
func (pu *ProfilesUpdate) ClearIDCardNumber() *ProfilesUpdate {
	pu.mutation.ClearIDCardNumber()
	return pu
}

// SetPhoneNumber sets the "phone_number" field.
func (pu *ProfilesUpdate) SetPhoneNumber(s string) *ProfilesUpdate {
	pu.mutation.SetPhoneNumber(s)
	return pu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (pu *ProfilesUpdate) SetNillablePhoneNumber(s *string) *ProfilesUpdate {
	if s != nil {
		pu.SetPhoneNumber(*s)
	}
	return pu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (pu *ProfilesUpdate) ClearPhoneNumber() *ProfilesUpdate {
	pu.mutation.ClearPhoneNumber()
	return pu
}

// SetEnabled sets the "enabled" field.
func (pu *ProfilesUpdate) SetEnabled(b bool) *ProfilesUpdate {
	pu.mutation.SetEnabled(b)
	return pu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (pu *ProfilesUpdate) SetNillableEnabled(b *bool) *ProfilesUpdate {
	if b != nil {
		pu.SetEnabled(*b)
	}
	return pu
}

// ClearEnabled clears the value of the "enabled" field.
func (pu *ProfilesUpdate) ClearEnabled() *ProfilesUpdate {
	pu.mutation.ClearEnabled()
	return pu
}

// SetRoomID sets the "room_id" field.
func (pu *ProfilesUpdate) SetRoomID(s string) *ProfilesUpdate {
	pu.mutation.SetRoomID(s)
	return pu
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (pu *ProfilesUpdate) SetNillableRoomID(s *string) *ProfilesUpdate {
	if s != nil {
		pu.SetRoomID(*s)
	}
	return pu
}

// ClearRoomID clears the value of the "room_id" field.
func (pu *ProfilesUpdate) ClearRoomID() *ProfilesUpdate {
	pu.mutation.ClearRoomID()
	return pu
}

// SetTmpURL sets the "tmp_url" field.
func (pu *ProfilesUpdate) SetTmpURL(s string) *ProfilesUpdate {
	pu.mutation.SetTmpURL(s)
	return pu
}

// SetNillableTmpURL sets the "tmp_url" field if the given value is not nil.
func (pu *ProfilesUpdate) SetNillableTmpURL(s *string) *ProfilesUpdate {
	if s != nil {
		pu.SetTmpURL(*s)
	}
	return pu
}

// ClearTmpURL clears the value of the "tmp_url" field.
func (pu *ProfilesUpdate) ClearTmpURL() *ProfilesUpdate {
	pu.mutation.ClearTmpURL()
	return pu
}

// SetCreatedTime sets the "created_time" field.
func (pu *ProfilesUpdate) SetCreatedTime(t time.Time) *ProfilesUpdate {
	pu.mutation.SetCreatedTime(t)
	return pu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (pu *ProfilesUpdate) SetNillableCreatedTime(t *time.Time) *ProfilesUpdate {
	if t != nil {
		pu.SetCreatedTime(*t)
	}
	return pu
}

// ClearCreatedTime clears the value of the "created_time" field.
func (pu *ProfilesUpdate) ClearCreatedTime() *ProfilesUpdate {
	pu.mutation.ClearCreatedTime()
	return pu
}

// SetUpdatedTime sets the "updated_time" field.
func (pu *ProfilesUpdate) SetUpdatedTime(t time.Time) *ProfilesUpdate {
	pu.mutation.SetUpdatedTime(t)
	return pu
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (pu *ProfilesUpdate) ClearUpdatedTime() *ProfilesUpdate {
	pu.mutation.ClearUpdatedTime()
	return pu
}

// Mutation returns the ProfilesMutation object of the builder.
func (pu *ProfilesUpdate) Mutation() *ProfilesMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProfilesUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProfilesUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProfilesUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProfilesUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProfilesUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedTime(); !ok && !pu.mutation.UpdatedTimeCleared() {
		v := profiles.UpdateDefaultUpdatedTime()
		pu.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProfilesUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := profiles.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "Profiles.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.IDCardNumber(); ok {
		if err := profiles.IDCardNumberValidator(v); err != nil {
			return &ValidationError{Name: "id_card_number", err: fmt.Errorf(`genclients: validator failed for field "Profiles.id_card_number": %w`, err)}
		}
	}
	return nil
}

func (pu *ProfilesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(profiles.Table, profiles.Columns, sqlgraph.NewFieldSpec(profiles.FieldID, field.TypeInt64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.TypeID(); ok {
		_spec.SetField(profiles.FieldTypeID, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedTypeID(); ok {
		_spec.AddField(profiles.FieldTypeID, field.TypeInt64, value)
	}
	if pu.mutation.TypeIDCleared() {
		_spec.ClearField(profiles.FieldTypeID, field.TypeInt64)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(profiles.FieldName, field.TypeString, value)
	}
	if pu.mutation.NameCleared() {
		_spec.ClearField(profiles.FieldName, field.TypeString)
	}
	if value, ok := pu.mutation.TenantID(); ok {
		_spec.SetField(profiles.FieldTenantID, field.TypeUUID, value)
	}
	if pu.mutation.TenantIDCleared() {
		_spec.ClearField(profiles.FieldTenantID, field.TypeUUID)
	}
	if value, ok := pu.mutation.IDCardNumber(); ok {
		_spec.SetField(profiles.FieldIDCardNumber, field.TypeString, value)
	}
	if pu.mutation.IDCardNumberCleared() {
		_spec.ClearField(profiles.FieldIDCardNumber, field.TypeString)
	}
	if value, ok := pu.mutation.PhoneNumber(); ok {
		_spec.SetField(profiles.FieldPhoneNumber, field.TypeString, value)
	}
	if pu.mutation.PhoneNumberCleared() {
		_spec.ClearField(profiles.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := pu.mutation.Enabled(); ok {
		_spec.SetField(profiles.FieldEnabled, field.TypeBool, value)
	}
	if pu.mutation.EnabledCleared() {
		_spec.ClearField(profiles.FieldEnabled, field.TypeBool)
	}
	if value, ok := pu.mutation.RoomID(); ok {
		_spec.SetField(profiles.FieldRoomID, field.TypeString, value)
	}
	if pu.mutation.RoomIDCleared() {
		_spec.ClearField(profiles.FieldRoomID, field.TypeString)
	}
	if value, ok := pu.mutation.TmpURL(); ok {
		_spec.SetField(profiles.FieldTmpURL, field.TypeString, value)
	}
	if pu.mutation.TmpURLCleared() {
		_spec.ClearField(profiles.FieldTmpURL, field.TypeString)
	}
	if value, ok := pu.mutation.CreatedTime(); ok {
		_spec.SetField(profiles.FieldCreatedTime, field.TypeTime, value)
	}
	if pu.mutation.CreatedTimeCleared() {
		_spec.ClearField(profiles.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := pu.mutation.UpdatedTime(); ok {
		_spec.SetField(profiles.FieldUpdatedTime, field.TypeTime, value)
	}
	if pu.mutation.UpdatedTimeCleared() {
		_spec.ClearField(profiles.FieldUpdatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profiles.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProfilesUpdateOne is the builder for updating a single Profiles entity.
type ProfilesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfilesMutation
}

// SetTypeID sets the "type_id" field.
func (puo *ProfilesUpdateOne) SetTypeID(i int64) *ProfilesUpdateOne {
	puo.mutation.ResetTypeID()
	puo.mutation.SetTypeID(i)
	return puo
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (puo *ProfilesUpdateOne) SetNillableTypeID(i *int64) *ProfilesUpdateOne {
	if i != nil {
		puo.SetTypeID(*i)
	}
	return puo
}

// AddTypeID adds i to the "type_id" field.
func (puo *ProfilesUpdateOne) AddTypeID(i int64) *ProfilesUpdateOne {
	puo.mutation.AddTypeID(i)
	return puo
}

// ClearTypeID clears the value of the "type_id" field.
func (puo *ProfilesUpdateOne) ClearTypeID() *ProfilesUpdateOne {
	puo.mutation.ClearTypeID()
	return puo
}

// SetName sets the "name" field.
func (puo *ProfilesUpdateOne) SetName(s string) *ProfilesUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProfilesUpdateOne) SetNillableName(s *string) *ProfilesUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *ProfilesUpdateOne) ClearName() *ProfilesUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetTenantID sets the "tenant_id" field.
func (puo *ProfilesUpdateOne) SetTenantID(u uuid.UUID) *ProfilesUpdateOne {
	puo.mutation.SetTenantID(u)
	return puo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (puo *ProfilesUpdateOne) SetNillableTenantID(u *uuid.UUID) *ProfilesUpdateOne {
	if u != nil {
		puo.SetTenantID(*u)
	}
	return puo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (puo *ProfilesUpdateOne) ClearTenantID() *ProfilesUpdateOne {
	puo.mutation.ClearTenantID()
	return puo
}

// SetIDCardNumber sets the "id_card_number" field.
func (puo *ProfilesUpdateOne) SetIDCardNumber(s string) *ProfilesUpdateOne {
	puo.mutation.SetIDCardNumber(s)
	return puo
}

// SetNillableIDCardNumber sets the "id_card_number" field if the given value is not nil.
func (puo *ProfilesUpdateOne) SetNillableIDCardNumber(s *string) *ProfilesUpdateOne {
	if s != nil {
		puo.SetIDCardNumber(*s)
	}
	return puo
}

// ClearIDCardNumber clears the value of the "id_card_number" field.
func (puo *ProfilesUpdateOne) ClearIDCardNumber() *ProfilesUpdateOne {
	puo.mutation.ClearIDCardNumber()
	return puo
}

// SetPhoneNumber sets the "phone_number" field.
func (puo *ProfilesUpdateOne) SetPhoneNumber(s string) *ProfilesUpdateOne {
	puo.mutation.SetPhoneNumber(s)
	return puo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (puo *ProfilesUpdateOne) SetNillablePhoneNumber(s *string) *ProfilesUpdateOne {
	if s != nil {
		puo.SetPhoneNumber(*s)
	}
	return puo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (puo *ProfilesUpdateOne) ClearPhoneNumber() *ProfilesUpdateOne {
	puo.mutation.ClearPhoneNumber()
	return puo
}

// SetEnabled sets the "enabled" field.
func (puo *ProfilesUpdateOne) SetEnabled(b bool) *ProfilesUpdateOne {
	puo.mutation.SetEnabled(b)
	return puo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (puo *ProfilesUpdateOne) SetNillableEnabled(b *bool) *ProfilesUpdateOne {
	if b != nil {
		puo.SetEnabled(*b)
	}
	return puo
}

// ClearEnabled clears the value of the "enabled" field.
func (puo *ProfilesUpdateOne) ClearEnabled() *ProfilesUpdateOne {
	puo.mutation.ClearEnabled()
	return puo
}

// SetRoomID sets the "room_id" field.
func (puo *ProfilesUpdateOne) SetRoomID(s string) *ProfilesUpdateOne {
	puo.mutation.SetRoomID(s)
	return puo
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (puo *ProfilesUpdateOne) SetNillableRoomID(s *string) *ProfilesUpdateOne {
	if s != nil {
		puo.SetRoomID(*s)
	}
	return puo
}

// ClearRoomID clears the value of the "room_id" field.
func (puo *ProfilesUpdateOne) ClearRoomID() *ProfilesUpdateOne {
	puo.mutation.ClearRoomID()
	return puo
}

// SetTmpURL sets the "tmp_url" field.
func (puo *ProfilesUpdateOne) SetTmpURL(s string) *ProfilesUpdateOne {
	puo.mutation.SetTmpURL(s)
	return puo
}

// SetNillableTmpURL sets the "tmp_url" field if the given value is not nil.
func (puo *ProfilesUpdateOne) SetNillableTmpURL(s *string) *ProfilesUpdateOne {
	if s != nil {
		puo.SetTmpURL(*s)
	}
	return puo
}

// ClearTmpURL clears the value of the "tmp_url" field.
func (puo *ProfilesUpdateOne) ClearTmpURL() *ProfilesUpdateOne {
	puo.mutation.ClearTmpURL()
	return puo
}

// SetCreatedTime sets the "created_time" field.
func (puo *ProfilesUpdateOne) SetCreatedTime(t time.Time) *ProfilesUpdateOne {
	puo.mutation.SetCreatedTime(t)
	return puo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (puo *ProfilesUpdateOne) SetNillableCreatedTime(t *time.Time) *ProfilesUpdateOne {
	if t != nil {
		puo.SetCreatedTime(*t)
	}
	return puo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (puo *ProfilesUpdateOne) ClearCreatedTime() *ProfilesUpdateOne {
	puo.mutation.ClearCreatedTime()
	return puo
}

// SetUpdatedTime sets the "updated_time" field.
func (puo *ProfilesUpdateOne) SetUpdatedTime(t time.Time) *ProfilesUpdateOne {
	puo.mutation.SetUpdatedTime(t)
	return puo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (puo *ProfilesUpdateOne) ClearUpdatedTime() *ProfilesUpdateOne {
	puo.mutation.ClearUpdatedTime()
	return puo
}

// Mutation returns the ProfilesMutation object of the builder.
func (puo *ProfilesUpdateOne) Mutation() *ProfilesMutation {
	return puo.mutation
}

// Where appends a list predicates to the ProfilesUpdate builder.
func (puo *ProfilesUpdateOne) Where(ps ...predicate.Profiles) *ProfilesUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProfilesUpdateOne) Select(field string, fields ...string) *ProfilesUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Profiles entity.
func (puo *ProfilesUpdateOne) Save(ctx context.Context) (*Profiles, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProfilesUpdateOne) SaveX(ctx context.Context) *Profiles {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProfilesUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProfilesUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProfilesUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedTime(); !ok && !puo.mutation.UpdatedTimeCleared() {
		v := profiles.UpdateDefaultUpdatedTime()
		puo.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProfilesUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := profiles.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "Profiles.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.IDCardNumber(); ok {
		if err := profiles.IDCardNumberValidator(v); err != nil {
			return &ValidationError{Name: "id_card_number", err: fmt.Errorf(`genclients: validator failed for field "Profiles.id_card_number": %w`, err)}
		}
	}
	return nil
}

func (puo *ProfilesUpdateOne) sqlSave(ctx context.Context) (_node *Profiles, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(profiles.Table, profiles.Columns, sqlgraph.NewFieldSpec(profiles.FieldID, field.TypeInt64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "Profiles.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profiles.FieldID)
		for _, f := range fields {
			if !profiles.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != profiles.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.TypeID(); ok {
		_spec.SetField(profiles.FieldTypeID, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedTypeID(); ok {
		_spec.AddField(profiles.FieldTypeID, field.TypeInt64, value)
	}
	if puo.mutation.TypeIDCleared() {
		_spec.ClearField(profiles.FieldTypeID, field.TypeInt64)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(profiles.FieldName, field.TypeString, value)
	}
	if puo.mutation.NameCleared() {
		_spec.ClearField(profiles.FieldName, field.TypeString)
	}
	if value, ok := puo.mutation.TenantID(); ok {
		_spec.SetField(profiles.FieldTenantID, field.TypeUUID, value)
	}
	if puo.mutation.TenantIDCleared() {
		_spec.ClearField(profiles.FieldTenantID, field.TypeUUID)
	}
	if value, ok := puo.mutation.IDCardNumber(); ok {
		_spec.SetField(profiles.FieldIDCardNumber, field.TypeString, value)
	}
	if puo.mutation.IDCardNumberCleared() {
		_spec.ClearField(profiles.FieldIDCardNumber, field.TypeString)
	}
	if value, ok := puo.mutation.PhoneNumber(); ok {
		_spec.SetField(profiles.FieldPhoneNumber, field.TypeString, value)
	}
	if puo.mutation.PhoneNumberCleared() {
		_spec.ClearField(profiles.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := puo.mutation.Enabled(); ok {
		_spec.SetField(profiles.FieldEnabled, field.TypeBool, value)
	}
	if puo.mutation.EnabledCleared() {
		_spec.ClearField(profiles.FieldEnabled, field.TypeBool)
	}
	if value, ok := puo.mutation.RoomID(); ok {
		_spec.SetField(profiles.FieldRoomID, field.TypeString, value)
	}
	if puo.mutation.RoomIDCleared() {
		_spec.ClearField(profiles.FieldRoomID, field.TypeString)
	}
	if value, ok := puo.mutation.TmpURL(); ok {
		_spec.SetField(profiles.FieldTmpURL, field.TypeString, value)
	}
	if puo.mutation.TmpURLCleared() {
		_spec.ClearField(profiles.FieldTmpURL, field.TypeString)
	}
	if value, ok := puo.mutation.CreatedTime(); ok {
		_spec.SetField(profiles.FieldCreatedTime, field.TypeTime, value)
	}
	if puo.mutation.CreatedTimeCleared() {
		_spec.ClearField(profiles.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := puo.mutation.UpdatedTime(); ok {
		_spec.SetField(profiles.FieldUpdatedTime, field.TypeTime, value)
	}
	if puo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(profiles.FieldUpdatedTime, field.TypeTime)
	}
	_node = &Profiles{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profiles.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
