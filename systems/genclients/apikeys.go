// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/apikeys"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Apikeys is the model entity for the Apikeys schema.
type Apikeys struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id" db:"user_id"`
	// 酒店号
	TenantID uuid.UUID `json:"tenant_id"  db:"tenant_id"`
	// 使用计数
	UsageCount int64 `json:"usage_count" db:"usage_count"`
	// APIKey字符串
	APIKey string `json:"api_key" db:"api_key"`
	// Key名称
	KeyName string `json:"key_name" db:"key_name"`
	// 启用
	Enabled bool `json:"enabled" db:"enabled"`
	// 到期日期
	ExpiresTime time.Time `json:"expires_time" db:"expires_time"`
	// 创建时间
	CreatedTime time.Time `json:"created_time" db:"created_time"`
	// 创建时间
	UpdatedTime time.Time `json:"updated_time" db:"updated_time"`
	// 最近使用时间
	LastUsedTime time.Time `json:"last_used_time" db:"last_used_time"`
	// 使用场景
	Type         int `json:"type" db:"type"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Apikeys) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apikeys.FieldEnabled:
			values[i] = new(sql.NullBool)
		case apikeys.FieldID, apikeys.FieldUserID, apikeys.FieldUsageCount, apikeys.FieldType:
			values[i] = new(sql.NullInt64)
		case apikeys.FieldAPIKey, apikeys.FieldKeyName:
			values[i] = new(sql.NullString)
		case apikeys.FieldExpiresTime, apikeys.FieldCreatedTime, apikeys.FieldUpdatedTime, apikeys.FieldLastUsedTime:
			values[i] = new(sql.NullTime)
		case apikeys.FieldTenantID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Apikeys fields.
func (a *Apikeys) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apikeys.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int64(value.Int64)
		case apikeys.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				a.UserID = value.Int64
			}
		case apikeys.FieldTenantID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				a.TenantID = *value
			}
		case apikeys.FieldUsageCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_count", values[i])
			} else if value.Valid {
				a.UsageCount = value.Int64
			}
		case apikeys.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				a.APIKey = value.String
			}
		case apikeys.FieldKeyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key_name", values[i])
			} else if value.Valid {
				a.KeyName = value.String
			}
		case apikeys.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				a.Enabled = value.Bool
			}
		case apikeys.FieldExpiresTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_time", values[i])
			} else if value.Valid {
				a.ExpiresTime = value.Time
			}
		case apikeys.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				a.CreatedTime = value.Time
			}
		case apikeys.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				a.UpdatedTime = value.Time
			}
		case apikeys.FieldLastUsedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_time", values[i])
			} else if value.Valid {
				a.LastUsedTime = value.Time
			}
		case apikeys.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Apikeys.
// This includes values selected through modifiers, order, etc.
func (a *Apikeys) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Apikeys.
// Note that you need to call Apikeys.Unwrap() before calling this method if this Apikeys
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Apikeys) Update() *ApikeysUpdateOne {
	return NewApikeysClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Apikeys entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Apikeys) Unwrap() *Apikeys {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("genclients: Apikeys is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Apikeys) String() string {
	var builder strings.Builder
	builder.WriteString("Apikeys(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", a.UserID))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", a.TenantID))
	builder.WriteString(", ")
	builder.WriteString("usage_count=")
	builder.WriteString(fmt.Sprintf("%v", a.UsageCount))
	builder.WriteString(", ")
	builder.WriteString("api_key=")
	builder.WriteString(a.APIKey)
	builder.WriteString(", ")
	builder.WriteString("key_name=")
	builder.WriteString(a.KeyName)
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", a.Enabled))
	builder.WriteString(", ")
	builder.WriteString("expires_time=")
	builder.WriteString(a.ExpiresTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_time=")
	builder.WriteString(a.CreatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_time=")
	builder.WriteString(a.UpdatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_used_time=")
	builder.WriteString(a.LastUsedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", a.Type))
	builder.WriteByte(')')
	return builder.String()
}

// ApikeysSlice is a parsable slice of Apikeys.
type ApikeysSlice []*Apikeys
