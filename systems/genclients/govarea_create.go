// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/govarea"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GovAreaCreate is the builder for creating a GovArea entity.
type GovAreaCreate struct {
	config
	mutation *GovAreaMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (gac *GovAreaCreate) SetCode(s string) *GovAreaCreate {
	gac.mutation.SetCode(s)
	return gac
}

// SetName sets the "name" field.
func (gac *GovAreaCreate) SetName(s string) *GovAreaCreate {
	gac.mutation.SetName(s)
	return gac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gac *GovAreaCreate) SetNillableName(s *string) *GovAreaCreate {
	if s != nil {
		gac.SetName(*s)
	}
	return gac
}

// SetProvinceCode sets the "province_code" field.
func (gac *GovAreaCreate) SetProvinceCode(s string) *GovAreaCreate {
	gac.mutation.SetProvinceCode(s)
	return gac
}

// SetNillableProvinceCode sets the "province_code" field if the given value is not nil.
func (gac *GovAreaCreate) SetNillableProvinceCode(s *string) *GovAreaCreate {
	if s != nil {
		gac.SetProvinceCode(*s)
	}
	return gac
}

// SetCityCode sets the "city_code" field.
func (gac *GovAreaCreate) SetCityCode(s string) *GovAreaCreate {
	gac.mutation.SetCityCode(s)
	return gac
}

// SetNillableCityCode sets the "city_code" field if the given value is not nil.
func (gac *GovAreaCreate) SetNillableCityCode(s *string) *GovAreaCreate {
	if s != nil {
		gac.SetCityCode(*s)
	}
	return gac
}

// SetCreator sets the "creator" field.
func (gac *GovAreaCreate) SetCreator(s string) *GovAreaCreate {
	gac.mutation.SetCreator(s)
	return gac
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (gac *GovAreaCreate) SetNillableCreator(s *string) *GovAreaCreate {
	if s != nil {
		gac.SetCreator(*s)
	}
	return gac
}

// SetDeleteFlag sets the "delete_flag" field.
func (gac *GovAreaCreate) SetDeleteFlag(s string) *GovAreaCreate {
	gac.mutation.SetDeleteFlag(s)
	return gac
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (gac *GovAreaCreate) SetNillableDeleteFlag(s *string) *GovAreaCreate {
	if s != nil {
		gac.SetDeleteFlag(*s)
	}
	return gac
}

// SetCreatedTime sets the "created_time" field.
func (gac *GovAreaCreate) SetCreatedTime(t time.Time) *GovAreaCreate {
	gac.mutation.SetCreatedTime(t)
	return gac
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (gac *GovAreaCreate) SetNillableCreatedTime(t *time.Time) *GovAreaCreate {
	if t != nil {
		gac.SetCreatedTime(*t)
	}
	return gac
}

// SetID sets the "id" field.
func (gac *GovAreaCreate) SetID(i int64) *GovAreaCreate {
	gac.mutation.SetID(i)
	return gac
}

// Mutation returns the GovAreaMutation object of the builder.
func (gac *GovAreaCreate) Mutation() *GovAreaMutation {
	return gac.mutation
}

// Save creates the GovArea in the database.
func (gac *GovAreaCreate) Save(ctx context.Context) (*GovArea, error) {
	gac.defaults()
	return withHooks(ctx, gac.sqlSave, gac.mutation, gac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gac *GovAreaCreate) SaveX(ctx context.Context) *GovArea {
	v, err := gac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gac *GovAreaCreate) Exec(ctx context.Context) error {
	_, err := gac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gac *GovAreaCreate) ExecX(ctx context.Context) {
	if err := gac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gac *GovAreaCreate) defaults() {
	if _, ok := gac.mutation.Name(); !ok {
		v := govarea.DefaultName
		gac.mutation.SetName(v)
	}
	if _, ok := gac.mutation.ProvinceCode(); !ok {
		v := govarea.DefaultProvinceCode
		gac.mutation.SetProvinceCode(v)
	}
	if _, ok := gac.mutation.CityCode(); !ok {
		v := govarea.DefaultCityCode
		gac.mutation.SetCityCode(v)
	}
	if _, ok := gac.mutation.Creator(); !ok {
		v := govarea.DefaultCreator
		gac.mutation.SetCreator(v)
	}
	if _, ok := gac.mutation.DeleteFlag(); !ok {
		v := govarea.DefaultDeleteFlag
		gac.mutation.SetDeleteFlag(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gac *GovAreaCreate) check() error {
	if _, ok := gac.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`genclients: missing required field "GovArea.code"`)}
	}
	if v, ok := gac.mutation.Code(); ok {
		if err := govarea.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`genclients: validator failed for field "GovArea.code": %w`, err)}
		}
	}
	if _, ok := gac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`genclients: missing required field "GovArea.name"`)}
	}
	if v, ok := gac.mutation.Name(); ok {
		if err := govarea.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "GovArea.name": %w`, err)}
		}
	}
	if _, ok := gac.mutation.ProvinceCode(); !ok {
		return &ValidationError{Name: "province_code", err: errors.New(`genclients: missing required field "GovArea.province_code"`)}
	}
	if v, ok := gac.mutation.ProvinceCode(); ok {
		if err := govarea.ProvinceCodeValidator(v); err != nil {
			return &ValidationError{Name: "province_code", err: fmt.Errorf(`genclients: validator failed for field "GovArea.province_code": %w`, err)}
		}
	}
	if _, ok := gac.mutation.CityCode(); !ok {
		return &ValidationError{Name: "city_code", err: errors.New(`genclients: missing required field "GovArea.city_code"`)}
	}
	if v, ok := gac.mutation.CityCode(); ok {
		if err := govarea.CityCodeValidator(v); err != nil {
			return &ValidationError{Name: "city_code", err: fmt.Errorf(`genclients: validator failed for field "GovArea.city_code": %w`, err)}
		}
	}
	if _, ok := gac.mutation.Creator(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`genclients: missing required field "GovArea.creator"`)}
	}
	if v, ok := gac.mutation.Creator(); ok {
		if err := govarea.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "GovArea.creator": %w`, err)}
		}
	}
	if _, ok := gac.mutation.DeleteFlag(); !ok {
		return &ValidationError{Name: "delete_flag", err: errors.New(`genclients: missing required field "GovArea.delete_flag"`)}
	}
	if v, ok := gac.mutation.DeleteFlag(); ok {
		if err := govarea.DeleteFlagValidator(v); err != nil {
			return &ValidationError{Name: "delete_flag", err: fmt.Errorf(`genclients: validator failed for field "GovArea.delete_flag": %w`, err)}
		}
	}
	return nil
}

func (gac *GovAreaCreate) sqlSave(ctx context.Context) (*GovArea, error) {
	if err := gac.check(); err != nil {
		return nil, err
	}
	_node, _spec := gac.createSpec()
	if err := sqlgraph.CreateNode(ctx, gac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	gac.mutation.id = &_node.ID
	gac.mutation.done = true
	return _node, nil
}

func (gac *GovAreaCreate) createSpec() (*GovArea, *sqlgraph.CreateSpec) {
	var (
		_node = &GovArea{config: gac.config}
		_spec = sqlgraph.NewCreateSpec(govarea.Table, sqlgraph.NewFieldSpec(govarea.FieldID, field.TypeInt64))
	)
	if id, ok := gac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gac.mutation.Code(); ok {
		_spec.SetField(govarea.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := gac.mutation.Name(); ok {
		_spec.SetField(govarea.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gac.mutation.ProvinceCode(); ok {
		_spec.SetField(govarea.FieldProvinceCode, field.TypeString, value)
		_node.ProvinceCode = value
	}
	if value, ok := gac.mutation.CityCode(); ok {
		_spec.SetField(govarea.FieldCityCode, field.TypeString, value)
		_node.CityCode = value
	}
	if value, ok := gac.mutation.Creator(); ok {
		_spec.SetField(govarea.FieldCreator, field.TypeString, value)
		_node.Creator = value
	}
	if value, ok := gac.mutation.DeleteFlag(); ok {
		_spec.SetField(govarea.FieldDeleteFlag, field.TypeString, value)
		_node.DeleteFlag = value
	}
	if value, ok := gac.mutation.CreatedTime(); ok {
		_spec.SetField(govarea.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	return _node, _spec
}

// GovAreaCreateBulk is the builder for creating many GovArea entities in bulk.
type GovAreaCreateBulk struct {
	config
	err      error
	builders []*GovAreaCreate
}

// Save creates the GovArea entities in the database.
func (gacb *GovAreaCreateBulk) Save(ctx context.Context) ([]*GovArea, error) {
	if gacb.err != nil {
		return nil, gacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gacb.builders))
	nodes := make([]*GovArea, len(gacb.builders))
	mutators := make([]Mutator, len(gacb.builders))
	for i := range gacb.builders {
		func(i int, root context.Context) {
			builder := gacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GovAreaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gacb *GovAreaCreateBulk) SaveX(ctx context.Context) []*GovArea {
	v, err := gacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gacb *GovAreaCreateBulk) Exec(ctx context.Context) error {
	_, err := gacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gacb *GovAreaCreateBulk) ExecX(ctx context.Context) {
	if err := gacb.Exec(ctx); err != nil {
		panic(err)
	}
}
