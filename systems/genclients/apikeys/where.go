// Code generated by ent, DO NOT EDIT.

package apikeys

import (
	"fmcam/systems/genclients/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldUserID, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v uuid.UUID) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldTenantID, v))
}

// UsageCount applies equality check predicate on the "usage_count" field. It's identical to UsageCountEQ.
func UsageCount(v int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldUsageCount, v))
}

// APIKey applies equality check predicate on the "api_key" field. It's identical to APIKeyEQ.
func APIKey(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldAPIKey, v))
}

// KeyName applies equality check predicate on the "key_name" field. It's identical to KeyNameEQ.
func KeyName(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldKeyName, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldEnabled, v))
}

// ExpiresTime applies equality check predicate on the "expires_time" field. It's identical to ExpiresTimeEQ.
func ExpiresTime(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldExpiresTime, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldCreatedTime, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldUpdatedTime, v))
}

// LastUsedTime applies equality check predicate on the "last_used_time" field. It's identical to LastUsedTimeEQ.
func LastUsedTime(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldLastUsedTime, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldType, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotNull(FieldUserID))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v uuid.UUID) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v uuid.UUID) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...uuid.UUID) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...uuid.UUID) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v uuid.UUID) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v uuid.UUID) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v uuid.UUID) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v uuid.UUID) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLTE(FieldTenantID, v))
}

// UsageCountEQ applies the EQ predicate on the "usage_count" field.
func UsageCountEQ(v int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldUsageCount, v))
}

// UsageCountNEQ applies the NEQ predicate on the "usage_count" field.
func UsageCountNEQ(v int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNEQ(FieldUsageCount, v))
}

// UsageCountIn applies the In predicate on the "usage_count" field.
func UsageCountIn(vs ...int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIn(FieldUsageCount, vs...))
}

// UsageCountNotIn applies the NotIn predicate on the "usage_count" field.
func UsageCountNotIn(vs ...int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotIn(FieldUsageCount, vs...))
}

// UsageCountGT applies the GT predicate on the "usage_count" field.
func UsageCountGT(v int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGT(FieldUsageCount, v))
}

// UsageCountGTE applies the GTE predicate on the "usage_count" field.
func UsageCountGTE(v int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGTE(FieldUsageCount, v))
}

// UsageCountLT applies the LT predicate on the "usage_count" field.
func UsageCountLT(v int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLT(FieldUsageCount, v))
}

// UsageCountLTE applies the LTE predicate on the "usage_count" field.
func UsageCountLTE(v int64) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLTE(FieldUsageCount, v))
}

// APIKeyEQ applies the EQ predicate on the "api_key" field.
func APIKeyEQ(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldAPIKey, v))
}

// APIKeyNEQ applies the NEQ predicate on the "api_key" field.
func APIKeyNEQ(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNEQ(FieldAPIKey, v))
}

// APIKeyIn applies the In predicate on the "api_key" field.
func APIKeyIn(vs ...string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIn(FieldAPIKey, vs...))
}

// APIKeyNotIn applies the NotIn predicate on the "api_key" field.
func APIKeyNotIn(vs ...string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotIn(FieldAPIKey, vs...))
}

// APIKeyGT applies the GT predicate on the "api_key" field.
func APIKeyGT(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGT(FieldAPIKey, v))
}

// APIKeyGTE applies the GTE predicate on the "api_key" field.
func APIKeyGTE(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGTE(FieldAPIKey, v))
}

// APIKeyLT applies the LT predicate on the "api_key" field.
func APIKeyLT(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLT(FieldAPIKey, v))
}

// APIKeyLTE applies the LTE predicate on the "api_key" field.
func APIKeyLTE(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLTE(FieldAPIKey, v))
}

// APIKeyContains applies the Contains predicate on the "api_key" field.
func APIKeyContains(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldContains(FieldAPIKey, v))
}

// APIKeyHasPrefix applies the HasPrefix predicate on the "api_key" field.
func APIKeyHasPrefix(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldHasPrefix(FieldAPIKey, v))
}

// APIKeyHasSuffix applies the HasSuffix predicate on the "api_key" field.
func APIKeyHasSuffix(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldHasSuffix(FieldAPIKey, v))
}

// APIKeyEqualFold applies the EqualFold predicate on the "api_key" field.
func APIKeyEqualFold(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEqualFold(FieldAPIKey, v))
}

// APIKeyContainsFold applies the ContainsFold predicate on the "api_key" field.
func APIKeyContainsFold(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldContainsFold(FieldAPIKey, v))
}

// KeyNameEQ applies the EQ predicate on the "key_name" field.
func KeyNameEQ(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldKeyName, v))
}

// KeyNameNEQ applies the NEQ predicate on the "key_name" field.
func KeyNameNEQ(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNEQ(FieldKeyName, v))
}

// KeyNameIn applies the In predicate on the "key_name" field.
func KeyNameIn(vs ...string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIn(FieldKeyName, vs...))
}

// KeyNameNotIn applies the NotIn predicate on the "key_name" field.
func KeyNameNotIn(vs ...string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotIn(FieldKeyName, vs...))
}

// KeyNameGT applies the GT predicate on the "key_name" field.
func KeyNameGT(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGT(FieldKeyName, v))
}

// KeyNameGTE applies the GTE predicate on the "key_name" field.
func KeyNameGTE(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGTE(FieldKeyName, v))
}

// KeyNameLT applies the LT predicate on the "key_name" field.
func KeyNameLT(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLT(FieldKeyName, v))
}

// KeyNameLTE applies the LTE predicate on the "key_name" field.
func KeyNameLTE(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLTE(FieldKeyName, v))
}

// KeyNameContains applies the Contains predicate on the "key_name" field.
func KeyNameContains(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldContains(FieldKeyName, v))
}

// KeyNameHasPrefix applies the HasPrefix predicate on the "key_name" field.
func KeyNameHasPrefix(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldHasPrefix(FieldKeyName, v))
}

// KeyNameHasSuffix applies the HasSuffix predicate on the "key_name" field.
func KeyNameHasSuffix(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldHasSuffix(FieldKeyName, v))
}

// KeyNameEqualFold applies the EqualFold predicate on the "key_name" field.
func KeyNameEqualFold(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEqualFold(FieldKeyName, v))
}

// KeyNameContainsFold applies the ContainsFold predicate on the "key_name" field.
func KeyNameContainsFold(v string) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldContainsFold(FieldKeyName, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNEQ(FieldEnabled, v))
}

// EnabledIsNil applies the IsNil predicate on the "enabled" field.
func EnabledIsNil() predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIsNull(FieldEnabled))
}

// EnabledNotNil applies the NotNil predicate on the "enabled" field.
func EnabledNotNil() predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotNull(FieldEnabled))
}

// ExpiresTimeEQ applies the EQ predicate on the "expires_time" field.
func ExpiresTimeEQ(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldExpiresTime, v))
}

// ExpiresTimeNEQ applies the NEQ predicate on the "expires_time" field.
func ExpiresTimeNEQ(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNEQ(FieldExpiresTime, v))
}

// ExpiresTimeIn applies the In predicate on the "expires_time" field.
func ExpiresTimeIn(vs ...time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIn(FieldExpiresTime, vs...))
}

// ExpiresTimeNotIn applies the NotIn predicate on the "expires_time" field.
func ExpiresTimeNotIn(vs ...time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotIn(FieldExpiresTime, vs...))
}

// ExpiresTimeGT applies the GT predicate on the "expires_time" field.
func ExpiresTimeGT(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGT(FieldExpiresTime, v))
}

// ExpiresTimeGTE applies the GTE predicate on the "expires_time" field.
func ExpiresTimeGTE(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGTE(FieldExpiresTime, v))
}

// ExpiresTimeLT applies the LT predicate on the "expires_time" field.
func ExpiresTimeLT(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLT(FieldExpiresTime, v))
}

// ExpiresTimeLTE applies the LTE predicate on the "expires_time" field.
func ExpiresTimeLTE(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLTE(FieldExpiresTime, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLTE(FieldCreatedTime, v))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLTE(FieldUpdatedTime, v))
}

// UpdatedTimeIsNil applies the IsNil predicate on the "updated_time" field.
func UpdatedTimeIsNil() predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIsNull(FieldUpdatedTime))
}

// UpdatedTimeNotNil applies the NotNil predicate on the "updated_time" field.
func UpdatedTimeNotNil() predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotNull(FieldUpdatedTime))
}

// LastUsedTimeEQ applies the EQ predicate on the "last_used_time" field.
func LastUsedTimeEQ(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldLastUsedTime, v))
}

// LastUsedTimeNEQ applies the NEQ predicate on the "last_used_time" field.
func LastUsedTimeNEQ(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNEQ(FieldLastUsedTime, v))
}

// LastUsedTimeIn applies the In predicate on the "last_used_time" field.
func LastUsedTimeIn(vs ...time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIn(FieldLastUsedTime, vs...))
}

// LastUsedTimeNotIn applies the NotIn predicate on the "last_used_time" field.
func LastUsedTimeNotIn(vs ...time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotIn(FieldLastUsedTime, vs...))
}

// LastUsedTimeGT applies the GT predicate on the "last_used_time" field.
func LastUsedTimeGT(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGT(FieldLastUsedTime, v))
}

// LastUsedTimeGTE applies the GTE predicate on the "last_used_time" field.
func LastUsedTimeGTE(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGTE(FieldLastUsedTime, v))
}

// LastUsedTimeLT applies the LT predicate on the "last_used_time" field.
func LastUsedTimeLT(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLT(FieldLastUsedTime, v))
}

// LastUsedTimeLTE applies the LTE predicate on the "last_used_time" field.
func LastUsedTimeLTE(v time.Time) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLTE(FieldLastUsedTime, v))
}

// LastUsedTimeIsNil applies the IsNil predicate on the "last_used_time" field.
func LastUsedTimeIsNil() predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIsNull(FieldLastUsedTime))
}

// LastUsedTimeNotNil applies the NotNil predicate on the "last_used_time" field.
func LastUsedTimeNotNil() predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotNull(FieldLastUsedTime))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.Apikeys {
	return predicate.Apikeys(sql.FieldLTE(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.Apikeys {
	return predicate.Apikeys(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.Apikeys {
	return predicate.Apikeys(sql.FieldNotNull(FieldType))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Apikeys) predicate.Apikeys {
	return predicate.Apikeys(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Apikeys) predicate.Apikeys {
	return predicate.Apikeys(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Apikeys) predicate.Apikeys {
	return predicate.Apikeys(sql.NotPredicates(p))
}
