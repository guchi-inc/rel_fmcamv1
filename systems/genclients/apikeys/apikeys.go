// Code generated by ent, DO NOT EDIT.

package apikeys

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the apikeys type in the database.
	Label = "apikeys"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldUsageCount holds the string denoting the usage_count field in the database.
	FieldUsageCount = "usage_count"
	// FieldAPIKey holds the string denoting the api_key field in the database.
	FieldAPIKey = "api_key"
	// FieldKeyName holds the string denoting the key_name field in the database.
	FieldKeyName = "key_name"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldExpiresTime holds the string denoting the expires_time field in the database.
	FieldExpiresTime = "expires_time"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// FieldLastUsedTime holds the string denoting the last_used_time field in the database.
	FieldLastUsedTime = "last_used_time"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// Table holds the table name of the apikeys in the database.
	Table = "ApiKeys"
)

// Columns holds all SQL columns for apikeys fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTenantID,
	FieldUsageCount,
	FieldAPIKey,
	FieldKeyName,
	FieldEnabled,
	FieldExpiresTime,
	FieldCreatedTime,
	FieldUpdatedTime,
	FieldLastUsedTime,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Apikeys queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByUsageCount orders the results by the usage_count field.
func ByUsageCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageCount, opts...).ToFunc()
}

// ByAPIKey orders the results by the api_key field.
func ByAPIKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIKey, opts...).ToFunc()
}

// ByKeyName orders the results by the key_name field.
func ByKeyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeyName, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByExpiresTime orders the results by the expires_time field.
func ByExpiresTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresTime, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}

// ByLastUsedTime orders the results by the last_used_time field.
func ByLastUsedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsedTime, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}
