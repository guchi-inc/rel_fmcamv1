// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/fmdemands"
	"fmcam/systems/genclients/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FmDemandsUpdate is the builder for updating FmDemands entities.
type FmDemandsUpdate struct {
	config
	hooks    []Hook
	mutation *FmDemandsMutation
}

// Where appends a list predicates to the FmDemandsUpdate builder.
func (fdu *FmDemandsUpdate) Where(ps ...predicate.FmDemands) *FmDemandsUpdate {
	fdu.mutation.Where(ps...)
	return fdu
}

// SetSupplier sets the "supplier" field.
func (fdu *FmDemandsUpdate) SetSupplier(s string) *FmDemandsUpdate {
	fdu.mutation.SetSupplier(s)
	return fdu
}

// SetNillableSupplier sets the "supplier" field if the given value is not nil.
func (fdu *FmDemandsUpdate) SetNillableSupplier(s *string) *FmDemandsUpdate {
	if s != nil {
		fdu.SetSupplier(*s)
	}
	return fdu
}

// ClearSupplier clears the value of the "supplier" field.
func (fdu *FmDemandsUpdate) ClearSupplier() *FmDemandsUpdate {
	fdu.mutation.ClearSupplier()
	return fdu
}

// SetUsername sets the "username" field.
func (fdu *FmDemandsUpdate) SetUsername(s string) *FmDemandsUpdate {
	fdu.mutation.SetUsername(s)
	return fdu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (fdu *FmDemandsUpdate) SetNillableUsername(s *string) *FmDemandsUpdate {
	if s != nil {
		fdu.SetUsername(*s)
	}
	return fdu
}

// ClearUsername clears the value of the "username" field.
func (fdu *FmDemandsUpdate) ClearUsername() *FmDemandsUpdate {
	fdu.mutation.ClearUsername()
	return fdu
}

// SetPhonenum sets the "phonenum" field.
func (fdu *FmDemandsUpdate) SetPhonenum(s string) *FmDemandsUpdate {
	fdu.mutation.SetPhonenum(s)
	return fdu
}

// SetNillablePhonenum sets the "phonenum" field if the given value is not nil.
func (fdu *FmDemandsUpdate) SetNillablePhonenum(s *string) *FmDemandsUpdate {
	if s != nil {
		fdu.SetPhonenum(*s)
	}
	return fdu
}

// ClearPhonenum clears the value of the "phonenum" field.
func (fdu *FmDemandsUpdate) ClearPhonenum() *FmDemandsUpdate {
	fdu.mutation.ClearPhonenum()
	return fdu
}

// SetEmail sets the "email" field.
func (fdu *FmDemandsUpdate) SetEmail(s string) *FmDemandsUpdate {
	fdu.mutation.SetEmail(s)
	return fdu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (fdu *FmDemandsUpdate) SetNillableEmail(s *string) *FmDemandsUpdate {
	if s != nil {
		fdu.SetEmail(*s)
	}
	return fdu
}

// ClearEmail clears the value of the "email" field.
func (fdu *FmDemandsUpdate) ClearEmail() *FmDemandsUpdate {
	fdu.mutation.ClearEmail()
	return fdu
}

// SetProvince sets the "province" field.
func (fdu *FmDemandsUpdate) SetProvince(s string) *FmDemandsUpdate {
	fdu.mutation.SetProvince(s)
	return fdu
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (fdu *FmDemandsUpdate) SetNillableProvince(s *string) *FmDemandsUpdate {
	if s != nil {
		fdu.SetProvince(*s)
	}
	return fdu
}

// ClearProvince clears the value of the "province" field.
func (fdu *FmDemandsUpdate) ClearProvince() *FmDemandsUpdate {
	fdu.mutation.ClearProvince()
	return fdu
}

// SetCity sets the "city" field.
func (fdu *FmDemandsUpdate) SetCity(s string) *FmDemandsUpdate {
	fdu.mutation.SetCity(s)
	return fdu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (fdu *FmDemandsUpdate) SetNillableCity(s *string) *FmDemandsUpdate {
	if s != nil {
		fdu.SetCity(*s)
	}
	return fdu
}

// ClearCity clears the value of the "city" field.
func (fdu *FmDemandsUpdate) ClearCity() *FmDemandsUpdate {
	fdu.mutation.ClearCity()
	return fdu
}

// SetArea sets the "area" field.
func (fdu *FmDemandsUpdate) SetArea(s string) *FmDemandsUpdate {
	fdu.mutation.SetArea(s)
	return fdu
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (fdu *FmDemandsUpdate) SetNillableArea(s *string) *FmDemandsUpdate {
	if s != nil {
		fdu.SetArea(*s)
	}
	return fdu
}

// ClearArea clears the value of the "area" field.
func (fdu *FmDemandsUpdate) ClearArea() *FmDemandsUpdate {
	fdu.mutation.ClearArea()
	return fdu
}

// SetStreet sets the "street" field.
func (fdu *FmDemandsUpdate) SetStreet(s string) *FmDemandsUpdate {
	fdu.mutation.SetStreet(s)
	return fdu
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (fdu *FmDemandsUpdate) SetNillableStreet(s *string) *FmDemandsUpdate {
	if s != nil {
		fdu.SetStreet(*s)
	}
	return fdu
}

// ClearStreet clears the value of the "street" field.
func (fdu *FmDemandsUpdate) ClearStreet() *FmDemandsUpdate {
	fdu.mutation.ClearStreet()
	return fdu
}

// SetMessage sets the "message" field.
func (fdu *FmDemandsUpdate) SetMessage(s string) *FmDemandsUpdate {
	fdu.mutation.SetMessage(s)
	return fdu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (fdu *FmDemandsUpdate) SetNillableMessage(s *string) *FmDemandsUpdate {
	if s != nil {
		fdu.SetMessage(*s)
	}
	return fdu
}

// ClearMessage clears the value of the "message" field.
func (fdu *FmDemandsUpdate) ClearMessage() *FmDemandsUpdate {
	fdu.mutation.ClearMessage()
	return fdu
}

// SetCreator sets the "creator" field.
func (fdu *FmDemandsUpdate) SetCreator(s string) *FmDemandsUpdate {
	fdu.mutation.SetCreator(s)
	return fdu
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (fdu *FmDemandsUpdate) SetNillableCreator(s *string) *FmDemandsUpdate {
	if s != nil {
		fdu.SetCreator(*s)
	}
	return fdu
}

// ClearCreator clears the value of the "creator" field.
func (fdu *FmDemandsUpdate) ClearCreator() *FmDemandsUpdate {
	fdu.mutation.ClearCreator()
	return fdu
}

// SetCreatedTime sets the "created_time" field.
func (fdu *FmDemandsUpdate) SetCreatedTime(t time.Time) *FmDemandsUpdate {
	fdu.mutation.SetCreatedTime(t)
	return fdu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fdu *FmDemandsUpdate) SetNillableCreatedTime(t *time.Time) *FmDemandsUpdate {
	if t != nil {
		fdu.SetCreatedTime(*t)
	}
	return fdu
}

// ClearCreatedTime clears the value of the "created_time" field.
func (fdu *FmDemandsUpdate) ClearCreatedTime() *FmDemandsUpdate {
	fdu.mutation.ClearCreatedTime()
	return fdu
}

// Mutation returns the FmDemandsMutation object of the builder.
func (fdu *FmDemandsUpdate) Mutation() *FmDemandsMutation {
	return fdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fdu *FmDemandsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fdu.sqlSave, fdu.mutation, fdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fdu *FmDemandsUpdate) SaveX(ctx context.Context) int {
	affected, err := fdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fdu *FmDemandsUpdate) Exec(ctx context.Context) error {
	_, err := fdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdu *FmDemandsUpdate) ExecX(ctx context.Context) {
	if err := fdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fdu *FmDemandsUpdate) check() error {
	if v, ok := fdu.mutation.Supplier(); ok {
		if err := fmdemands.SupplierValidator(v); err != nil {
			return &ValidationError{Name: "supplier", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.supplier": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.Username(); ok {
		if err := fmdemands.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.username": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.Phonenum(); ok {
		if err := fmdemands.PhonenumValidator(v); err != nil {
			return &ValidationError{Name: "phonenum", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.phonenum": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.Email(); ok {
		if err := fmdemands.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.email": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.Province(); ok {
		if err := fmdemands.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "province", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.province": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.City(); ok {
		if err := fmdemands.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.city": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.Area(); ok {
		if err := fmdemands.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.area": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.Street(); ok {
		if err := fmdemands.StreetValidator(v); err != nil {
			return &ValidationError{Name: "street", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.street": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.Message(); ok {
		if err := fmdemands.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.message": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.Creator(); ok {
		if err := fmdemands.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.creator": %w`, err)}
		}
	}
	return nil
}

func (fdu *FmDemandsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fmdemands.Table, fmdemands.Columns, sqlgraph.NewFieldSpec(fmdemands.FieldID, field.TypeInt64))
	if ps := fdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fdu.mutation.Supplier(); ok {
		_spec.SetField(fmdemands.FieldSupplier, field.TypeString, value)
	}
	if fdu.mutation.SupplierCleared() {
		_spec.ClearField(fmdemands.FieldSupplier, field.TypeString)
	}
	if value, ok := fdu.mutation.Username(); ok {
		_spec.SetField(fmdemands.FieldUsername, field.TypeString, value)
	}
	if fdu.mutation.UsernameCleared() {
		_spec.ClearField(fmdemands.FieldUsername, field.TypeString)
	}
	if value, ok := fdu.mutation.Phonenum(); ok {
		_spec.SetField(fmdemands.FieldPhonenum, field.TypeString, value)
	}
	if fdu.mutation.PhonenumCleared() {
		_spec.ClearField(fmdemands.FieldPhonenum, field.TypeString)
	}
	if value, ok := fdu.mutation.Email(); ok {
		_spec.SetField(fmdemands.FieldEmail, field.TypeString, value)
	}
	if fdu.mutation.EmailCleared() {
		_spec.ClearField(fmdemands.FieldEmail, field.TypeString)
	}
	if value, ok := fdu.mutation.Province(); ok {
		_spec.SetField(fmdemands.FieldProvince, field.TypeString, value)
	}
	if fdu.mutation.ProvinceCleared() {
		_spec.ClearField(fmdemands.FieldProvince, field.TypeString)
	}
	if value, ok := fdu.mutation.City(); ok {
		_spec.SetField(fmdemands.FieldCity, field.TypeString, value)
	}
	if fdu.mutation.CityCleared() {
		_spec.ClearField(fmdemands.FieldCity, field.TypeString)
	}
	if value, ok := fdu.mutation.Area(); ok {
		_spec.SetField(fmdemands.FieldArea, field.TypeString, value)
	}
	if fdu.mutation.AreaCleared() {
		_spec.ClearField(fmdemands.FieldArea, field.TypeString)
	}
	if value, ok := fdu.mutation.Street(); ok {
		_spec.SetField(fmdemands.FieldStreet, field.TypeString, value)
	}
	if fdu.mutation.StreetCleared() {
		_spec.ClearField(fmdemands.FieldStreet, field.TypeString)
	}
	if value, ok := fdu.mutation.Message(); ok {
		_spec.SetField(fmdemands.FieldMessage, field.TypeString, value)
	}
	if fdu.mutation.MessageCleared() {
		_spec.ClearField(fmdemands.FieldMessage, field.TypeString)
	}
	if value, ok := fdu.mutation.Creator(); ok {
		_spec.SetField(fmdemands.FieldCreator, field.TypeString, value)
	}
	if fdu.mutation.CreatorCleared() {
		_spec.ClearField(fmdemands.FieldCreator, field.TypeString)
	}
	if value, ok := fdu.mutation.CreatedTime(); ok {
		_spec.SetField(fmdemands.FieldCreatedTime, field.TypeTime, value)
	}
	if fdu.mutation.CreatedTimeCleared() {
		_spec.ClearField(fmdemands.FieldCreatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fmdemands.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fdu.mutation.done = true
	return n, nil
}

// FmDemandsUpdateOne is the builder for updating a single FmDemands entity.
type FmDemandsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FmDemandsMutation
}

// SetSupplier sets the "supplier" field.
func (fduo *FmDemandsUpdateOne) SetSupplier(s string) *FmDemandsUpdateOne {
	fduo.mutation.SetSupplier(s)
	return fduo
}

// SetNillableSupplier sets the "supplier" field if the given value is not nil.
func (fduo *FmDemandsUpdateOne) SetNillableSupplier(s *string) *FmDemandsUpdateOne {
	if s != nil {
		fduo.SetSupplier(*s)
	}
	return fduo
}

// ClearSupplier clears the value of the "supplier" field.
func (fduo *FmDemandsUpdateOne) ClearSupplier() *FmDemandsUpdateOne {
	fduo.mutation.ClearSupplier()
	return fduo
}

// SetUsername sets the "username" field.
func (fduo *FmDemandsUpdateOne) SetUsername(s string) *FmDemandsUpdateOne {
	fduo.mutation.SetUsername(s)
	return fduo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (fduo *FmDemandsUpdateOne) SetNillableUsername(s *string) *FmDemandsUpdateOne {
	if s != nil {
		fduo.SetUsername(*s)
	}
	return fduo
}

// ClearUsername clears the value of the "username" field.
func (fduo *FmDemandsUpdateOne) ClearUsername() *FmDemandsUpdateOne {
	fduo.mutation.ClearUsername()
	return fduo
}

// SetPhonenum sets the "phonenum" field.
func (fduo *FmDemandsUpdateOne) SetPhonenum(s string) *FmDemandsUpdateOne {
	fduo.mutation.SetPhonenum(s)
	return fduo
}

// SetNillablePhonenum sets the "phonenum" field if the given value is not nil.
func (fduo *FmDemandsUpdateOne) SetNillablePhonenum(s *string) *FmDemandsUpdateOne {
	if s != nil {
		fduo.SetPhonenum(*s)
	}
	return fduo
}

// ClearPhonenum clears the value of the "phonenum" field.
func (fduo *FmDemandsUpdateOne) ClearPhonenum() *FmDemandsUpdateOne {
	fduo.mutation.ClearPhonenum()
	return fduo
}

// SetEmail sets the "email" field.
func (fduo *FmDemandsUpdateOne) SetEmail(s string) *FmDemandsUpdateOne {
	fduo.mutation.SetEmail(s)
	return fduo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (fduo *FmDemandsUpdateOne) SetNillableEmail(s *string) *FmDemandsUpdateOne {
	if s != nil {
		fduo.SetEmail(*s)
	}
	return fduo
}

// ClearEmail clears the value of the "email" field.
func (fduo *FmDemandsUpdateOne) ClearEmail() *FmDemandsUpdateOne {
	fduo.mutation.ClearEmail()
	return fduo
}

// SetProvince sets the "province" field.
func (fduo *FmDemandsUpdateOne) SetProvince(s string) *FmDemandsUpdateOne {
	fduo.mutation.SetProvince(s)
	return fduo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (fduo *FmDemandsUpdateOne) SetNillableProvince(s *string) *FmDemandsUpdateOne {
	if s != nil {
		fduo.SetProvince(*s)
	}
	return fduo
}

// ClearProvince clears the value of the "province" field.
func (fduo *FmDemandsUpdateOne) ClearProvince() *FmDemandsUpdateOne {
	fduo.mutation.ClearProvince()
	return fduo
}

// SetCity sets the "city" field.
func (fduo *FmDemandsUpdateOne) SetCity(s string) *FmDemandsUpdateOne {
	fduo.mutation.SetCity(s)
	return fduo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (fduo *FmDemandsUpdateOne) SetNillableCity(s *string) *FmDemandsUpdateOne {
	if s != nil {
		fduo.SetCity(*s)
	}
	return fduo
}

// ClearCity clears the value of the "city" field.
func (fduo *FmDemandsUpdateOne) ClearCity() *FmDemandsUpdateOne {
	fduo.mutation.ClearCity()
	return fduo
}

// SetArea sets the "area" field.
func (fduo *FmDemandsUpdateOne) SetArea(s string) *FmDemandsUpdateOne {
	fduo.mutation.SetArea(s)
	return fduo
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (fduo *FmDemandsUpdateOne) SetNillableArea(s *string) *FmDemandsUpdateOne {
	if s != nil {
		fduo.SetArea(*s)
	}
	return fduo
}

// ClearArea clears the value of the "area" field.
func (fduo *FmDemandsUpdateOne) ClearArea() *FmDemandsUpdateOne {
	fduo.mutation.ClearArea()
	return fduo
}

// SetStreet sets the "street" field.
func (fduo *FmDemandsUpdateOne) SetStreet(s string) *FmDemandsUpdateOne {
	fduo.mutation.SetStreet(s)
	return fduo
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (fduo *FmDemandsUpdateOne) SetNillableStreet(s *string) *FmDemandsUpdateOne {
	if s != nil {
		fduo.SetStreet(*s)
	}
	return fduo
}

// ClearStreet clears the value of the "street" field.
func (fduo *FmDemandsUpdateOne) ClearStreet() *FmDemandsUpdateOne {
	fduo.mutation.ClearStreet()
	return fduo
}

// SetMessage sets the "message" field.
func (fduo *FmDemandsUpdateOne) SetMessage(s string) *FmDemandsUpdateOne {
	fduo.mutation.SetMessage(s)
	return fduo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (fduo *FmDemandsUpdateOne) SetNillableMessage(s *string) *FmDemandsUpdateOne {
	if s != nil {
		fduo.SetMessage(*s)
	}
	return fduo
}

// ClearMessage clears the value of the "message" field.
func (fduo *FmDemandsUpdateOne) ClearMessage() *FmDemandsUpdateOne {
	fduo.mutation.ClearMessage()
	return fduo
}

// SetCreator sets the "creator" field.
func (fduo *FmDemandsUpdateOne) SetCreator(s string) *FmDemandsUpdateOne {
	fduo.mutation.SetCreator(s)
	return fduo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (fduo *FmDemandsUpdateOne) SetNillableCreator(s *string) *FmDemandsUpdateOne {
	if s != nil {
		fduo.SetCreator(*s)
	}
	return fduo
}

// ClearCreator clears the value of the "creator" field.
func (fduo *FmDemandsUpdateOne) ClearCreator() *FmDemandsUpdateOne {
	fduo.mutation.ClearCreator()
	return fduo
}

// SetCreatedTime sets the "created_time" field.
func (fduo *FmDemandsUpdateOne) SetCreatedTime(t time.Time) *FmDemandsUpdateOne {
	fduo.mutation.SetCreatedTime(t)
	return fduo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fduo *FmDemandsUpdateOne) SetNillableCreatedTime(t *time.Time) *FmDemandsUpdateOne {
	if t != nil {
		fduo.SetCreatedTime(*t)
	}
	return fduo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (fduo *FmDemandsUpdateOne) ClearCreatedTime() *FmDemandsUpdateOne {
	fduo.mutation.ClearCreatedTime()
	return fduo
}

// Mutation returns the FmDemandsMutation object of the builder.
func (fduo *FmDemandsUpdateOne) Mutation() *FmDemandsMutation {
	return fduo.mutation
}

// Where appends a list predicates to the FmDemandsUpdate builder.
func (fduo *FmDemandsUpdateOne) Where(ps ...predicate.FmDemands) *FmDemandsUpdateOne {
	fduo.mutation.Where(ps...)
	return fduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fduo *FmDemandsUpdateOne) Select(field string, fields ...string) *FmDemandsUpdateOne {
	fduo.fields = append([]string{field}, fields...)
	return fduo
}

// Save executes the query and returns the updated FmDemands entity.
func (fduo *FmDemandsUpdateOne) Save(ctx context.Context) (*FmDemands, error) {
	return withHooks(ctx, fduo.sqlSave, fduo.mutation, fduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fduo *FmDemandsUpdateOne) SaveX(ctx context.Context) *FmDemands {
	node, err := fduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fduo *FmDemandsUpdateOne) Exec(ctx context.Context) error {
	_, err := fduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fduo *FmDemandsUpdateOne) ExecX(ctx context.Context) {
	if err := fduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fduo *FmDemandsUpdateOne) check() error {
	if v, ok := fduo.mutation.Supplier(); ok {
		if err := fmdemands.SupplierValidator(v); err != nil {
			return &ValidationError{Name: "supplier", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.supplier": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.Username(); ok {
		if err := fmdemands.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.username": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.Phonenum(); ok {
		if err := fmdemands.PhonenumValidator(v); err != nil {
			return &ValidationError{Name: "phonenum", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.phonenum": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.Email(); ok {
		if err := fmdemands.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.email": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.Province(); ok {
		if err := fmdemands.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "province", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.province": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.City(); ok {
		if err := fmdemands.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.city": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.Area(); ok {
		if err := fmdemands.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.area": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.Street(); ok {
		if err := fmdemands.StreetValidator(v); err != nil {
			return &ValidationError{Name: "street", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.street": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.Message(); ok {
		if err := fmdemands.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.message": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.Creator(); ok {
		if err := fmdemands.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.creator": %w`, err)}
		}
	}
	return nil
}

func (fduo *FmDemandsUpdateOne) sqlSave(ctx context.Context) (_node *FmDemands, err error) {
	if err := fduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fmdemands.Table, fmdemands.Columns, sqlgraph.NewFieldSpec(fmdemands.FieldID, field.TypeInt64))
	id, ok := fduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "FmDemands.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fmdemands.FieldID)
		for _, f := range fields {
			if !fmdemands.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != fmdemands.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fduo.mutation.Supplier(); ok {
		_spec.SetField(fmdemands.FieldSupplier, field.TypeString, value)
	}
	if fduo.mutation.SupplierCleared() {
		_spec.ClearField(fmdemands.FieldSupplier, field.TypeString)
	}
	if value, ok := fduo.mutation.Username(); ok {
		_spec.SetField(fmdemands.FieldUsername, field.TypeString, value)
	}
	if fduo.mutation.UsernameCleared() {
		_spec.ClearField(fmdemands.FieldUsername, field.TypeString)
	}
	if value, ok := fduo.mutation.Phonenum(); ok {
		_spec.SetField(fmdemands.FieldPhonenum, field.TypeString, value)
	}
	if fduo.mutation.PhonenumCleared() {
		_spec.ClearField(fmdemands.FieldPhonenum, field.TypeString)
	}
	if value, ok := fduo.mutation.Email(); ok {
		_spec.SetField(fmdemands.FieldEmail, field.TypeString, value)
	}
	if fduo.mutation.EmailCleared() {
		_spec.ClearField(fmdemands.FieldEmail, field.TypeString)
	}
	if value, ok := fduo.mutation.Province(); ok {
		_spec.SetField(fmdemands.FieldProvince, field.TypeString, value)
	}
	if fduo.mutation.ProvinceCleared() {
		_spec.ClearField(fmdemands.FieldProvince, field.TypeString)
	}
	if value, ok := fduo.mutation.City(); ok {
		_spec.SetField(fmdemands.FieldCity, field.TypeString, value)
	}
	if fduo.mutation.CityCleared() {
		_spec.ClearField(fmdemands.FieldCity, field.TypeString)
	}
	if value, ok := fduo.mutation.Area(); ok {
		_spec.SetField(fmdemands.FieldArea, field.TypeString, value)
	}
	if fduo.mutation.AreaCleared() {
		_spec.ClearField(fmdemands.FieldArea, field.TypeString)
	}
	if value, ok := fduo.mutation.Street(); ok {
		_spec.SetField(fmdemands.FieldStreet, field.TypeString, value)
	}
	if fduo.mutation.StreetCleared() {
		_spec.ClearField(fmdemands.FieldStreet, field.TypeString)
	}
	if value, ok := fduo.mutation.Message(); ok {
		_spec.SetField(fmdemands.FieldMessage, field.TypeString, value)
	}
	if fduo.mutation.MessageCleared() {
		_spec.ClearField(fmdemands.FieldMessage, field.TypeString)
	}
	if value, ok := fduo.mutation.Creator(); ok {
		_spec.SetField(fmdemands.FieldCreator, field.TypeString, value)
	}
	if fduo.mutation.CreatorCleared() {
		_spec.ClearField(fmdemands.FieldCreator, field.TypeString)
	}
	if value, ok := fduo.mutation.CreatedTime(); ok {
		_spec.SetField(fmdemands.FieldCreatedTime, field.TypeTime, value)
	}
	if fduo.mutation.CreatedTimeCleared() {
		_spec.ClearField(fmdemands.FieldCreatedTime, field.TypeTime)
	}
	_node = &FmDemands{config: fduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fmdemands.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fduo.mutation.done = true
	return _node, nil
}
