// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/alerts"
	"fmcam/systems/genclients/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AlertsUpdate is the builder for updating Alerts entities.
type AlertsUpdate struct {
	config
	hooks    []Hook
	mutation *AlertsMutation
}

// Where appends a list predicates to the AlertsUpdate builder.
func (au *AlertsUpdate) Where(ps ...predicate.Alerts) *AlertsUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCaptureLogID sets the "capture_log_id" field.
func (au *AlertsUpdate) SetCaptureLogID(i int64) *AlertsUpdate {
	au.mutation.ResetCaptureLogID()
	au.mutation.SetCaptureLogID(i)
	return au
}

// SetNillableCaptureLogID sets the "capture_log_id" field if the given value is not nil.
func (au *AlertsUpdate) SetNillableCaptureLogID(i *int64) *AlertsUpdate {
	if i != nil {
		au.SetCaptureLogID(*i)
	}
	return au
}

// AddCaptureLogID adds i to the "capture_log_id" field.
func (au *AlertsUpdate) AddCaptureLogID(i int64) *AlertsUpdate {
	au.mutation.AddCaptureLogID(i)
	return au
}

// SetDeviceID sets the "device_id" field.
func (au *AlertsUpdate) SetDeviceID(i int64) *AlertsUpdate {
	au.mutation.ResetDeviceID()
	au.mutation.SetDeviceID(i)
	return au
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (au *AlertsUpdate) SetNillableDeviceID(i *int64) *AlertsUpdate {
	if i != nil {
		au.SetDeviceID(*i)
	}
	return au
}

// AddDeviceID adds i to the "device_id" field.
func (au *AlertsUpdate) AddDeviceID(i int64) *AlertsUpdate {
	au.mutation.AddDeviceID(i)
	return au
}

// SetAlertLevel sets the "alert_level" field.
func (au *AlertsUpdate) SetAlertLevel(i int8) *AlertsUpdate {
	au.mutation.ResetAlertLevel()
	au.mutation.SetAlertLevel(i)
	return au
}

// SetNillableAlertLevel sets the "alert_level" field if the given value is not nil.
func (au *AlertsUpdate) SetNillableAlertLevel(i *int8) *AlertsUpdate {
	if i != nil {
		au.SetAlertLevel(*i)
	}
	return au
}

// AddAlertLevel adds i to the "alert_level" field.
func (au *AlertsUpdate) AddAlertLevel(i int8) *AlertsUpdate {
	au.mutation.AddAlertLevel(i)
	return au
}

// SetStatus sets the "status" field.
func (au *AlertsUpdate) SetStatus(i int8) *AlertsUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(i)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AlertsUpdate) SetNillableStatus(i *int8) *AlertsUpdate {
	if i != nil {
		au.SetStatus(*i)
	}
	return au
}

// AddStatus adds i to the "status" field.
func (au *AlertsUpdate) AddStatus(i int8) *AlertsUpdate {
	au.mutation.AddStatus(i)
	return au
}

// SetFmUserID sets the "fm_user_id" field.
func (au *AlertsUpdate) SetFmUserID(i int64) *AlertsUpdate {
	au.mutation.ResetFmUserID()
	au.mutation.SetFmUserID(i)
	return au
}

// SetNillableFmUserID sets the "fm_user_id" field if the given value is not nil.
func (au *AlertsUpdate) SetNillableFmUserID(i *int64) *AlertsUpdate {
	if i != nil {
		au.SetFmUserID(*i)
	}
	return au
}

// AddFmUserID adds i to the "fm_user_id" field.
func (au *AlertsUpdate) AddFmUserID(i int64) *AlertsUpdate {
	au.mutation.AddFmUserID(i)
	return au
}

// ClearFmUserID clears the value of the "fm_user_id" field.
func (au *AlertsUpdate) ClearFmUserID() *AlertsUpdate {
	au.mutation.ClearFmUserID()
	return au
}

// SetHandledTime sets the "handled_time" field.
func (au *AlertsUpdate) SetHandledTime(t time.Time) *AlertsUpdate {
	au.mutation.SetHandledTime(t)
	return au
}

// SetNillableHandledTime sets the "handled_time" field if the given value is not nil.
func (au *AlertsUpdate) SetNillableHandledTime(t *time.Time) *AlertsUpdate {
	if t != nil {
		au.SetHandledTime(*t)
	}
	return au
}

// ClearHandledTime clears the value of the "handled_time" field.
func (au *AlertsUpdate) ClearHandledTime() *AlertsUpdate {
	au.mutation.ClearHandledTime()
	return au
}

// SetRemarks sets the "remarks" field.
func (au *AlertsUpdate) SetRemarks(s string) *AlertsUpdate {
	au.mutation.SetRemarks(s)
	return au
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (au *AlertsUpdate) SetNillableRemarks(s *string) *AlertsUpdate {
	if s != nil {
		au.SetRemarks(*s)
	}
	return au
}

// ClearRemarks clears the value of the "remarks" field.
func (au *AlertsUpdate) ClearRemarks() *AlertsUpdate {
	au.mutation.ClearRemarks()
	return au
}

// SetCreatedTime sets the "created_time" field.
func (au *AlertsUpdate) SetCreatedTime(t time.Time) *AlertsUpdate {
	au.mutation.SetCreatedTime(t)
	return au
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (au *AlertsUpdate) SetNillableCreatedTime(t *time.Time) *AlertsUpdate {
	if t != nil {
		au.SetCreatedTime(*t)
	}
	return au
}

// ClearCreatedTime clears the value of the "created_time" field.
func (au *AlertsUpdate) ClearCreatedTime() *AlertsUpdate {
	au.mutation.ClearCreatedTime()
	return au
}

// Mutation returns the AlertsMutation object of the builder.
func (au *AlertsUpdate) Mutation() *AlertsMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AlertsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AlertsUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AlertsUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AlertsUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AlertsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(alerts.Table, alerts.Columns, sqlgraph.NewFieldSpec(alerts.FieldID, field.TypeInt64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CaptureLogID(); ok {
		_spec.SetField(alerts.FieldCaptureLogID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedCaptureLogID(); ok {
		_spec.AddField(alerts.FieldCaptureLogID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.DeviceID(); ok {
		_spec.SetField(alerts.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedDeviceID(); ok {
		_spec.AddField(alerts.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AlertLevel(); ok {
		_spec.SetField(alerts.FieldAlertLevel, field.TypeInt8, value)
	}
	if value, ok := au.mutation.AddedAlertLevel(); ok {
		_spec.AddField(alerts.FieldAlertLevel, field.TypeInt8, value)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(alerts.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.AddField(alerts.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := au.mutation.FmUserID(); ok {
		_spec.SetField(alerts.FieldFmUserID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedFmUserID(); ok {
		_spec.AddField(alerts.FieldFmUserID, field.TypeInt64, value)
	}
	if au.mutation.FmUserIDCleared() {
		_spec.ClearField(alerts.FieldFmUserID, field.TypeInt64)
	}
	if value, ok := au.mutation.HandledTime(); ok {
		_spec.SetField(alerts.FieldHandledTime, field.TypeTime, value)
	}
	if au.mutation.HandledTimeCleared() {
		_spec.ClearField(alerts.FieldHandledTime, field.TypeTime)
	}
	if value, ok := au.mutation.Remarks(); ok {
		_spec.SetField(alerts.FieldRemarks, field.TypeString, value)
	}
	if au.mutation.RemarksCleared() {
		_spec.ClearField(alerts.FieldRemarks, field.TypeString)
	}
	if value, ok := au.mutation.CreatedTime(); ok {
		_spec.SetField(alerts.FieldCreatedTime, field.TypeTime, value)
	}
	if au.mutation.CreatedTimeCleared() {
		_spec.ClearField(alerts.FieldCreatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alerts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AlertsUpdateOne is the builder for updating a single Alerts entity.
type AlertsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AlertsMutation
}

// SetCaptureLogID sets the "capture_log_id" field.
func (auo *AlertsUpdateOne) SetCaptureLogID(i int64) *AlertsUpdateOne {
	auo.mutation.ResetCaptureLogID()
	auo.mutation.SetCaptureLogID(i)
	return auo
}

// SetNillableCaptureLogID sets the "capture_log_id" field if the given value is not nil.
func (auo *AlertsUpdateOne) SetNillableCaptureLogID(i *int64) *AlertsUpdateOne {
	if i != nil {
		auo.SetCaptureLogID(*i)
	}
	return auo
}

// AddCaptureLogID adds i to the "capture_log_id" field.
func (auo *AlertsUpdateOne) AddCaptureLogID(i int64) *AlertsUpdateOne {
	auo.mutation.AddCaptureLogID(i)
	return auo
}

// SetDeviceID sets the "device_id" field.
func (auo *AlertsUpdateOne) SetDeviceID(i int64) *AlertsUpdateOne {
	auo.mutation.ResetDeviceID()
	auo.mutation.SetDeviceID(i)
	return auo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (auo *AlertsUpdateOne) SetNillableDeviceID(i *int64) *AlertsUpdateOne {
	if i != nil {
		auo.SetDeviceID(*i)
	}
	return auo
}

// AddDeviceID adds i to the "device_id" field.
func (auo *AlertsUpdateOne) AddDeviceID(i int64) *AlertsUpdateOne {
	auo.mutation.AddDeviceID(i)
	return auo
}

// SetAlertLevel sets the "alert_level" field.
func (auo *AlertsUpdateOne) SetAlertLevel(i int8) *AlertsUpdateOne {
	auo.mutation.ResetAlertLevel()
	auo.mutation.SetAlertLevel(i)
	return auo
}

// SetNillableAlertLevel sets the "alert_level" field if the given value is not nil.
func (auo *AlertsUpdateOne) SetNillableAlertLevel(i *int8) *AlertsUpdateOne {
	if i != nil {
		auo.SetAlertLevel(*i)
	}
	return auo
}

// AddAlertLevel adds i to the "alert_level" field.
func (auo *AlertsUpdateOne) AddAlertLevel(i int8) *AlertsUpdateOne {
	auo.mutation.AddAlertLevel(i)
	return auo
}

// SetStatus sets the "status" field.
func (auo *AlertsUpdateOne) SetStatus(i int8) *AlertsUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(i)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AlertsUpdateOne) SetNillableStatus(i *int8) *AlertsUpdateOne {
	if i != nil {
		auo.SetStatus(*i)
	}
	return auo
}

// AddStatus adds i to the "status" field.
func (auo *AlertsUpdateOne) AddStatus(i int8) *AlertsUpdateOne {
	auo.mutation.AddStatus(i)
	return auo
}

// SetFmUserID sets the "fm_user_id" field.
func (auo *AlertsUpdateOne) SetFmUserID(i int64) *AlertsUpdateOne {
	auo.mutation.ResetFmUserID()
	auo.mutation.SetFmUserID(i)
	return auo
}

// SetNillableFmUserID sets the "fm_user_id" field if the given value is not nil.
func (auo *AlertsUpdateOne) SetNillableFmUserID(i *int64) *AlertsUpdateOne {
	if i != nil {
		auo.SetFmUserID(*i)
	}
	return auo
}

// AddFmUserID adds i to the "fm_user_id" field.
func (auo *AlertsUpdateOne) AddFmUserID(i int64) *AlertsUpdateOne {
	auo.mutation.AddFmUserID(i)
	return auo
}

// ClearFmUserID clears the value of the "fm_user_id" field.
func (auo *AlertsUpdateOne) ClearFmUserID() *AlertsUpdateOne {
	auo.mutation.ClearFmUserID()
	return auo
}

// SetHandledTime sets the "handled_time" field.
func (auo *AlertsUpdateOne) SetHandledTime(t time.Time) *AlertsUpdateOne {
	auo.mutation.SetHandledTime(t)
	return auo
}

// SetNillableHandledTime sets the "handled_time" field if the given value is not nil.
func (auo *AlertsUpdateOne) SetNillableHandledTime(t *time.Time) *AlertsUpdateOne {
	if t != nil {
		auo.SetHandledTime(*t)
	}
	return auo
}

// ClearHandledTime clears the value of the "handled_time" field.
func (auo *AlertsUpdateOne) ClearHandledTime() *AlertsUpdateOne {
	auo.mutation.ClearHandledTime()
	return auo
}

// SetRemarks sets the "remarks" field.
func (auo *AlertsUpdateOne) SetRemarks(s string) *AlertsUpdateOne {
	auo.mutation.SetRemarks(s)
	return auo
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (auo *AlertsUpdateOne) SetNillableRemarks(s *string) *AlertsUpdateOne {
	if s != nil {
		auo.SetRemarks(*s)
	}
	return auo
}

// ClearRemarks clears the value of the "remarks" field.
func (auo *AlertsUpdateOne) ClearRemarks() *AlertsUpdateOne {
	auo.mutation.ClearRemarks()
	return auo
}

// SetCreatedTime sets the "created_time" field.
func (auo *AlertsUpdateOne) SetCreatedTime(t time.Time) *AlertsUpdateOne {
	auo.mutation.SetCreatedTime(t)
	return auo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (auo *AlertsUpdateOne) SetNillableCreatedTime(t *time.Time) *AlertsUpdateOne {
	if t != nil {
		auo.SetCreatedTime(*t)
	}
	return auo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (auo *AlertsUpdateOne) ClearCreatedTime() *AlertsUpdateOne {
	auo.mutation.ClearCreatedTime()
	return auo
}

// Mutation returns the AlertsMutation object of the builder.
func (auo *AlertsUpdateOne) Mutation() *AlertsMutation {
	return auo.mutation
}

// Where appends a list predicates to the AlertsUpdate builder.
func (auo *AlertsUpdateOne) Where(ps ...predicate.Alerts) *AlertsUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AlertsUpdateOne) Select(field string, fields ...string) *AlertsUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Alerts entity.
func (auo *AlertsUpdateOne) Save(ctx context.Context) (*Alerts, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AlertsUpdateOne) SaveX(ctx context.Context) *Alerts {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AlertsUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AlertsUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AlertsUpdateOne) sqlSave(ctx context.Context) (_node *Alerts, err error) {
	_spec := sqlgraph.NewUpdateSpec(alerts.Table, alerts.Columns, sqlgraph.NewFieldSpec(alerts.FieldID, field.TypeInt64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "Alerts.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, alerts.FieldID)
		for _, f := range fields {
			if !alerts.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != alerts.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CaptureLogID(); ok {
		_spec.SetField(alerts.FieldCaptureLogID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedCaptureLogID(); ok {
		_spec.AddField(alerts.FieldCaptureLogID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.DeviceID(); ok {
		_spec.SetField(alerts.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedDeviceID(); ok {
		_spec.AddField(alerts.FieldDeviceID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AlertLevel(); ok {
		_spec.SetField(alerts.FieldAlertLevel, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.AddedAlertLevel(); ok {
		_spec.AddField(alerts.FieldAlertLevel, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(alerts.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.AddField(alerts.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.FmUserID(); ok {
		_spec.SetField(alerts.FieldFmUserID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedFmUserID(); ok {
		_spec.AddField(alerts.FieldFmUserID, field.TypeInt64, value)
	}
	if auo.mutation.FmUserIDCleared() {
		_spec.ClearField(alerts.FieldFmUserID, field.TypeInt64)
	}
	if value, ok := auo.mutation.HandledTime(); ok {
		_spec.SetField(alerts.FieldHandledTime, field.TypeTime, value)
	}
	if auo.mutation.HandledTimeCleared() {
		_spec.ClearField(alerts.FieldHandledTime, field.TypeTime)
	}
	if value, ok := auo.mutation.Remarks(); ok {
		_spec.SetField(alerts.FieldRemarks, field.TypeString, value)
	}
	if auo.mutation.RemarksCleared() {
		_spec.ClearField(alerts.FieldRemarks, field.TypeString)
	}
	if value, ok := auo.mutation.CreatedTime(); ok {
		_spec.SetField(alerts.FieldCreatedTime, field.TypeTime, value)
	}
	if auo.mutation.CreatedTimeCleared() {
		_spec.ClearField(alerts.FieldCreatedTime, field.TypeTime)
	}
	_node = &Alerts{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alerts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
