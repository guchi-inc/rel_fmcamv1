// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/predicate"
	"fmcam/systems/genclients/temporaryface"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TemporaryFaceUpdate is the builder for updating TemporaryFace entities.
type TemporaryFaceUpdate struct {
	config
	hooks    []Hook
	mutation *TemporaryFaceMutation
}

// Where appends a list predicates to the TemporaryFaceUpdate builder.
func (tfu *TemporaryFaceUpdate) Where(ps ...predicate.TemporaryFace) *TemporaryFaceUpdate {
	tfu.mutation.Where(ps...)
	return tfu
}

// SetProfileID sets the "profile_id" field.
func (tfu *TemporaryFaceUpdate) SetProfileID(i int64) *TemporaryFaceUpdate {
	tfu.mutation.ResetProfileID()
	tfu.mutation.SetProfileID(i)
	return tfu
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (tfu *TemporaryFaceUpdate) SetNillableProfileID(i *int64) *TemporaryFaceUpdate {
	if i != nil {
		tfu.SetProfileID(*i)
	}
	return tfu
}

// AddProfileID adds i to the "profile_id" field.
func (tfu *TemporaryFaceUpdate) AddProfileID(i int64) *TemporaryFaceUpdate {
	tfu.mutation.AddProfileID(i)
	return tfu
}

// ClearProfileID clears the value of the "profile_id" field.
func (tfu *TemporaryFaceUpdate) ClearProfileID() *TemporaryFaceUpdate {
	tfu.mutation.ClearProfileID()
	return tfu
}

// SetFaceEmbedding sets the "face_embedding" field.
func (tfu *TemporaryFaceUpdate) SetFaceEmbedding(b []byte) *TemporaryFaceUpdate {
	tfu.mutation.SetFaceEmbedding(b)
	return tfu
}

// SetImgURL sets the "img_url" field.
func (tfu *TemporaryFaceUpdate) SetImgURL(s string) *TemporaryFaceUpdate {
	tfu.mutation.SetImgURL(s)
	return tfu
}

// SetNillableImgURL sets the "img_url" field if the given value is not nil.
func (tfu *TemporaryFaceUpdate) SetNillableImgURL(s *string) *TemporaryFaceUpdate {
	if s != nil {
		tfu.SetImgURL(*s)
	}
	return tfu
}

// ClearImgURL clears the value of the "img_url" field.
func (tfu *TemporaryFaceUpdate) ClearImgURL() *TemporaryFaceUpdate {
	tfu.mutation.ClearImgURL()
	return tfu
}

// SetUpdatedLocation sets the "updated_location" field.
func (tfu *TemporaryFaceUpdate) SetUpdatedLocation(s string) *TemporaryFaceUpdate {
	tfu.mutation.SetUpdatedLocation(s)
	return tfu
}

// SetNillableUpdatedLocation sets the "updated_location" field if the given value is not nil.
func (tfu *TemporaryFaceUpdate) SetNillableUpdatedLocation(s *string) *TemporaryFaceUpdate {
	if s != nil {
		tfu.SetUpdatedLocation(*s)
	}
	return tfu
}

// ClearUpdatedLocation clears the value of the "updated_location" field.
func (tfu *TemporaryFaceUpdate) ClearUpdatedLocation() *TemporaryFaceUpdate {
	tfu.mutation.ClearUpdatedLocation()
	return tfu
}

// SetCaptureCount sets the "capture_count" field.
func (tfu *TemporaryFaceUpdate) SetCaptureCount(i int) *TemporaryFaceUpdate {
	tfu.mutation.ResetCaptureCount()
	tfu.mutation.SetCaptureCount(i)
	return tfu
}

// SetNillableCaptureCount sets the "capture_count" field if the given value is not nil.
func (tfu *TemporaryFaceUpdate) SetNillableCaptureCount(i *int) *TemporaryFaceUpdate {
	if i != nil {
		tfu.SetCaptureCount(*i)
	}
	return tfu
}

// AddCaptureCount adds i to the "capture_count" field.
func (tfu *TemporaryFaceUpdate) AddCaptureCount(i int) *TemporaryFaceUpdate {
	tfu.mutation.AddCaptureCount(i)
	return tfu
}

// SetCreatedTime sets the "created_time" field.
func (tfu *TemporaryFaceUpdate) SetCreatedTime(t time.Time) *TemporaryFaceUpdate {
	tfu.mutation.SetCreatedTime(t)
	return tfu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (tfu *TemporaryFaceUpdate) SetNillableCreatedTime(t *time.Time) *TemporaryFaceUpdate {
	if t != nil {
		tfu.SetCreatedTime(*t)
	}
	return tfu
}

// ClearCreatedTime clears the value of the "created_time" field.
func (tfu *TemporaryFaceUpdate) ClearCreatedTime() *TemporaryFaceUpdate {
	tfu.mutation.ClearCreatedTime()
	return tfu
}

// SetUpdatedTime sets the "updated_time" field.
func (tfu *TemporaryFaceUpdate) SetUpdatedTime(t time.Time) *TemporaryFaceUpdate {
	tfu.mutation.SetUpdatedTime(t)
	return tfu
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (tfu *TemporaryFaceUpdate) SetNillableUpdatedTime(t *time.Time) *TemporaryFaceUpdate {
	if t != nil {
		tfu.SetUpdatedTime(*t)
	}
	return tfu
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (tfu *TemporaryFaceUpdate) ClearUpdatedTime() *TemporaryFaceUpdate {
	tfu.mutation.ClearUpdatedTime()
	return tfu
}

// SetExpiresTime sets the "expires_time" field.
func (tfu *TemporaryFaceUpdate) SetExpiresTime(t time.Time) *TemporaryFaceUpdate {
	tfu.mutation.SetExpiresTime(t)
	return tfu
}

// SetNillableExpiresTime sets the "expires_time" field if the given value is not nil.
func (tfu *TemporaryFaceUpdate) SetNillableExpiresTime(t *time.Time) *TemporaryFaceUpdate {
	if t != nil {
		tfu.SetExpiresTime(*t)
	}
	return tfu
}

// Mutation returns the TemporaryFaceMutation object of the builder.
func (tfu *TemporaryFaceUpdate) Mutation() *TemporaryFaceMutation {
	return tfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tfu *TemporaryFaceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tfu.sqlSave, tfu.mutation, tfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfu *TemporaryFaceUpdate) SaveX(ctx context.Context) int {
	affected, err := tfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tfu *TemporaryFaceUpdate) Exec(ctx context.Context) error {
	_, err := tfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfu *TemporaryFaceUpdate) ExecX(ctx context.Context) {
	if err := tfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfu *TemporaryFaceUpdate) check() error {
	if v, ok := tfu.mutation.FaceEmbedding(); ok {
		if err := temporaryface.FaceEmbeddingValidator(v); err != nil {
			return &ValidationError{Name: "face_embedding", err: fmt.Errorf(`genclients: validator failed for field "TemporaryFace.face_embedding": %w`, err)}
		}
	}
	if v, ok := tfu.mutation.ImgURL(); ok {
		if err := temporaryface.ImgURLValidator(v); err != nil {
			return &ValidationError{Name: "img_url", err: fmt.Errorf(`genclients: validator failed for field "TemporaryFace.img_url": %w`, err)}
		}
	}
	if v, ok := tfu.mutation.UpdatedLocation(); ok {
		if err := temporaryface.UpdatedLocationValidator(v); err != nil {
			return &ValidationError{Name: "updated_location", err: fmt.Errorf(`genclients: validator failed for field "TemporaryFace.updated_location": %w`, err)}
		}
	}
	return nil
}

func (tfu *TemporaryFaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(temporaryface.Table, temporaryface.Columns, sqlgraph.NewFieldSpec(temporaryface.FieldID, field.TypeInt64))
	if ps := tfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfu.mutation.ProfileID(); ok {
		_spec.SetField(temporaryface.FieldProfileID, field.TypeInt64, value)
	}
	if value, ok := tfu.mutation.AddedProfileID(); ok {
		_spec.AddField(temporaryface.FieldProfileID, field.TypeInt64, value)
	}
	if tfu.mutation.ProfileIDCleared() {
		_spec.ClearField(temporaryface.FieldProfileID, field.TypeInt64)
	}
	if value, ok := tfu.mutation.FaceEmbedding(); ok {
		_spec.SetField(temporaryface.FieldFaceEmbedding, field.TypeBytes, value)
	}
	if value, ok := tfu.mutation.ImgURL(); ok {
		_spec.SetField(temporaryface.FieldImgURL, field.TypeString, value)
	}
	if tfu.mutation.ImgURLCleared() {
		_spec.ClearField(temporaryface.FieldImgURL, field.TypeString)
	}
	if value, ok := tfu.mutation.UpdatedLocation(); ok {
		_spec.SetField(temporaryface.FieldUpdatedLocation, field.TypeString, value)
	}
	if tfu.mutation.UpdatedLocationCleared() {
		_spec.ClearField(temporaryface.FieldUpdatedLocation, field.TypeString)
	}
	if value, ok := tfu.mutation.CaptureCount(); ok {
		_spec.SetField(temporaryface.FieldCaptureCount, field.TypeInt, value)
	}
	if value, ok := tfu.mutation.AddedCaptureCount(); ok {
		_spec.AddField(temporaryface.FieldCaptureCount, field.TypeInt, value)
	}
	if value, ok := tfu.mutation.CreatedTime(); ok {
		_spec.SetField(temporaryface.FieldCreatedTime, field.TypeTime, value)
	}
	if tfu.mutation.CreatedTimeCleared() {
		_spec.ClearField(temporaryface.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := tfu.mutation.UpdatedTime(); ok {
		_spec.SetField(temporaryface.FieldUpdatedTime, field.TypeTime, value)
	}
	if tfu.mutation.UpdatedTimeCleared() {
		_spec.ClearField(temporaryface.FieldUpdatedTime, field.TypeTime)
	}
	if value, ok := tfu.mutation.ExpiresTime(); ok {
		_spec.SetField(temporaryface.FieldExpiresTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{temporaryface.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tfu.mutation.done = true
	return n, nil
}

// TemporaryFaceUpdateOne is the builder for updating a single TemporaryFace entity.
type TemporaryFaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TemporaryFaceMutation
}

// SetProfileID sets the "profile_id" field.
func (tfuo *TemporaryFaceUpdateOne) SetProfileID(i int64) *TemporaryFaceUpdateOne {
	tfuo.mutation.ResetProfileID()
	tfuo.mutation.SetProfileID(i)
	return tfuo
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (tfuo *TemporaryFaceUpdateOne) SetNillableProfileID(i *int64) *TemporaryFaceUpdateOne {
	if i != nil {
		tfuo.SetProfileID(*i)
	}
	return tfuo
}

// AddProfileID adds i to the "profile_id" field.
func (tfuo *TemporaryFaceUpdateOne) AddProfileID(i int64) *TemporaryFaceUpdateOne {
	tfuo.mutation.AddProfileID(i)
	return tfuo
}

// ClearProfileID clears the value of the "profile_id" field.
func (tfuo *TemporaryFaceUpdateOne) ClearProfileID() *TemporaryFaceUpdateOne {
	tfuo.mutation.ClearProfileID()
	return tfuo
}

// SetFaceEmbedding sets the "face_embedding" field.
func (tfuo *TemporaryFaceUpdateOne) SetFaceEmbedding(b []byte) *TemporaryFaceUpdateOne {
	tfuo.mutation.SetFaceEmbedding(b)
	return tfuo
}

// SetImgURL sets the "img_url" field.
func (tfuo *TemporaryFaceUpdateOne) SetImgURL(s string) *TemporaryFaceUpdateOne {
	tfuo.mutation.SetImgURL(s)
	return tfuo
}

// SetNillableImgURL sets the "img_url" field if the given value is not nil.
func (tfuo *TemporaryFaceUpdateOne) SetNillableImgURL(s *string) *TemporaryFaceUpdateOne {
	if s != nil {
		tfuo.SetImgURL(*s)
	}
	return tfuo
}

// ClearImgURL clears the value of the "img_url" field.
func (tfuo *TemporaryFaceUpdateOne) ClearImgURL() *TemporaryFaceUpdateOne {
	tfuo.mutation.ClearImgURL()
	return tfuo
}

// SetUpdatedLocation sets the "updated_location" field.
func (tfuo *TemporaryFaceUpdateOne) SetUpdatedLocation(s string) *TemporaryFaceUpdateOne {
	tfuo.mutation.SetUpdatedLocation(s)
	return tfuo
}

// SetNillableUpdatedLocation sets the "updated_location" field if the given value is not nil.
func (tfuo *TemporaryFaceUpdateOne) SetNillableUpdatedLocation(s *string) *TemporaryFaceUpdateOne {
	if s != nil {
		tfuo.SetUpdatedLocation(*s)
	}
	return tfuo
}

// ClearUpdatedLocation clears the value of the "updated_location" field.
func (tfuo *TemporaryFaceUpdateOne) ClearUpdatedLocation() *TemporaryFaceUpdateOne {
	tfuo.mutation.ClearUpdatedLocation()
	return tfuo
}

// SetCaptureCount sets the "capture_count" field.
func (tfuo *TemporaryFaceUpdateOne) SetCaptureCount(i int) *TemporaryFaceUpdateOne {
	tfuo.mutation.ResetCaptureCount()
	tfuo.mutation.SetCaptureCount(i)
	return tfuo
}

// SetNillableCaptureCount sets the "capture_count" field if the given value is not nil.
func (tfuo *TemporaryFaceUpdateOne) SetNillableCaptureCount(i *int) *TemporaryFaceUpdateOne {
	if i != nil {
		tfuo.SetCaptureCount(*i)
	}
	return tfuo
}

// AddCaptureCount adds i to the "capture_count" field.
func (tfuo *TemporaryFaceUpdateOne) AddCaptureCount(i int) *TemporaryFaceUpdateOne {
	tfuo.mutation.AddCaptureCount(i)
	return tfuo
}

// SetCreatedTime sets the "created_time" field.
func (tfuo *TemporaryFaceUpdateOne) SetCreatedTime(t time.Time) *TemporaryFaceUpdateOne {
	tfuo.mutation.SetCreatedTime(t)
	return tfuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (tfuo *TemporaryFaceUpdateOne) SetNillableCreatedTime(t *time.Time) *TemporaryFaceUpdateOne {
	if t != nil {
		tfuo.SetCreatedTime(*t)
	}
	return tfuo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (tfuo *TemporaryFaceUpdateOne) ClearCreatedTime() *TemporaryFaceUpdateOne {
	tfuo.mutation.ClearCreatedTime()
	return tfuo
}

// SetUpdatedTime sets the "updated_time" field.
func (tfuo *TemporaryFaceUpdateOne) SetUpdatedTime(t time.Time) *TemporaryFaceUpdateOne {
	tfuo.mutation.SetUpdatedTime(t)
	return tfuo
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (tfuo *TemporaryFaceUpdateOne) SetNillableUpdatedTime(t *time.Time) *TemporaryFaceUpdateOne {
	if t != nil {
		tfuo.SetUpdatedTime(*t)
	}
	return tfuo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (tfuo *TemporaryFaceUpdateOne) ClearUpdatedTime() *TemporaryFaceUpdateOne {
	tfuo.mutation.ClearUpdatedTime()
	return tfuo
}

// SetExpiresTime sets the "expires_time" field.
func (tfuo *TemporaryFaceUpdateOne) SetExpiresTime(t time.Time) *TemporaryFaceUpdateOne {
	tfuo.mutation.SetExpiresTime(t)
	return tfuo
}

// SetNillableExpiresTime sets the "expires_time" field if the given value is not nil.
func (tfuo *TemporaryFaceUpdateOne) SetNillableExpiresTime(t *time.Time) *TemporaryFaceUpdateOne {
	if t != nil {
		tfuo.SetExpiresTime(*t)
	}
	return tfuo
}

// Mutation returns the TemporaryFaceMutation object of the builder.
func (tfuo *TemporaryFaceUpdateOne) Mutation() *TemporaryFaceMutation {
	return tfuo.mutation
}

// Where appends a list predicates to the TemporaryFaceUpdate builder.
func (tfuo *TemporaryFaceUpdateOne) Where(ps ...predicate.TemporaryFace) *TemporaryFaceUpdateOne {
	tfuo.mutation.Where(ps...)
	return tfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tfuo *TemporaryFaceUpdateOne) Select(field string, fields ...string) *TemporaryFaceUpdateOne {
	tfuo.fields = append([]string{field}, fields...)
	return tfuo
}

// Save executes the query and returns the updated TemporaryFace entity.
func (tfuo *TemporaryFaceUpdateOne) Save(ctx context.Context) (*TemporaryFace, error) {
	return withHooks(ctx, tfuo.sqlSave, tfuo.mutation, tfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfuo *TemporaryFaceUpdateOne) SaveX(ctx context.Context) *TemporaryFace {
	node, err := tfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tfuo *TemporaryFaceUpdateOne) Exec(ctx context.Context) error {
	_, err := tfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfuo *TemporaryFaceUpdateOne) ExecX(ctx context.Context) {
	if err := tfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfuo *TemporaryFaceUpdateOne) check() error {
	if v, ok := tfuo.mutation.FaceEmbedding(); ok {
		if err := temporaryface.FaceEmbeddingValidator(v); err != nil {
			return &ValidationError{Name: "face_embedding", err: fmt.Errorf(`genclients: validator failed for field "TemporaryFace.face_embedding": %w`, err)}
		}
	}
	if v, ok := tfuo.mutation.ImgURL(); ok {
		if err := temporaryface.ImgURLValidator(v); err != nil {
			return &ValidationError{Name: "img_url", err: fmt.Errorf(`genclients: validator failed for field "TemporaryFace.img_url": %w`, err)}
		}
	}
	if v, ok := tfuo.mutation.UpdatedLocation(); ok {
		if err := temporaryface.UpdatedLocationValidator(v); err != nil {
			return &ValidationError{Name: "updated_location", err: fmt.Errorf(`genclients: validator failed for field "TemporaryFace.updated_location": %w`, err)}
		}
	}
	return nil
}

func (tfuo *TemporaryFaceUpdateOne) sqlSave(ctx context.Context) (_node *TemporaryFace, err error) {
	if err := tfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(temporaryface.Table, temporaryface.Columns, sqlgraph.NewFieldSpec(temporaryface.FieldID, field.TypeInt64))
	id, ok := tfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "TemporaryFace.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, temporaryface.FieldID)
		for _, f := range fields {
			if !temporaryface.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != temporaryface.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfuo.mutation.ProfileID(); ok {
		_spec.SetField(temporaryface.FieldProfileID, field.TypeInt64, value)
	}
	if value, ok := tfuo.mutation.AddedProfileID(); ok {
		_spec.AddField(temporaryface.FieldProfileID, field.TypeInt64, value)
	}
	if tfuo.mutation.ProfileIDCleared() {
		_spec.ClearField(temporaryface.FieldProfileID, field.TypeInt64)
	}
	if value, ok := tfuo.mutation.FaceEmbedding(); ok {
		_spec.SetField(temporaryface.FieldFaceEmbedding, field.TypeBytes, value)
	}
	if value, ok := tfuo.mutation.ImgURL(); ok {
		_spec.SetField(temporaryface.FieldImgURL, field.TypeString, value)
	}
	if tfuo.mutation.ImgURLCleared() {
		_spec.ClearField(temporaryface.FieldImgURL, field.TypeString)
	}
	if value, ok := tfuo.mutation.UpdatedLocation(); ok {
		_spec.SetField(temporaryface.FieldUpdatedLocation, field.TypeString, value)
	}
	if tfuo.mutation.UpdatedLocationCleared() {
		_spec.ClearField(temporaryface.FieldUpdatedLocation, field.TypeString)
	}
	if value, ok := tfuo.mutation.CaptureCount(); ok {
		_spec.SetField(temporaryface.FieldCaptureCount, field.TypeInt, value)
	}
	if value, ok := tfuo.mutation.AddedCaptureCount(); ok {
		_spec.AddField(temporaryface.FieldCaptureCount, field.TypeInt, value)
	}
	if value, ok := tfuo.mutation.CreatedTime(); ok {
		_spec.SetField(temporaryface.FieldCreatedTime, field.TypeTime, value)
	}
	if tfuo.mutation.CreatedTimeCleared() {
		_spec.ClearField(temporaryface.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := tfuo.mutation.UpdatedTime(); ok {
		_spec.SetField(temporaryface.FieldUpdatedTime, field.TypeTime, value)
	}
	if tfuo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(temporaryface.FieldUpdatedTime, field.TypeTime)
	}
	if value, ok := tfuo.mutation.ExpiresTime(); ok {
		_spec.SetField(temporaryface.FieldExpiresTime, field.TypeTime, value)
	}
	_node = &TemporaryFace{config: tfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{temporaryface.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tfuo.mutation.done = true
	return _node, nil
}
