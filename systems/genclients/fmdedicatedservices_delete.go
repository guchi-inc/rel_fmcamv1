// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"fmcam/systems/genclients/fmdedicatedservices"
	"fmcam/systems/genclients/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FmDedicatedServicesDelete is the builder for deleting a FmDedicatedServices entity.
type FmDedicatedServicesDelete struct {
	config
	hooks    []Hook
	mutation *FmDedicatedServicesMutation
}

// Where appends a list predicates to the FmDedicatedServicesDelete builder.
func (fdsd *FmDedicatedServicesDelete) Where(ps ...predicate.FmDedicatedServices) *FmDedicatedServicesDelete {
	fdsd.mutation.Where(ps...)
	return fdsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fdsd *FmDedicatedServicesDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fdsd.sqlExec, fdsd.mutation, fdsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fdsd *FmDedicatedServicesDelete) ExecX(ctx context.Context) int {
	n, err := fdsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fdsd *FmDedicatedServicesDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(fmdedicatedservices.Table, sqlgraph.NewFieldSpec(fmdedicatedservices.FieldID, field.TypeInt64))
	if ps := fdsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fdsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fdsd.mutation.done = true
	return affected, err
}

// FmDedicatedServicesDeleteOne is the builder for deleting a single FmDedicatedServices entity.
type FmDedicatedServicesDeleteOne struct {
	fdsd *FmDedicatedServicesDelete
}

// Where appends a list predicates to the FmDedicatedServicesDelete builder.
func (fdsdo *FmDedicatedServicesDeleteOne) Where(ps ...predicate.FmDedicatedServices) *FmDedicatedServicesDeleteOne {
	fdsdo.fdsd.mutation.Where(ps...)
	return fdsdo
}

// Exec executes the deletion query.
func (fdsdo *FmDedicatedServicesDeleteOne) Exec(ctx context.Context) error {
	n, err := fdsdo.fdsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{fmdedicatedservices.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fdsdo *FmDedicatedServicesDeleteOne) ExecX(ctx context.Context) {
	if err := fdsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
