// Code generated by ent, DO NOT EDIT.

package fmalertgroup

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the fmalertgroup type in the database.
	Label = "fm_alert_group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGroupName holds the string denoting the group_name field in the database.
	FieldGroupName = "group_name"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldGroupType holds the string denoting the group_type field in the database.
	FieldGroupType = "group_type"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldCustomization holds the string denoting the customization field in the database.
	FieldCustomization = "customization"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldUniqEnabledGroup holds the string denoting the uniq_enabled_group field in the database.
	FieldUniqEnabledGroup = "uniq_enabled_group"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// Table holds the table name of the fmalertgroup in the database.
	Table = "fm_alert_group"
)

// Columns holds all SQL columns for fmalertgroup fields.
var Columns = []string{
	FieldID,
	FieldGroupName,
	FieldTenantID,
	FieldGroupType,
	FieldEnabled,
	FieldCustomization,
	FieldDescription,
	FieldCreator,
	FieldUniqEnabledGroup,
	FieldCreatedTime,
	FieldUpdatedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// GroupNameValidator is a validator for the "group_name" field. It is called by the builders before save.
	GroupNameValidator func(string) error
	// DefaultGroupType holds the default value on creation for the "group_type" field.
	DefaultGroupType int8
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// CustomizationValidator is a validator for the "customization" field. It is called by the builders before save.
	CustomizationValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	CreatorValidator func(string) error
	// UpdateDefaultUpdatedTime holds the default value on update for the "updated_time" field.
	UpdateDefaultUpdatedTime func() time.Time
)

// OrderOption defines the ordering options for the FmAlertGroup queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGroupName orders the results by the group_name field.
func ByGroupName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupName, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByGroupType orders the results by the group_type field.
func ByGroupType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupType, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByCustomization orders the results by the customization field.
func ByCustomization(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomization, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreator orders the results by the creator field.
func ByCreator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreator, opts...).ToFunc()
}

// ByUniqEnabledGroup orders the results by the uniq_enabled_group field.
func ByUniqEnabledGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUniqEnabledGroup, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}
