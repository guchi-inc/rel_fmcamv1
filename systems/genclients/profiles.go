// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/profiles"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Profiles is the model entity for the Profiles schema.
type Profiles struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// 人员类型
	TypeID *int64 `json:"type_id" db:"type_id"`
	// 姓名
	Name *string `json:"name"  db:"name"`
	// 租户号
	TenantID uuid.UUID `json:"tenant_id"  db:"tenant_id"`
	// 身份证号
	IDCardNumber *string `json:"id_card_number"  db:"id_card_number"`
	// 手机号
	PhoneNumber *string `json:"phone_number"  db:"phone_number"`
	// 启用
	Enabled *bool `json:"enabled" db:"enabled"`
	// 房间号
	RoomID *string `json:"room_id" db:"room_id"`
	// 面部临时地址
	TmpURL *string `json:"tmp_url" db:"tmp_url"`
	// 创建时间
	CreatedTime *time.Time `json:"created_time" db:"created_time"`
	// 更新时间
	UpdatedTime  *time.Time `json:"updated_time" db:"updated_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Profiles) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case profiles.FieldEnabled:
			values[i] = new(sql.NullBool)
		case profiles.FieldID, profiles.FieldTypeID:
			values[i] = new(sql.NullInt64)
		case profiles.FieldName, profiles.FieldIDCardNumber, profiles.FieldPhoneNumber, profiles.FieldRoomID, profiles.FieldTmpURL:
			values[i] = new(sql.NullString)
		case profiles.FieldCreatedTime, profiles.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		case profiles.FieldTenantID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Profiles fields.
func (pr *Profiles) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profiles.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int64(value.Int64)
		case profiles.FieldTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type_id", values[i])
			} else if value.Valid {
				pr.TypeID = new(int64)
				*pr.TypeID = value.Int64
			}
		case profiles.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = new(string)
				*pr.Name = value.String
			}
		case profiles.FieldTenantID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				pr.TenantID = *value
			}
		case profiles.FieldIDCardNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_card_number", values[i])
			} else if value.Valid {
				pr.IDCardNumber = new(string)
				*pr.IDCardNumber = value.String
			}
		case profiles.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				pr.PhoneNumber = new(string)
				*pr.PhoneNumber = value.String
			}
		case profiles.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				pr.Enabled = new(bool)
				*pr.Enabled = value.Bool
			}
		case profiles.FieldRoomID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field room_id", values[i])
			} else if value.Valid {
				pr.RoomID = new(string)
				*pr.RoomID = value.String
			}
		case profiles.FieldTmpURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tmp_url", values[i])
			} else if value.Valid {
				pr.TmpURL = new(string)
				*pr.TmpURL = value.String
			}
		case profiles.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				pr.CreatedTime = new(time.Time)
				*pr.CreatedTime = value.Time
			}
		case profiles.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				pr.UpdatedTime = new(time.Time)
				*pr.UpdatedTime = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Profiles.
// This includes values selected through modifiers, order, etc.
func (pr *Profiles) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// Update returns a builder for updating this Profiles.
// Note that you need to call Profiles.Unwrap() before calling this method if this Profiles
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Profiles) Update() *ProfilesUpdateOne {
	return NewProfilesClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Profiles entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Profiles) Unwrap() *Profiles {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("genclients: Profiles is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Profiles) String() string {
	var builder strings.Builder
	builder.WriteString("Profiles(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	if v := pr.TypeID; v != nil {
		builder.WriteString("type_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.TenantID))
	builder.WriteString(", ")
	if v := pr.IDCardNumber; v != nil {
		builder.WriteString("id_card_number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pr.PhoneNumber; v != nil {
		builder.WriteString("phone_number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pr.Enabled; v != nil {
		builder.WriteString("enabled=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.RoomID; v != nil {
		builder.WriteString("room_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pr.TmpURL; v != nil {
		builder.WriteString("tmp_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pr.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pr.UpdatedTime; v != nil {
		builder.WriteString("updated_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ProfilesSlice is a parsable slice of Profiles.
type ProfilesSlice []*Profiles
