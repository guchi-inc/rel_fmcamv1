// Code generated by ent, DO NOT EDIT.

package profiletype

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the profiletype type in the database.
	Label = "profile_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTypeName holds the string denoting the type_name field in the database.
	FieldTypeName = "type_name"
	// FieldWarningLevel holds the string denoting the warning_level field in the database.
	FieldWarningLevel = "warning_level"
	// FieldWarningEnabled holds the string denoting the warning_enabled field in the database.
	FieldWarningEnabled = "warning_enabled"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDeleteable holds the string denoting the deleteable field in the database.
	FieldDeleteable = "deleteable"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldTypeCode holds the string denoting the type_code field in the database.
	FieldTypeCode = "type_code"
	// FieldFaceValidityHours holds the string denoting the face_validity_hours field in the database.
	FieldFaceValidityHours = "face_validity_hours"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// Table holds the table name of the profiletype in the database.
	Table = "ProfileType"
)

// Columns holds all SQL columns for profiletype fields.
var Columns = []string{
	FieldID,
	FieldTypeName,
	FieldWarningLevel,
	FieldWarningEnabled,
	FieldTenantID,
	FieldDescription,
	FieldDeleteable,
	FieldEnabled,
	FieldTypeCode,
	FieldFaceValidityHours,
	FieldCreatedTime,
	FieldUpdatedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TypeNameValidator is a validator for the "type_name" field. It is called by the builders before save.
	TypeNameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultTypeCode holds the default value on creation for the "type_code" field.
	DefaultTypeCode string
	// TypeCodeValidator is a validator for the "type_code" field. It is called by the builders before save.
	TypeCodeValidator func(string) error
	// DefaultFaceValidityHours holds the default value on creation for the "face_validity_hours" field.
	DefaultFaceValidityHours int
	// UpdateDefaultUpdatedTime holds the default value on update for the "updated_time" field.
	UpdateDefaultUpdatedTime func() time.Time
)

// OrderOption defines the ordering options for the ProfileType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTypeName orders the results by the type_name field.
func ByTypeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTypeName, opts...).ToFunc()
}

// ByWarningLevel orders the results by the warning_level field.
func ByWarningLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWarningLevel, opts...).ToFunc()
}

// ByWarningEnabled orders the results by the warning_enabled field.
func ByWarningEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWarningEnabled, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDeleteable orders the results by the deleteable field.
func ByDeleteable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteable, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByTypeCode orders the results by the type_code field.
func ByTypeCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTypeCode, opts...).ToFunc()
}

// ByFaceValidityHours orders the results by the face_validity_hours field.
func ByFaceValidityHours(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFaceValidityHours, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}
