// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/predicate"
	"fmcam/systems/genclients/province"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProvinceUpdate is the builder for updating Province entities.
type ProvinceUpdate struct {
	config
	hooks    []Hook
	mutation *ProvinceMutation
}

// Where appends a list predicates to the ProvinceUpdate builder.
func (pu *ProvinceUpdate) Where(ps ...predicate.Province) *ProvinceUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCode sets the "code" field.
func (pu *ProvinceUpdate) SetCode(s string) *ProvinceUpdate {
	pu.mutation.SetCode(s)
	return pu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pu *ProvinceUpdate) SetNillableCode(s *string) *ProvinceUpdate {
	if s != nil {
		pu.SetCode(*s)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *ProvinceUpdate) SetName(s string) *ProvinceUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProvinceUpdate) SetNillableName(s *string) *ProvinceUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetCreator sets the "creator" field.
func (pu *ProvinceUpdate) SetCreator(s string) *ProvinceUpdate {
	pu.mutation.SetCreator(s)
	return pu
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (pu *ProvinceUpdate) SetNillableCreator(s *string) *ProvinceUpdate {
	if s != nil {
		pu.SetCreator(*s)
	}
	return pu
}

// SetDeleteFlag sets the "delete_flag" field.
func (pu *ProvinceUpdate) SetDeleteFlag(s string) *ProvinceUpdate {
	pu.mutation.SetDeleteFlag(s)
	return pu
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (pu *ProvinceUpdate) SetNillableDeleteFlag(s *string) *ProvinceUpdate {
	if s != nil {
		pu.SetDeleteFlag(*s)
	}
	return pu
}

// SetCreatedTime sets the "created_time" field.
func (pu *ProvinceUpdate) SetCreatedTime(t time.Time) *ProvinceUpdate {
	pu.mutation.SetCreatedTime(t)
	return pu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (pu *ProvinceUpdate) SetNillableCreatedTime(t *time.Time) *ProvinceUpdate {
	if t != nil {
		pu.SetCreatedTime(*t)
	}
	return pu
}

// ClearCreatedTime clears the value of the "created_time" field.
func (pu *ProvinceUpdate) ClearCreatedTime() *ProvinceUpdate {
	pu.mutation.ClearCreatedTime()
	return pu
}

// Mutation returns the ProvinceMutation object of the builder.
func (pu *ProvinceUpdate) Mutation() *ProvinceMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProvinceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProvinceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProvinceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProvinceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProvinceUpdate) check() error {
	if v, ok := pu.mutation.Code(); ok {
		if err := province.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`genclients: validator failed for field "Province.code": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := province.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "Province.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Creator(); ok {
		if err := province.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "Province.creator": %w`, err)}
		}
	}
	if v, ok := pu.mutation.DeleteFlag(); ok {
		if err := province.DeleteFlagValidator(v); err != nil {
			return &ValidationError{Name: "delete_flag", err: fmt.Errorf(`genclients: validator failed for field "Province.delete_flag": %w`, err)}
		}
	}
	return nil
}

func (pu *ProvinceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(province.Table, province.Columns, sqlgraph.NewFieldSpec(province.FieldID, field.TypeInt64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Code(); ok {
		_spec.SetField(province.FieldCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(province.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Creator(); ok {
		_spec.SetField(province.FieldCreator, field.TypeString, value)
	}
	if value, ok := pu.mutation.DeleteFlag(); ok {
		_spec.SetField(province.FieldDeleteFlag, field.TypeString, value)
	}
	if value, ok := pu.mutation.CreatedTime(); ok {
		_spec.SetField(province.FieldCreatedTime, field.TypeTime, value)
	}
	if pu.mutation.CreatedTimeCleared() {
		_spec.ClearField(province.FieldCreatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{province.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProvinceUpdateOne is the builder for updating a single Province entity.
type ProvinceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProvinceMutation
}

// SetCode sets the "code" field.
func (puo *ProvinceUpdateOne) SetCode(s string) *ProvinceUpdateOne {
	puo.mutation.SetCode(s)
	return puo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puo *ProvinceUpdateOne) SetNillableCode(s *string) *ProvinceUpdateOne {
	if s != nil {
		puo.SetCode(*s)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *ProvinceUpdateOne) SetName(s string) *ProvinceUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProvinceUpdateOne) SetNillableName(s *string) *ProvinceUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetCreator sets the "creator" field.
func (puo *ProvinceUpdateOne) SetCreator(s string) *ProvinceUpdateOne {
	puo.mutation.SetCreator(s)
	return puo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (puo *ProvinceUpdateOne) SetNillableCreator(s *string) *ProvinceUpdateOne {
	if s != nil {
		puo.SetCreator(*s)
	}
	return puo
}

// SetDeleteFlag sets the "delete_flag" field.
func (puo *ProvinceUpdateOne) SetDeleteFlag(s string) *ProvinceUpdateOne {
	puo.mutation.SetDeleteFlag(s)
	return puo
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (puo *ProvinceUpdateOne) SetNillableDeleteFlag(s *string) *ProvinceUpdateOne {
	if s != nil {
		puo.SetDeleteFlag(*s)
	}
	return puo
}

// SetCreatedTime sets the "created_time" field.
func (puo *ProvinceUpdateOne) SetCreatedTime(t time.Time) *ProvinceUpdateOne {
	puo.mutation.SetCreatedTime(t)
	return puo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (puo *ProvinceUpdateOne) SetNillableCreatedTime(t *time.Time) *ProvinceUpdateOne {
	if t != nil {
		puo.SetCreatedTime(*t)
	}
	return puo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (puo *ProvinceUpdateOne) ClearCreatedTime() *ProvinceUpdateOne {
	puo.mutation.ClearCreatedTime()
	return puo
}

// Mutation returns the ProvinceMutation object of the builder.
func (puo *ProvinceUpdateOne) Mutation() *ProvinceMutation {
	return puo.mutation
}

// Where appends a list predicates to the ProvinceUpdate builder.
func (puo *ProvinceUpdateOne) Where(ps ...predicate.Province) *ProvinceUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProvinceUpdateOne) Select(field string, fields ...string) *ProvinceUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Province entity.
func (puo *ProvinceUpdateOne) Save(ctx context.Context) (*Province, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProvinceUpdateOne) SaveX(ctx context.Context) *Province {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProvinceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProvinceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProvinceUpdateOne) check() error {
	if v, ok := puo.mutation.Code(); ok {
		if err := province.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`genclients: validator failed for field "Province.code": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := province.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "Province.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Creator(); ok {
		if err := province.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "Province.creator": %w`, err)}
		}
	}
	if v, ok := puo.mutation.DeleteFlag(); ok {
		if err := province.DeleteFlagValidator(v); err != nil {
			return &ValidationError{Name: "delete_flag", err: fmt.Errorf(`genclients: validator failed for field "Province.delete_flag": %w`, err)}
		}
	}
	return nil
}

func (puo *ProvinceUpdateOne) sqlSave(ctx context.Context) (_node *Province, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(province.Table, province.Columns, sqlgraph.NewFieldSpec(province.FieldID, field.TypeInt64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "Province.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, province.FieldID)
		for _, f := range fields {
			if !province.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != province.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Code(); ok {
		_spec.SetField(province.FieldCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(province.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Creator(); ok {
		_spec.SetField(province.FieldCreator, field.TypeString, value)
	}
	if value, ok := puo.mutation.DeleteFlag(); ok {
		_spec.SetField(province.FieldDeleteFlag, field.TypeString, value)
	}
	if value, ok := puo.mutation.CreatedTime(); ok {
		_spec.SetField(province.FieldCreatedTime, field.TypeTime, value)
	}
	if puo.mutation.CreatedTimeCleared() {
		_spec.ClearField(province.FieldCreatedTime, field.TypeTime)
	}
	_node = &Province{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{province.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
