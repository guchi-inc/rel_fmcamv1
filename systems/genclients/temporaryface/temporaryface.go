// Code generated by ent, DO NOT EDIT.

package temporaryface

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the temporaryface type in the database.
	Label = "temporary_face"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldProfileID holds the string denoting the profile_id field in the database.
	FieldProfileID = "profile_id"
	// FieldFaceEmbedding holds the string denoting the face_embedding field in the database.
	FieldFaceEmbedding = "face_embedding"
	// FieldImgURL holds the string denoting the img_url field in the database.
	FieldImgURL = "img_url"
	// FieldUpdatedLocation holds the string denoting the updated_location field in the database.
	FieldUpdatedLocation = "updated_location"
	// FieldCaptureCount holds the string denoting the capture_count field in the database.
	FieldCaptureCount = "capture_count"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// FieldExpiresTime holds the string denoting the expires_time field in the database.
	FieldExpiresTime = "expires_time"
	// Table holds the table name of the temporaryface in the database.
	Table = "TemporaryFace"
)

// Columns holds all SQL columns for temporaryface fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldProfileID,
	FieldFaceEmbedding,
	FieldImgURL,
	FieldUpdatedLocation,
	FieldCaptureCount,
	FieldCreatedTime,
	FieldUpdatedTime,
	FieldExpiresTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FaceEmbeddingValidator is a validator for the "face_embedding" field. It is called by the builders before save.
	FaceEmbeddingValidator func([]byte) error
	// ImgURLValidator is a validator for the "img_url" field. It is called by the builders before save.
	ImgURLValidator func(string) error
	// UpdatedLocationValidator is a validator for the "updated_location" field. It is called by the builders before save.
	UpdatedLocationValidator func(string) error
)

// OrderOption defines the ordering options for the TemporaryFace queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByProfileID orders the results by the profile_id field.
func ByProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileID, opts...).ToFunc()
}

// ByImgURL orders the results by the img_url field.
func ByImgURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImgURL, opts...).ToFunc()
}

// ByUpdatedLocation orders the results by the updated_location field.
func ByUpdatedLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedLocation, opts...).ToFunc()
}

// ByCaptureCount orders the results by the capture_count field.
func ByCaptureCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaptureCount, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}

// ByExpiresTime orders the results by the expires_time field.
func ByExpiresTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresTime, opts...).ToFunc()
}
