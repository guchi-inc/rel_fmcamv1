// Code generated by ent, DO NOT EDIT.

package temporaryface

import (
	"fmcam/systems/genclients/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v uuid.UUID) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldTenantID, v))
}

// ProfileID applies equality check predicate on the "profile_id" field. It's identical to ProfileIDEQ.
func ProfileID(v int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldProfileID, v))
}

// FaceEmbedding applies equality check predicate on the "face_embedding" field. It's identical to FaceEmbeddingEQ.
func FaceEmbedding(v []byte) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldFaceEmbedding, v))
}

// ImgURL applies equality check predicate on the "img_url" field. It's identical to ImgURLEQ.
func ImgURL(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldImgURL, v))
}

// UpdatedLocation applies equality check predicate on the "updated_location" field. It's identical to UpdatedLocationEQ.
func UpdatedLocation(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldUpdatedLocation, v))
}

// CaptureCount applies equality check predicate on the "capture_count" field. It's identical to CaptureCountEQ.
func CaptureCount(v int) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldCaptureCount, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldCreatedTime, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldUpdatedTime, v))
}

// ExpiresTime applies equality check predicate on the "expires_time" field. It's identical to ExpiresTimeEQ.
func ExpiresTime(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldExpiresTime, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v uuid.UUID) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v uuid.UUID) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...uuid.UUID) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...uuid.UUID) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v uuid.UUID) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v uuid.UUID) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v uuid.UUID) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v uuid.UUID) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLTE(FieldTenantID, v))
}

// ProfileIDEQ applies the EQ predicate on the "profile_id" field.
func ProfileIDEQ(v int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldProfileID, v))
}

// ProfileIDNEQ applies the NEQ predicate on the "profile_id" field.
func ProfileIDNEQ(v int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNEQ(FieldProfileID, v))
}

// ProfileIDIn applies the In predicate on the "profile_id" field.
func ProfileIDIn(vs ...int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldIn(FieldProfileID, vs...))
}

// ProfileIDNotIn applies the NotIn predicate on the "profile_id" field.
func ProfileIDNotIn(vs ...int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNotIn(FieldProfileID, vs...))
}

// ProfileIDGT applies the GT predicate on the "profile_id" field.
func ProfileIDGT(v int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGT(FieldProfileID, v))
}

// ProfileIDGTE applies the GTE predicate on the "profile_id" field.
func ProfileIDGTE(v int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGTE(FieldProfileID, v))
}

// ProfileIDLT applies the LT predicate on the "profile_id" field.
func ProfileIDLT(v int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLT(FieldProfileID, v))
}

// ProfileIDLTE applies the LTE predicate on the "profile_id" field.
func ProfileIDLTE(v int64) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLTE(FieldProfileID, v))
}

// ProfileIDIsNil applies the IsNil predicate on the "profile_id" field.
func ProfileIDIsNil() predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldIsNull(FieldProfileID))
}

// ProfileIDNotNil applies the NotNil predicate on the "profile_id" field.
func ProfileIDNotNil() predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNotNull(FieldProfileID))
}

// FaceEmbeddingEQ applies the EQ predicate on the "face_embedding" field.
func FaceEmbeddingEQ(v []byte) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldFaceEmbedding, v))
}

// FaceEmbeddingNEQ applies the NEQ predicate on the "face_embedding" field.
func FaceEmbeddingNEQ(v []byte) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNEQ(FieldFaceEmbedding, v))
}

// FaceEmbeddingIn applies the In predicate on the "face_embedding" field.
func FaceEmbeddingIn(vs ...[]byte) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldIn(FieldFaceEmbedding, vs...))
}

// FaceEmbeddingNotIn applies the NotIn predicate on the "face_embedding" field.
func FaceEmbeddingNotIn(vs ...[]byte) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNotIn(FieldFaceEmbedding, vs...))
}

// FaceEmbeddingGT applies the GT predicate on the "face_embedding" field.
func FaceEmbeddingGT(v []byte) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGT(FieldFaceEmbedding, v))
}

// FaceEmbeddingGTE applies the GTE predicate on the "face_embedding" field.
func FaceEmbeddingGTE(v []byte) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGTE(FieldFaceEmbedding, v))
}

// FaceEmbeddingLT applies the LT predicate on the "face_embedding" field.
func FaceEmbeddingLT(v []byte) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLT(FieldFaceEmbedding, v))
}

// FaceEmbeddingLTE applies the LTE predicate on the "face_embedding" field.
func FaceEmbeddingLTE(v []byte) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLTE(FieldFaceEmbedding, v))
}

// ImgURLEQ applies the EQ predicate on the "img_url" field.
func ImgURLEQ(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldImgURL, v))
}

// ImgURLNEQ applies the NEQ predicate on the "img_url" field.
func ImgURLNEQ(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNEQ(FieldImgURL, v))
}

// ImgURLIn applies the In predicate on the "img_url" field.
func ImgURLIn(vs ...string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldIn(FieldImgURL, vs...))
}

// ImgURLNotIn applies the NotIn predicate on the "img_url" field.
func ImgURLNotIn(vs ...string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNotIn(FieldImgURL, vs...))
}

// ImgURLGT applies the GT predicate on the "img_url" field.
func ImgURLGT(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGT(FieldImgURL, v))
}

// ImgURLGTE applies the GTE predicate on the "img_url" field.
func ImgURLGTE(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGTE(FieldImgURL, v))
}

// ImgURLLT applies the LT predicate on the "img_url" field.
func ImgURLLT(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLT(FieldImgURL, v))
}

// ImgURLLTE applies the LTE predicate on the "img_url" field.
func ImgURLLTE(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLTE(FieldImgURL, v))
}

// ImgURLContains applies the Contains predicate on the "img_url" field.
func ImgURLContains(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldContains(FieldImgURL, v))
}

// ImgURLHasPrefix applies the HasPrefix predicate on the "img_url" field.
func ImgURLHasPrefix(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldHasPrefix(FieldImgURL, v))
}

// ImgURLHasSuffix applies the HasSuffix predicate on the "img_url" field.
func ImgURLHasSuffix(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldHasSuffix(FieldImgURL, v))
}

// ImgURLIsNil applies the IsNil predicate on the "img_url" field.
func ImgURLIsNil() predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldIsNull(FieldImgURL))
}

// ImgURLNotNil applies the NotNil predicate on the "img_url" field.
func ImgURLNotNil() predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNotNull(FieldImgURL))
}

// ImgURLEqualFold applies the EqualFold predicate on the "img_url" field.
func ImgURLEqualFold(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEqualFold(FieldImgURL, v))
}

// ImgURLContainsFold applies the ContainsFold predicate on the "img_url" field.
func ImgURLContainsFold(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldContainsFold(FieldImgURL, v))
}

// UpdatedLocationEQ applies the EQ predicate on the "updated_location" field.
func UpdatedLocationEQ(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldUpdatedLocation, v))
}

// UpdatedLocationNEQ applies the NEQ predicate on the "updated_location" field.
func UpdatedLocationNEQ(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNEQ(FieldUpdatedLocation, v))
}

// UpdatedLocationIn applies the In predicate on the "updated_location" field.
func UpdatedLocationIn(vs ...string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldIn(FieldUpdatedLocation, vs...))
}

// UpdatedLocationNotIn applies the NotIn predicate on the "updated_location" field.
func UpdatedLocationNotIn(vs ...string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNotIn(FieldUpdatedLocation, vs...))
}

// UpdatedLocationGT applies the GT predicate on the "updated_location" field.
func UpdatedLocationGT(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGT(FieldUpdatedLocation, v))
}

// UpdatedLocationGTE applies the GTE predicate on the "updated_location" field.
func UpdatedLocationGTE(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGTE(FieldUpdatedLocation, v))
}

// UpdatedLocationLT applies the LT predicate on the "updated_location" field.
func UpdatedLocationLT(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLT(FieldUpdatedLocation, v))
}

// UpdatedLocationLTE applies the LTE predicate on the "updated_location" field.
func UpdatedLocationLTE(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLTE(FieldUpdatedLocation, v))
}

// UpdatedLocationContains applies the Contains predicate on the "updated_location" field.
func UpdatedLocationContains(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldContains(FieldUpdatedLocation, v))
}

// UpdatedLocationHasPrefix applies the HasPrefix predicate on the "updated_location" field.
func UpdatedLocationHasPrefix(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldHasPrefix(FieldUpdatedLocation, v))
}

// UpdatedLocationHasSuffix applies the HasSuffix predicate on the "updated_location" field.
func UpdatedLocationHasSuffix(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldHasSuffix(FieldUpdatedLocation, v))
}

// UpdatedLocationIsNil applies the IsNil predicate on the "updated_location" field.
func UpdatedLocationIsNil() predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldIsNull(FieldUpdatedLocation))
}

// UpdatedLocationNotNil applies the NotNil predicate on the "updated_location" field.
func UpdatedLocationNotNil() predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNotNull(FieldUpdatedLocation))
}

// UpdatedLocationEqualFold applies the EqualFold predicate on the "updated_location" field.
func UpdatedLocationEqualFold(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEqualFold(FieldUpdatedLocation, v))
}

// UpdatedLocationContainsFold applies the ContainsFold predicate on the "updated_location" field.
func UpdatedLocationContainsFold(v string) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldContainsFold(FieldUpdatedLocation, v))
}

// CaptureCountEQ applies the EQ predicate on the "capture_count" field.
func CaptureCountEQ(v int) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldCaptureCount, v))
}

// CaptureCountNEQ applies the NEQ predicate on the "capture_count" field.
func CaptureCountNEQ(v int) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNEQ(FieldCaptureCount, v))
}

// CaptureCountIn applies the In predicate on the "capture_count" field.
func CaptureCountIn(vs ...int) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldIn(FieldCaptureCount, vs...))
}

// CaptureCountNotIn applies the NotIn predicate on the "capture_count" field.
func CaptureCountNotIn(vs ...int) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNotIn(FieldCaptureCount, vs...))
}

// CaptureCountGT applies the GT predicate on the "capture_count" field.
func CaptureCountGT(v int) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGT(FieldCaptureCount, v))
}

// CaptureCountGTE applies the GTE predicate on the "capture_count" field.
func CaptureCountGTE(v int) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGTE(FieldCaptureCount, v))
}

// CaptureCountLT applies the LT predicate on the "capture_count" field.
func CaptureCountLT(v int) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLT(FieldCaptureCount, v))
}

// CaptureCountLTE applies the LTE predicate on the "capture_count" field.
func CaptureCountLTE(v int) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLTE(FieldCaptureCount, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLTE(FieldCreatedTime, v))
}

// CreatedTimeIsNil applies the IsNil predicate on the "created_time" field.
func CreatedTimeIsNil() predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldIsNull(FieldCreatedTime))
}

// CreatedTimeNotNil applies the NotNil predicate on the "created_time" field.
func CreatedTimeNotNil() predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNotNull(FieldCreatedTime))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLTE(FieldUpdatedTime, v))
}

// UpdatedTimeIsNil applies the IsNil predicate on the "updated_time" field.
func UpdatedTimeIsNil() predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldIsNull(FieldUpdatedTime))
}

// UpdatedTimeNotNil applies the NotNil predicate on the "updated_time" field.
func UpdatedTimeNotNil() predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNotNull(FieldUpdatedTime))
}

// ExpiresTimeEQ applies the EQ predicate on the "expires_time" field.
func ExpiresTimeEQ(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldEQ(FieldExpiresTime, v))
}

// ExpiresTimeNEQ applies the NEQ predicate on the "expires_time" field.
func ExpiresTimeNEQ(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNEQ(FieldExpiresTime, v))
}

// ExpiresTimeIn applies the In predicate on the "expires_time" field.
func ExpiresTimeIn(vs ...time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldIn(FieldExpiresTime, vs...))
}

// ExpiresTimeNotIn applies the NotIn predicate on the "expires_time" field.
func ExpiresTimeNotIn(vs ...time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldNotIn(FieldExpiresTime, vs...))
}

// ExpiresTimeGT applies the GT predicate on the "expires_time" field.
func ExpiresTimeGT(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGT(FieldExpiresTime, v))
}

// ExpiresTimeGTE applies the GTE predicate on the "expires_time" field.
func ExpiresTimeGTE(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldGTE(FieldExpiresTime, v))
}

// ExpiresTimeLT applies the LT predicate on the "expires_time" field.
func ExpiresTimeLT(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLT(FieldExpiresTime, v))
}

// ExpiresTimeLTE applies the LTE predicate on the "expires_time" field.
func ExpiresTimeLTE(v time.Time) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.FieldLTE(FieldExpiresTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TemporaryFace) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TemporaryFace) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TemporaryFace) predicate.TemporaryFace {
	return predicate.TemporaryFace(sql.NotPredicates(p))
}
