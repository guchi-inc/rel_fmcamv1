// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/fieldmetadata"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FieldMetadata is the model entity for the FieldMetadata schema.
type FieldMetadata struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id" db:"id"`
	// 表名
	TableName string `json:"table_name" db:"table_name"`
	// 字段名
	Name string `json:"name" db:"name"`
	// 中文名
	Cname string `json:"cname" db:"cname"`
	// 字段类型
	DataType string `json:"data_type" db:"data_type"`
	// 可访问
	IsVisible bool `json:"is_visible" db:"is_visible"`
	// 可搜索
	IsSearchable bool `json:"is_searchable" db:"is_searchable"`
	// 可编辑
	IsEditable bool `json:"is_editable" db:"is_editable"`
	// 必需
	IsRequired bool `json:"is_required" db:"is_required"`
	// 最长
	MaxLength int `json:"max_length" db:"max_length"`
	// 默认值
	DefaultValue string `json:"default_value" db:"default_value"`
	// 描述
	Description string `json:"description" db:"description"`
	// 创建时间
	CreatedTime *time.Time `json:"created_time" db:"created_time"`
	// 更新时间
	UpdatedTime  *time.Time `json:"updated_time" db:"updated_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FieldMetadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fieldmetadata.FieldIsVisible, fieldmetadata.FieldIsSearchable, fieldmetadata.FieldIsEditable, fieldmetadata.FieldIsRequired:
			values[i] = new(sql.NullBool)
		case fieldmetadata.FieldID, fieldmetadata.FieldMaxLength:
			values[i] = new(sql.NullInt64)
		case fieldmetadata.FieldTableName, fieldmetadata.FieldName, fieldmetadata.FieldCname, fieldmetadata.FieldDataType, fieldmetadata.FieldDefaultValue, fieldmetadata.FieldDescription:
			values[i] = new(sql.NullString)
		case fieldmetadata.FieldCreatedTime, fieldmetadata.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FieldMetadata fields.
func (fm *FieldMetadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fieldmetadata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fm.ID = int64(value.Int64)
		case fieldmetadata.FieldTableName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name", values[i])
			} else if value.Valid {
				fm.TableName = value.String
			}
		case fieldmetadata.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				fm.Name = value.String
			}
		case fieldmetadata.FieldCname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cname", values[i])
			} else if value.Valid {
				fm.Cname = value.String
			}
		case fieldmetadata.FieldDataType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data_type", values[i])
			} else if value.Valid {
				fm.DataType = value.String
			}
		case fieldmetadata.FieldIsVisible:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_visible", values[i])
			} else if value.Valid {
				fm.IsVisible = value.Bool
			}
		case fieldmetadata.FieldIsSearchable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_searchable", values[i])
			} else if value.Valid {
				fm.IsSearchable = value.Bool
			}
		case fieldmetadata.FieldIsEditable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_editable", values[i])
			} else if value.Valid {
				fm.IsEditable = value.Bool
			}
		case fieldmetadata.FieldIsRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_required", values[i])
			} else if value.Valid {
				fm.IsRequired = value.Bool
			}
		case fieldmetadata.FieldMaxLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_length", values[i])
			} else if value.Valid {
				fm.MaxLength = int(value.Int64)
			}
		case fieldmetadata.FieldDefaultValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_value", values[i])
			} else if value.Valid {
				fm.DefaultValue = value.String
			}
		case fieldmetadata.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				fm.Description = value.String
			}
		case fieldmetadata.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				fm.CreatedTime = new(time.Time)
				*fm.CreatedTime = value.Time
			}
		case fieldmetadata.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				fm.UpdatedTime = new(time.Time)
				*fm.UpdatedTime = value.Time
			}
		default:
			fm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FieldMetadata.
// This includes values selected through modifiers, order, etc.
func (fm *FieldMetadata) Value(name string) (ent.Value, error) {
	return fm.selectValues.Get(name)
}

// Update returns a builder for updating this FieldMetadata.
// Note that you need to call FieldMetadata.Unwrap() before calling this method if this FieldMetadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (fm *FieldMetadata) Update() *FieldMetadataUpdateOne {
	return NewFieldMetadataClient(fm.config).UpdateOne(fm)
}

// Unwrap unwraps the FieldMetadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fm *FieldMetadata) Unwrap() *FieldMetadata {
	_tx, ok := fm.config.driver.(*txDriver)
	if !ok {
		panic("genclients: FieldMetadata is not a transactional entity")
	}
	fm.config.driver = _tx.drv
	return fm
}

// String implements the fmt.Stringer.
func (fm *FieldMetadata) String() string {
	var builder strings.Builder
	builder.WriteString("FieldMetadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fm.ID))
	builder.WriteString("table_name=")
	builder.WriteString(fm.TableName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(fm.Name)
	builder.WriteString(", ")
	builder.WriteString("cname=")
	builder.WriteString(fm.Cname)
	builder.WriteString(", ")
	builder.WriteString("data_type=")
	builder.WriteString(fm.DataType)
	builder.WriteString(", ")
	builder.WriteString("is_visible=")
	builder.WriteString(fmt.Sprintf("%v", fm.IsVisible))
	builder.WriteString(", ")
	builder.WriteString("is_searchable=")
	builder.WriteString(fmt.Sprintf("%v", fm.IsSearchable))
	builder.WriteString(", ")
	builder.WriteString("is_editable=")
	builder.WriteString(fmt.Sprintf("%v", fm.IsEditable))
	builder.WriteString(", ")
	builder.WriteString("is_required=")
	builder.WriteString(fmt.Sprintf("%v", fm.IsRequired))
	builder.WriteString(", ")
	builder.WriteString("max_length=")
	builder.WriteString(fmt.Sprintf("%v", fm.MaxLength))
	builder.WriteString(", ")
	builder.WriteString("default_value=")
	builder.WriteString(fm.DefaultValue)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fm.Description)
	builder.WriteString(", ")
	if v := fm.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := fm.UpdatedTime; v != nil {
		builder.WriteString("updated_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// FieldMetadataSlice is a parsable slice of FieldMetadata.
type FieldMetadataSlice []*FieldMetadata
