// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"fmcam/systems/genclients/profiles"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProfilesCreate is the builder for creating a Profiles entity.
type ProfilesCreate struct {
	config
	mutation *ProfilesMutation
	hooks    []Hook
}

// SetTypeID sets the "type_id" field.
func (pc *ProfilesCreate) SetTypeID(i int64) *ProfilesCreate {
	pc.mutation.SetTypeID(i)
	return pc
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (pc *ProfilesCreate) SetNillableTypeID(i *int64) *ProfilesCreate {
	if i != nil {
		pc.SetTypeID(*i)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *ProfilesCreate) SetName(s string) *ProfilesCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *ProfilesCreate) SetNillableName(s *string) *ProfilesCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetTenantID sets the "tenant_id" field.
func (pc *ProfilesCreate) SetTenantID(u uuid.UUID) *ProfilesCreate {
	pc.mutation.SetTenantID(u)
	return pc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pc *ProfilesCreate) SetNillableTenantID(u *uuid.UUID) *ProfilesCreate {
	if u != nil {
		pc.SetTenantID(*u)
	}
	return pc
}

// SetIDCardNumber sets the "id_card_number" field.
func (pc *ProfilesCreate) SetIDCardNumber(s string) *ProfilesCreate {
	pc.mutation.SetIDCardNumber(s)
	return pc
}

// SetNillableIDCardNumber sets the "id_card_number" field if the given value is not nil.
func (pc *ProfilesCreate) SetNillableIDCardNumber(s *string) *ProfilesCreate {
	if s != nil {
		pc.SetIDCardNumber(*s)
	}
	return pc
}

// SetPhoneNumber sets the "phone_number" field.
func (pc *ProfilesCreate) SetPhoneNumber(s string) *ProfilesCreate {
	pc.mutation.SetPhoneNumber(s)
	return pc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (pc *ProfilesCreate) SetNillablePhoneNumber(s *string) *ProfilesCreate {
	if s != nil {
		pc.SetPhoneNumber(*s)
	}
	return pc
}

// SetEnabled sets the "enabled" field.
func (pc *ProfilesCreate) SetEnabled(b bool) *ProfilesCreate {
	pc.mutation.SetEnabled(b)
	return pc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (pc *ProfilesCreate) SetNillableEnabled(b *bool) *ProfilesCreate {
	if b != nil {
		pc.SetEnabled(*b)
	}
	return pc
}

// SetRoomID sets the "room_id" field.
func (pc *ProfilesCreate) SetRoomID(s string) *ProfilesCreate {
	pc.mutation.SetRoomID(s)
	return pc
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (pc *ProfilesCreate) SetNillableRoomID(s *string) *ProfilesCreate {
	if s != nil {
		pc.SetRoomID(*s)
	}
	return pc
}

// SetTmpURL sets the "tmp_url" field.
func (pc *ProfilesCreate) SetTmpURL(s string) *ProfilesCreate {
	pc.mutation.SetTmpURL(s)
	return pc
}

// SetNillableTmpURL sets the "tmp_url" field if the given value is not nil.
func (pc *ProfilesCreate) SetNillableTmpURL(s *string) *ProfilesCreate {
	if s != nil {
		pc.SetTmpURL(*s)
	}
	return pc
}

// SetCreatedTime sets the "created_time" field.
func (pc *ProfilesCreate) SetCreatedTime(t time.Time) *ProfilesCreate {
	pc.mutation.SetCreatedTime(t)
	return pc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (pc *ProfilesCreate) SetNillableCreatedTime(t *time.Time) *ProfilesCreate {
	if t != nil {
		pc.SetCreatedTime(*t)
	}
	return pc
}

// SetUpdatedTime sets the "updated_time" field.
func (pc *ProfilesCreate) SetUpdatedTime(t time.Time) *ProfilesCreate {
	pc.mutation.SetUpdatedTime(t)
	return pc
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (pc *ProfilesCreate) SetNillableUpdatedTime(t *time.Time) *ProfilesCreate {
	if t != nil {
		pc.SetUpdatedTime(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProfilesCreate) SetID(i int64) *ProfilesCreate {
	pc.mutation.SetID(i)
	return pc
}

// Mutation returns the ProfilesMutation object of the builder.
func (pc *ProfilesCreate) Mutation() *ProfilesMutation {
	return pc.mutation
}

// Save creates the Profiles in the database.
func (pc *ProfilesCreate) Save(ctx context.Context) (*Profiles, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProfilesCreate) SaveX(ctx context.Context) *Profiles {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProfilesCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProfilesCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProfilesCreate) defaults() {
	if _, ok := pc.mutation.PhoneNumber(); !ok {
		v := profiles.DefaultPhoneNumber
		pc.mutation.SetPhoneNumber(v)
	}
	if _, ok := pc.mutation.Enabled(); !ok {
		v := profiles.DefaultEnabled
		pc.mutation.SetEnabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProfilesCreate) check() error {
	if v, ok := pc.mutation.Name(); ok {
		if err := profiles.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "Profiles.name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.IDCardNumber(); ok {
		if err := profiles.IDCardNumberValidator(v); err != nil {
			return &ValidationError{Name: "id_card_number", err: fmt.Errorf(`genclients: validator failed for field "Profiles.id_card_number": %w`, err)}
		}
	}
	return nil
}

func (pc *ProfilesCreate) sqlSave(ctx context.Context) (*Profiles, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProfilesCreate) createSpec() (*Profiles, *sqlgraph.CreateSpec) {
	var (
		_node = &Profiles{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(profiles.Table, sqlgraph.NewFieldSpec(profiles.FieldID, field.TypeInt64))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.TypeID(); ok {
		_spec.SetField(profiles.FieldTypeID, field.TypeInt64, value)
		_node.TypeID = &value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(profiles.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := pc.mutation.TenantID(); ok {
		_spec.SetField(profiles.FieldTenantID, field.TypeUUID, value)
		_node.TenantID = value
	}
	if value, ok := pc.mutation.IDCardNumber(); ok {
		_spec.SetField(profiles.FieldIDCardNumber, field.TypeString, value)
		_node.IDCardNumber = &value
	}
	if value, ok := pc.mutation.PhoneNumber(); ok {
		_spec.SetField(profiles.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = &value
	}
	if value, ok := pc.mutation.Enabled(); ok {
		_spec.SetField(profiles.FieldEnabled, field.TypeBool, value)
		_node.Enabled = &value
	}
	if value, ok := pc.mutation.RoomID(); ok {
		_spec.SetField(profiles.FieldRoomID, field.TypeString, value)
		_node.RoomID = &value
	}
	if value, ok := pc.mutation.TmpURL(); ok {
		_spec.SetField(profiles.FieldTmpURL, field.TypeString, value)
		_node.TmpURL = &value
	}
	if value, ok := pc.mutation.CreatedTime(); ok {
		_spec.SetField(profiles.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	if value, ok := pc.mutation.UpdatedTime(); ok {
		_spec.SetField(profiles.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = &value
	}
	return _node, _spec
}

// ProfilesCreateBulk is the builder for creating many Profiles entities in bulk.
type ProfilesCreateBulk struct {
	config
	err      error
	builders []*ProfilesCreate
}

// Save creates the Profiles entities in the database.
func (pcb *ProfilesCreateBulk) Save(ctx context.Context) ([]*Profiles, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Profiles, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfilesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProfilesCreateBulk) SaveX(ctx context.Context) []*Profiles {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProfilesCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProfilesCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
