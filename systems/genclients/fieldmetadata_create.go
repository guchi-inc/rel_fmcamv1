// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/fieldmetadata"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FieldMetadataCreate is the builder for creating a FieldMetadata entity.
type FieldMetadataCreate struct {
	config
	mutation *FieldMetadataMutation
	hooks    []Hook
}

// SetTableName sets the "table_name" field.
func (fmc *FieldMetadataCreate) SetTableName(s string) *FieldMetadataCreate {
	fmc.mutation.SetTableName(s)
	return fmc
}

// SetName sets the "name" field.
func (fmc *FieldMetadataCreate) SetName(s string) *FieldMetadataCreate {
	fmc.mutation.SetName(s)
	return fmc
}

// SetCname sets the "cname" field.
func (fmc *FieldMetadataCreate) SetCname(s string) *FieldMetadataCreate {
	fmc.mutation.SetCname(s)
	return fmc
}

// SetDataType sets the "data_type" field.
func (fmc *FieldMetadataCreate) SetDataType(s string) *FieldMetadataCreate {
	fmc.mutation.SetDataType(s)
	return fmc
}

// SetIsVisible sets the "is_visible" field.
func (fmc *FieldMetadataCreate) SetIsVisible(b bool) *FieldMetadataCreate {
	fmc.mutation.SetIsVisible(b)
	return fmc
}

// SetNillableIsVisible sets the "is_visible" field if the given value is not nil.
func (fmc *FieldMetadataCreate) SetNillableIsVisible(b *bool) *FieldMetadataCreate {
	if b != nil {
		fmc.SetIsVisible(*b)
	}
	return fmc
}

// SetIsSearchable sets the "is_searchable" field.
func (fmc *FieldMetadataCreate) SetIsSearchable(b bool) *FieldMetadataCreate {
	fmc.mutation.SetIsSearchable(b)
	return fmc
}

// SetNillableIsSearchable sets the "is_searchable" field if the given value is not nil.
func (fmc *FieldMetadataCreate) SetNillableIsSearchable(b *bool) *FieldMetadataCreate {
	if b != nil {
		fmc.SetIsSearchable(*b)
	}
	return fmc
}

// SetIsEditable sets the "is_editable" field.
func (fmc *FieldMetadataCreate) SetIsEditable(b bool) *FieldMetadataCreate {
	fmc.mutation.SetIsEditable(b)
	return fmc
}

// SetNillableIsEditable sets the "is_editable" field if the given value is not nil.
func (fmc *FieldMetadataCreate) SetNillableIsEditable(b *bool) *FieldMetadataCreate {
	if b != nil {
		fmc.SetIsEditable(*b)
	}
	return fmc
}

// SetIsRequired sets the "is_required" field.
func (fmc *FieldMetadataCreate) SetIsRequired(b bool) *FieldMetadataCreate {
	fmc.mutation.SetIsRequired(b)
	return fmc
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (fmc *FieldMetadataCreate) SetNillableIsRequired(b *bool) *FieldMetadataCreate {
	if b != nil {
		fmc.SetIsRequired(*b)
	}
	return fmc
}

// SetMaxLength sets the "max_length" field.
func (fmc *FieldMetadataCreate) SetMaxLength(i int) *FieldMetadataCreate {
	fmc.mutation.SetMaxLength(i)
	return fmc
}

// SetNillableMaxLength sets the "max_length" field if the given value is not nil.
func (fmc *FieldMetadataCreate) SetNillableMaxLength(i *int) *FieldMetadataCreate {
	if i != nil {
		fmc.SetMaxLength(*i)
	}
	return fmc
}

// SetDefaultValue sets the "default_value" field.
func (fmc *FieldMetadataCreate) SetDefaultValue(s string) *FieldMetadataCreate {
	fmc.mutation.SetDefaultValue(s)
	return fmc
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (fmc *FieldMetadataCreate) SetNillableDefaultValue(s *string) *FieldMetadataCreate {
	if s != nil {
		fmc.SetDefaultValue(*s)
	}
	return fmc
}

// SetDescription sets the "description" field.
func (fmc *FieldMetadataCreate) SetDescription(s string) *FieldMetadataCreate {
	fmc.mutation.SetDescription(s)
	return fmc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fmc *FieldMetadataCreate) SetNillableDescription(s *string) *FieldMetadataCreate {
	if s != nil {
		fmc.SetDescription(*s)
	}
	return fmc
}

// SetCreatedTime sets the "created_time" field.
func (fmc *FieldMetadataCreate) SetCreatedTime(t time.Time) *FieldMetadataCreate {
	fmc.mutation.SetCreatedTime(t)
	return fmc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fmc *FieldMetadataCreate) SetNillableCreatedTime(t *time.Time) *FieldMetadataCreate {
	if t != nil {
		fmc.SetCreatedTime(*t)
	}
	return fmc
}

// SetUpdatedTime sets the "updated_time" field.
func (fmc *FieldMetadataCreate) SetUpdatedTime(t time.Time) *FieldMetadataCreate {
	fmc.mutation.SetUpdatedTime(t)
	return fmc
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (fmc *FieldMetadataCreate) SetNillableUpdatedTime(t *time.Time) *FieldMetadataCreate {
	if t != nil {
		fmc.SetUpdatedTime(*t)
	}
	return fmc
}

// SetID sets the "id" field.
func (fmc *FieldMetadataCreate) SetID(i int64) *FieldMetadataCreate {
	fmc.mutation.SetID(i)
	return fmc
}

// Mutation returns the FieldMetadataMutation object of the builder.
func (fmc *FieldMetadataCreate) Mutation() *FieldMetadataMutation {
	return fmc.mutation
}

// Save creates the FieldMetadata in the database.
func (fmc *FieldMetadataCreate) Save(ctx context.Context) (*FieldMetadata, error) {
	fmc.defaults()
	return withHooks(ctx, fmc.sqlSave, fmc.mutation, fmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fmc *FieldMetadataCreate) SaveX(ctx context.Context) *FieldMetadata {
	v, err := fmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fmc *FieldMetadataCreate) Exec(ctx context.Context) error {
	_, err := fmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmc *FieldMetadataCreate) ExecX(ctx context.Context) {
	if err := fmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fmc *FieldMetadataCreate) defaults() {
	if _, ok := fmc.mutation.IsVisible(); !ok {
		v := fieldmetadata.DefaultIsVisible
		fmc.mutation.SetIsVisible(v)
	}
	if _, ok := fmc.mutation.IsSearchable(); !ok {
		v := fieldmetadata.DefaultIsSearchable
		fmc.mutation.SetIsSearchable(v)
	}
	if _, ok := fmc.mutation.IsEditable(); !ok {
		v := fieldmetadata.DefaultIsEditable
		fmc.mutation.SetIsEditable(v)
	}
	if _, ok := fmc.mutation.IsRequired(); !ok {
		v := fieldmetadata.DefaultIsRequired
		fmc.mutation.SetIsRequired(v)
	}
	if _, ok := fmc.mutation.MaxLength(); !ok {
		v := fieldmetadata.DefaultMaxLength
		fmc.mutation.SetMaxLength(v)
	}
	if _, ok := fmc.mutation.DefaultValue(); !ok {
		v := fieldmetadata.DefaultDefaultValue
		fmc.mutation.SetDefaultValue(v)
	}
	if _, ok := fmc.mutation.Description(); !ok {
		v := fieldmetadata.DefaultDescription
		fmc.mutation.SetDescription(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fmc *FieldMetadataCreate) check() error {
	if _, ok := fmc.mutation.TableName(); !ok {
		return &ValidationError{Name: "table_name", err: errors.New(`genclients: missing required field "FieldMetadata.table_name"`)}
	}
	if v, ok := fmc.mutation.TableName(); ok {
		if err := fieldmetadata.TableNameValidator(v); err != nil {
			return &ValidationError{Name: "table_name", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.table_name": %w`, err)}
		}
	}
	if _, ok := fmc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`genclients: missing required field "FieldMetadata.name"`)}
	}
	if v, ok := fmc.mutation.Name(); ok {
		if err := fieldmetadata.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.name": %w`, err)}
		}
	}
	if _, ok := fmc.mutation.Cname(); !ok {
		return &ValidationError{Name: "cname", err: errors.New(`genclients: missing required field "FieldMetadata.cname"`)}
	}
	if v, ok := fmc.mutation.Cname(); ok {
		if err := fieldmetadata.CnameValidator(v); err != nil {
			return &ValidationError{Name: "cname", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.cname": %w`, err)}
		}
	}
	if _, ok := fmc.mutation.DataType(); !ok {
		return &ValidationError{Name: "data_type", err: errors.New(`genclients: missing required field "FieldMetadata.data_type"`)}
	}
	if v, ok := fmc.mutation.DataType(); ok {
		if err := fieldmetadata.DataTypeValidator(v); err != nil {
			return &ValidationError{Name: "data_type", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.data_type": %w`, err)}
		}
	}
	if _, ok := fmc.mutation.IsVisible(); !ok {
		return &ValidationError{Name: "is_visible", err: errors.New(`genclients: missing required field "FieldMetadata.is_visible"`)}
	}
	if _, ok := fmc.mutation.IsSearchable(); !ok {
		return &ValidationError{Name: "is_searchable", err: errors.New(`genclients: missing required field "FieldMetadata.is_searchable"`)}
	}
	if _, ok := fmc.mutation.IsEditable(); !ok {
		return &ValidationError{Name: "is_editable", err: errors.New(`genclients: missing required field "FieldMetadata.is_editable"`)}
	}
	if _, ok := fmc.mutation.IsRequired(); !ok {
		return &ValidationError{Name: "is_required", err: errors.New(`genclients: missing required field "FieldMetadata.is_required"`)}
	}
	if _, ok := fmc.mutation.MaxLength(); !ok {
		return &ValidationError{Name: "max_length", err: errors.New(`genclients: missing required field "FieldMetadata.max_length"`)}
	}
	if _, ok := fmc.mutation.DefaultValue(); !ok {
		return &ValidationError{Name: "default_value", err: errors.New(`genclients: missing required field "FieldMetadata.default_value"`)}
	}
	if v, ok := fmc.mutation.DefaultValue(); ok {
		if err := fieldmetadata.DefaultValueValidator(v); err != nil {
			return &ValidationError{Name: "default_value", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.default_value": %w`, err)}
		}
	}
	if _, ok := fmc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`genclients: missing required field "FieldMetadata.description"`)}
	}
	if v, ok := fmc.mutation.Description(); ok {
		if err := fieldmetadata.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.description": %w`, err)}
		}
	}
	if v, ok := fmc.mutation.ID(); ok {
		if err := fieldmetadata.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.id": %w`, err)}
		}
	}
	return nil
}

func (fmc *FieldMetadataCreate) sqlSave(ctx context.Context) (*FieldMetadata, error) {
	if err := fmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fmc.mutation.id = &_node.ID
	fmc.mutation.done = true
	return _node, nil
}

func (fmc *FieldMetadataCreate) createSpec() (*FieldMetadata, *sqlgraph.CreateSpec) {
	var (
		_node = &FieldMetadata{config: fmc.config}
		_spec = sqlgraph.NewCreateSpec(fieldmetadata.Table, sqlgraph.NewFieldSpec(fieldmetadata.FieldID, field.TypeInt64))
	)
	if id, ok := fmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fmc.mutation.TableName(); ok {
		_spec.SetField(fieldmetadata.FieldTableName, field.TypeString, value)
		_node.TableName = value
	}
	if value, ok := fmc.mutation.Name(); ok {
		_spec.SetField(fieldmetadata.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fmc.mutation.Cname(); ok {
		_spec.SetField(fieldmetadata.FieldCname, field.TypeString, value)
		_node.Cname = value
	}
	if value, ok := fmc.mutation.DataType(); ok {
		_spec.SetField(fieldmetadata.FieldDataType, field.TypeString, value)
		_node.DataType = value
	}
	if value, ok := fmc.mutation.IsVisible(); ok {
		_spec.SetField(fieldmetadata.FieldIsVisible, field.TypeBool, value)
		_node.IsVisible = value
	}
	if value, ok := fmc.mutation.IsSearchable(); ok {
		_spec.SetField(fieldmetadata.FieldIsSearchable, field.TypeBool, value)
		_node.IsSearchable = value
	}
	if value, ok := fmc.mutation.IsEditable(); ok {
		_spec.SetField(fieldmetadata.FieldIsEditable, field.TypeBool, value)
		_node.IsEditable = value
	}
	if value, ok := fmc.mutation.IsRequired(); ok {
		_spec.SetField(fieldmetadata.FieldIsRequired, field.TypeBool, value)
		_node.IsRequired = value
	}
	if value, ok := fmc.mutation.MaxLength(); ok {
		_spec.SetField(fieldmetadata.FieldMaxLength, field.TypeInt, value)
		_node.MaxLength = value
	}
	if value, ok := fmc.mutation.DefaultValue(); ok {
		_spec.SetField(fieldmetadata.FieldDefaultValue, field.TypeString, value)
		_node.DefaultValue = value
	}
	if value, ok := fmc.mutation.Description(); ok {
		_spec.SetField(fieldmetadata.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fmc.mutation.CreatedTime(); ok {
		_spec.SetField(fieldmetadata.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	if value, ok := fmc.mutation.UpdatedTime(); ok {
		_spec.SetField(fieldmetadata.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = &value
	}
	return _node, _spec
}

// FieldMetadataCreateBulk is the builder for creating many FieldMetadata entities in bulk.
type FieldMetadataCreateBulk struct {
	config
	err      error
	builders []*FieldMetadataCreate
}

// Save creates the FieldMetadata entities in the database.
func (fmcb *FieldMetadataCreateBulk) Save(ctx context.Context) ([]*FieldMetadata, error) {
	if fmcb.err != nil {
		return nil, fmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fmcb.builders))
	nodes := make([]*FieldMetadata, len(fmcb.builders))
	mutators := make([]Mutator, len(fmcb.builders))
	for i := range fmcb.builders {
		func(i int, root context.Context) {
			builder := fmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FieldMetadataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fmcb *FieldMetadataCreateBulk) SaveX(ctx context.Context) []*FieldMetadata {
	v, err := fmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fmcb *FieldMetadataCreateBulk) Exec(ctx context.Context) error {
	_, err := fmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmcb *FieldMetadataCreateBulk) ExecX(ctx context.Context) {
	if err := fmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
