// Code generated by ent, DO NOT EDIT.

package sqllog

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the sqllog type in the database.
	Label = "sql_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTableName holds the string denoting the table_name field in the database.
	FieldTableName = "table_name"
	// FieldQuery holds the string denoting the query field in the database.
	FieldQuery = "query"
	// FieldArgs holds the string denoting the args field in the database.
	FieldArgs = "args"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// FieldDbName holds the string denoting the db_name field in the database.
	FieldDbName = "db_name"
	// FieldPkValue holds the string denoting the pk_value field in the database.
	FieldPkValue = "pk_value"
	// FieldOldData holds the string denoting the old_data field in the database.
	FieldOldData = "old_data"
	// FieldNewData holds the string denoting the new_data field in the database.
	FieldNewData = "new_data"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// Table holds the table name of the sqllog in the database.
	Table = "sql_logs"
)

// Columns holds all SQL columns for sqllog fields.
var Columns = []string{
	FieldID,
	FieldTableName,
	FieldQuery,
	FieldArgs,
	FieldAction,
	FieldDbName,
	FieldPkValue,
	FieldOldData,
	FieldNewData,
	FieldCreator,
	FieldCreatedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TableNameValidator is a validator for the "table_name" field. It is called by the builders before save.
	TableNameValidator func(string) error
	// QueryValidator is a validator for the "query" field. It is called by the builders before save.
	QueryValidator func(string) error
	// ArgsValidator is a validator for the "args" field. It is called by the builders before save.
	ArgsValidator func(string) error
	// DefaultDbName holds the default value on creation for the "db_name" field.
	DefaultDbName string
	// DbNameValidator is a validator for the "db_name" field. It is called by the builders before save.
	DbNameValidator func(string) error
	// DefaultCreator holds the default value on creation for the "creator" field.
	DefaultCreator string
	// CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	CreatorValidator func(string) error
)

// OrderOption defines the ordering options for the SqlLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTableName orders the results by the table_name field.
func ByTableName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName, opts...).ToFunc()
}

// ByQuery orders the results by the query field.
func ByQuery(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuery, opts...).ToFunc()
}

// ByArgs orders the results by the args field.
func ByArgs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArgs, opts...).ToFunc()
}

// ByAction orders the results by the action field.
func ByAction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAction, opts...).ToFunc()
}

// ByDbName orders the results by the db_name field.
func ByDbName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDbName, opts...).ToFunc()
}

// ByPkValue orders the results by the pk_value field.
func ByPkValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPkValue, opts...).ToFunc()
}

// ByCreator orders the results by the creator field.
func ByCreator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreator, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}
