// Code generated by ent, DO NOT EDIT.

package sqllog

import (
	"fmcam/systems/genclients/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLTE(FieldID, id))
}

// TableName applies equality check predicate on the "table_name" field. It's identical to TableNameEQ.
func TableName(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldTableName, v))
}

// Query applies equality check predicate on the "query" field. It's identical to QueryEQ.
func Query(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldQuery, v))
}

// Args applies equality check predicate on the "args" field. It's identical to ArgsEQ.
func Args(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldArgs, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldAction, v))
}

// DbName applies equality check predicate on the "db_name" field. It's identical to DbNameEQ.
func DbName(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldDbName, v))
}

// PkValue applies equality check predicate on the "pk_value" field. It's identical to PkValueEQ.
func PkValue(v int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldPkValue, v))
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldCreator, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldCreatedTime, v))
}

// TableNameEQ applies the EQ predicate on the "table_name" field.
func TableNameEQ(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldTableName, v))
}

// TableNameNEQ applies the NEQ predicate on the "table_name" field.
func TableNameNEQ(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNEQ(FieldTableName, v))
}

// TableNameIn applies the In predicate on the "table_name" field.
func TableNameIn(vs ...string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIn(FieldTableName, vs...))
}

// TableNameNotIn applies the NotIn predicate on the "table_name" field.
func TableNameNotIn(vs ...string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotIn(FieldTableName, vs...))
}

// TableNameGT applies the GT predicate on the "table_name" field.
func TableNameGT(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGT(FieldTableName, v))
}

// TableNameGTE applies the GTE predicate on the "table_name" field.
func TableNameGTE(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGTE(FieldTableName, v))
}

// TableNameLT applies the LT predicate on the "table_name" field.
func TableNameLT(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLT(FieldTableName, v))
}

// TableNameLTE applies the LTE predicate on the "table_name" field.
func TableNameLTE(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLTE(FieldTableName, v))
}

// TableNameContains applies the Contains predicate on the "table_name" field.
func TableNameContains(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldContains(FieldTableName, v))
}

// TableNameHasPrefix applies the HasPrefix predicate on the "table_name" field.
func TableNameHasPrefix(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldHasPrefix(FieldTableName, v))
}

// TableNameHasSuffix applies the HasSuffix predicate on the "table_name" field.
func TableNameHasSuffix(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldHasSuffix(FieldTableName, v))
}

// TableNameEqualFold applies the EqualFold predicate on the "table_name" field.
func TableNameEqualFold(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEqualFold(FieldTableName, v))
}

// TableNameContainsFold applies the ContainsFold predicate on the "table_name" field.
func TableNameContainsFold(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldContainsFold(FieldTableName, v))
}

// QueryEQ applies the EQ predicate on the "query" field.
func QueryEQ(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldQuery, v))
}

// QueryNEQ applies the NEQ predicate on the "query" field.
func QueryNEQ(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNEQ(FieldQuery, v))
}

// QueryIn applies the In predicate on the "query" field.
func QueryIn(vs ...string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIn(FieldQuery, vs...))
}

// QueryNotIn applies the NotIn predicate on the "query" field.
func QueryNotIn(vs ...string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotIn(FieldQuery, vs...))
}

// QueryGT applies the GT predicate on the "query" field.
func QueryGT(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGT(FieldQuery, v))
}

// QueryGTE applies the GTE predicate on the "query" field.
func QueryGTE(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGTE(FieldQuery, v))
}

// QueryLT applies the LT predicate on the "query" field.
func QueryLT(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLT(FieldQuery, v))
}

// QueryLTE applies the LTE predicate on the "query" field.
func QueryLTE(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLTE(FieldQuery, v))
}

// QueryContains applies the Contains predicate on the "query" field.
func QueryContains(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldContains(FieldQuery, v))
}

// QueryHasPrefix applies the HasPrefix predicate on the "query" field.
func QueryHasPrefix(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldHasPrefix(FieldQuery, v))
}

// QueryHasSuffix applies the HasSuffix predicate on the "query" field.
func QueryHasSuffix(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldHasSuffix(FieldQuery, v))
}

// QueryIsNil applies the IsNil predicate on the "query" field.
func QueryIsNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIsNull(FieldQuery))
}

// QueryNotNil applies the NotNil predicate on the "query" field.
func QueryNotNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotNull(FieldQuery))
}

// QueryEqualFold applies the EqualFold predicate on the "query" field.
func QueryEqualFold(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEqualFold(FieldQuery, v))
}

// QueryContainsFold applies the ContainsFold predicate on the "query" field.
func QueryContainsFold(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldContainsFold(FieldQuery, v))
}

// ArgsEQ applies the EQ predicate on the "args" field.
func ArgsEQ(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldArgs, v))
}

// ArgsNEQ applies the NEQ predicate on the "args" field.
func ArgsNEQ(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNEQ(FieldArgs, v))
}

// ArgsIn applies the In predicate on the "args" field.
func ArgsIn(vs ...string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIn(FieldArgs, vs...))
}

// ArgsNotIn applies the NotIn predicate on the "args" field.
func ArgsNotIn(vs ...string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotIn(FieldArgs, vs...))
}

// ArgsGT applies the GT predicate on the "args" field.
func ArgsGT(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGT(FieldArgs, v))
}

// ArgsGTE applies the GTE predicate on the "args" field.
func ArgsGTE(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGTE(FieldArgs, v))
}

// ArgsLT applies the LT predicate on the "args" field.
func ArgsLT(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLT(FieldArgs, v))
}

// ArgsLTE applies the LTE predicate on the "args" field.
func ArgsLTE(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLTE(FieldArgs, v))
}

// ArgsContains applies the Contains predicate on the "args" field.
func ArgsContains(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldContains(FieldArgs, v))
}

// ArgsHasPrefix applies the HasPrefix predicate on the "args" field.
func ArgsHasPrefix(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldHasPrefix(FieldArgs, v))
}

// ArgsHasSuffix applies the HasSuffix predicate on the "args" field.
func ArgsHasSuffix(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldHasSuffix(FieldArgs, v))
}

// ArgsIsNil applies the IsNil predicate on the "args" field.
func ArgsIsNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIsNull(FieldArgs))
}

// ArgsNotNil applies the NotNil predicate on the "args" field.
func ArgsNotNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotNull(FieldArgs))
}

// ArgsEqualFold applies the EqualFold predicate on the "args" field.
func ArgsEqualFold(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEqualFold(FieldArgs, v))
}

// ArgsContainsFold applies the ContainsFold predicate on the "args" field.
func ArgsContainsFold(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldContainsFold(FieldArgs, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldHasSuffix(FieldAction, v))
}

// ActionIsNil applies the IsNil predicate on the "action" field.
func ActionIsNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIsNull(FieldAction))
}

// ActionNotNil applies the NotNil predicate on the "action" field.
func ActionNotNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotNull(FieldAction))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldContainsFold(FieldAction, v))
}

// DbNameEQ applies the EQ predicate on the "db_name" field.
func DbNameEQ(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldDbName, v))
}

// DbNameNEQ applies the NEQ predicate on the "db_name" field.
func DbNameNEQ(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNEQ(FieldDbName, v))
}

// DbNameIn applies the In predicate on the "db_name" field.
func DbNameIn(vs ...string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIn(FieldDbName, vs...))
}

// DbNameNotIn applies the NotIn predicate on the "db_name" field.
func DbNameNotIn(vs ...string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotIn(FieldDbName, vs...))
}

// DbNameGT applies the GT predicate on the "db_name" field.
func DbNameGT(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGT(FieldDbName, v))
}

// DbNameGTE applies the GTE predicate on the "db_name" field.
func DbNameGTE(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGTE(FieldDbName, v))
}

// DbNameLT applies the LT predicate on the "db_name" field.
func DbNameLT(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLT(FieldDbName, v))
}

// DbNameLTE applies the LTE predicate on the "db_name" field.
func DbNameLTE(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLTE(FieldDbName, v))
}

// DbNameContains applies the Contains predicate on the "db_name" field.
func DbNameContains(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldContains(FieldDbName, v))
}

// DbNameHasPrefix applies the HasPrefix predicate on the "db_name" field.
func DbNameHasPrefix(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldHasPrefix(FieldDbName, v))
}

// DbNameHasSuffix applies the HasSuffix predicate on the "db_name" field.
func DbNameHasSuffix(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldHasSuffix(FieldDbName, v))
}

// DbNameIsNil applies the IsNil predicate on the "db_name" field.
func DbNameIsNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIsNull(FieldDbName))
}

// DbNameNotNil applies the NotNil predicate on the "db_name" field.
func DbNameNotNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotNull(FieldDbName))
}

// DbNameEqualFold applies the EqualFold predicate on the "db_name" field.
func DbNameEqualFold(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEqualFold(FieldDbName, v))
}

// DbNameContainsFold applies the ContainsFold predicate on the "db_name" field.
func DbNameContainsFold(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldContainsFold(FieldDbName, v))
}

// PkValueEQ applies the EQ predicate on the "pk_value" field.
func PkValueEQ(v int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldPkValue, v))
}

// PkValueNEQ applies the NEQ predicate on the "pk_value" field.
func PkValueNEQ(v int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNEQ(FieldPkValue, v))
}

// PkValueIn applies the In predicate on the "pk_value" field.
func PkValueIn(vs ...int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIn(FieldPkValue, vs...))
}

// PkValueNotIn applies the NotIn predicate on the "pk_value" field.
func PkValueNotIn(vs ...int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotIn(FieldPkValue, vs...))
}

// PkValueGT applies the GT predicate on the "pk_value" field.
func PkValueGT(v int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGT(FieldPkValue, v))
}

// PkValueGTE applies the GTE predicate on the "pk_value" field.
func PkValueGTE(v int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGTE(FieldPkValue, v))
}

// PkValueLT applies the LT predicate on the "pk_value" field.
func PkValueLT(v int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLT(FieldPkValue, v))
}

// PkValueLTE applies the LTE predicate on the "pk_value" field.
func PkValueLTE(v int) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLTE(FieldPkValue, v))
}

// PkValueIsNil applies the IsNil predicate on the "pk_value" field.
func PkValueIsNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIsNull(FieldPkValue))
}

// PkValueNotNil applies the NotNil predicate on the "pk_value" field.
func PkValueNotNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotNull(FieldPkValue))
}

// OldDataIsNil applies the IsNil predicate on the "old_data" field.
func OldDataIsNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIsNull(FieldOldData))
}

// OldDataNotNil applies the NotNil predicate on the "old_data" field.
func OldDataNotNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotNull(FieldOldData))
}

// NewDataIsNil applies the IsNil predicate on the "new_data" field.
func NewDataIsNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIsNull(FieldNewData))
}

// NewDataNotNil applies the NotNil predicate on the "new_data" field.
func NewDataNotNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotNull(FieldNewData))
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldCreator, v))
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNEQ(FieldCreator, v))
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIn(FieldCreator, vs...))
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotIn(FieldCreator, vs...))
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGT(FieldCreator, v))
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGTE(FieldCreator, v))
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLT(FieldCreator, v))
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLTE(FieldCreator, v))
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldContains(FieldCreator, v))
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldHasPrefix(FieldCreator, v))
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldHasSuffix(FieldCreator, v))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotNull(FieldCreator))
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEqualFold(FieldCreator, v))
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v string) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldContainsFold(FieldCreator, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.SqlLog {
	return predicate.SqlLog(sql.FieldLTE(FieldCreatedTime, v))
}

// CreatedTimeIsNil applies the IsNil predicate on the "created_time" field.
func CreatedTimeIsNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldIsNull(FieldCreatedTime))
}

// CreatedTimeNotNil applies the NotNil predicate on the "created_time" field.
func CreatedTimeNotNil() predicate.SqlLog {
	return predicate.SqlLog(sql.FieldNotNull(FieldCreatedTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SqlLog) predicate.SqlLog {
	return predicate.SqlLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SqlLog) predicate.SqlLog {
	return predicate.SqlLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SqlLog) predicate.SqlLog {
	return predicate.SqlLog(sql.NotPredicates(p))
}
