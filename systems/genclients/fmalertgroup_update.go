// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/fmalertgroup"
	"fmcam/systems/genclients/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FmAlertGroupUpdate is the builder for updating FmAlertGroup entities.
type FmAlertGroupUpdate struct {
	config
	hooks    []Hook
	mutation *FmAlertGroupMutation
}

// Where appends a list predicates to the FmAlertGroupUpdate builder.
func (fagu *FmAlertGroupUpdate) Where(ps ...predicate.FmAlertGroup) *FmAlertGroupUpdate {
	fagu.mutation.Where(ps...)
	return fagu
}

// SetGroupName sets the "group_name" field.
func (fagu *FmAlertGroupUpdate) SetGroupName(s string) *FmAlertGroupUpdate {
	fagu.mutation.SetGroupName(s)
	return fagu
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (fagu *FmAlertGroupUpdate) SetNillableGroupName(s *string) *FmAlertGroupUpdate {
	if s != nil {
		fagu.SetGroupName(*s)
	}
	return fagu
}

// SetGroupType sets the "group_type" field.
func (fagu *FmAlertGroupUpdate) SetGroupType(i int8) *FmAlertGroupUpdate {
	fagu.mutation.ResetGroupType()
	fagu.mutation.SetGroupType(i)
	return fagu
}

// SetNillableGroupType sets the "group_type" field if the given value is not nil.
func (fagu *FmAlertGroupUpdate) SetNillableGroupType(i *int8) *FmAlertGroupUpdate {
	if i != nil {
		fagu.SetGroupType(*i)
	}
	return fagu
}

// AddGroupType adds i to the "group_type" field.
func (fagu *FmAlertGroupUpdate) AddGroupType(i int8) *FmAlertGroupUpdate {
	fagu.mutation.AddGroupType(i)
	return fagu
}

// ClearGroupType clears the value of the "group_type" field.
func (fagu *FmAlertGroupUpdate) ClearGroupType() *FmAlertGroupUpdate {
	fagu.mutation.ClearGroupType()
	return fagu
}

// SetEnabled sets the "enabled" field.
func (fagu *FmAlertGroupUpdate) SetEnabled(b bool) *FmAlertGroupUpdate {
	fagu.mutation.SetEnabled(b)
	return fagu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (fagu *FmAlertGroupUpdate) SetNillableEnabled(b *bool) *FmAlertGroupUpdate {
	if b != nil {
		fagu.SetEnabled(*b)
	}
	return fagu
}

// ClearEnabled clears the value of the "enabled" field.
func (fagu *FmAlertGroupUpdate) ClearEnabled() *FmAlertGroupUpdate {
	fagu.mutation.ClearEnabled()
	return fagu
}

// SetCustomization sets the "customization" field.
func (fagu *FmAlertGroupUpdate) SetCustomization(s string) *FmAlertGroupUpdate {
	fagu.mutation.SetCustomization(s)
	return fagu
}

// SetNillableCustomization sets the "customization" field if the given value is not nil.
func (fagu *FmAlertGroupUpdate) SetNillableCustomization(s *string) *FmAlertGroupUpdate {
	if s != nil {
		fagu.SetCustomization(*s)
	}
	return fagu
}

// ClearCustomization clears the value of the "customization" field.
func (fagu *FmAlertGroupUpdate) ClearCustomization() *FmAlertGroupUpdate {
	fagu.mutation.ClearCustomization()
	return fagu
}

// SetDescription sets the "description" field.
func (fagu *FmAlertGroupUpdate) SetDescription(s string) *FmAlertGroupUpdate {
	fagu.mutation.SetDescription(s)
	return fagu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fagu *FmAlertGroupUpdate) SetNillableDescription(s *string) *FmAlertGroupUpdate {
	if s != nil {
		fagu.SetDescription(*s)
	}
	return fagu
}

// ClearDescription clears the value of the "description" field.
func (fagu *FmAlertGroupUpdate) ClearDescription() *FmAlertGroupUpdate {
	fagu.mutation.ClearDescription()
	return fagu
}

// SetCreator sets the "creator" field.
func (fagu *FmAlertGroupUpdate) SetCreator(s string) *FmAlertGroupUpdate {
	fagu.mutation.SetCreator(s)
	return fagu
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (fagu *FmAlertGroupUpdate) SetNillableCreator(s *string) *FmAlertGroupUpdate {
	if s != nil {
		fagu.SetCreator(*s)
	}
	return fagu
}

// ClearCreator clears the value of the "creator" field.
func (fagu *FmAlertGroupUpdate) ClearCreator() *FmAlertGroupUpdate {
	fagu.mutation.ClearCreator()
	return fagu
}

// SetCreatedTime sets the "created_time" field.
func (fagu *FmAlertGroupUpdate) SetCreatedTime(t time.Time) *FmAlertGroupUpdate {
	fagu.mutation.SetCreatedTime(t)
	return fagu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fagu *FmAlertGroupUpdate) SetNillableCreatedTime(t *time.Time) *FmAlertGroupUpdate {
	if t != nil {
		fagu.SetCreatedTime(*t)
	}
	return fagu
}

// ClearCreatedTime clears the value of the "created_time" field.
func (fagu *FmAlertGroupUpdate) ClearCreatedTime() *FmAlertGroupUpdate {
	fagu.mutation.ClearCreatedTime()
	return fagu
}

// SetUpdatedTime sets the "updated_time" field.
func (fagu *FmAlertGroupUpdate) SetUpdatedTime(t time.Time) *FmAlertGroupUpdate {
	fagu.mutation.SetUpdatedTime(t)
	return fagu
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (fagu *FmAlertGroupUpdate) ClearUpdatedTime() *FmAlertGroupUpdate {
	fagu.mutation.ClearUpdatedTime()
	return fagu
}

// Mutation returns the FmAlertGroupMutation object of the builder.
func (fagu *FmAlertGroupUpdate) Mutation() *FmAlertGroupMutation {
	return fagu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fagu *FmAlertGroupUpdate) Save(ctx context.Context) (int, error) {
	fagu.defaults()
	return withHooks(ctx, fagu.sqlSave, fagu.mutation, fagu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fagu *FmAlertGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := fagu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fagu *FmAlertGroupUpdate) Exec(ctx context.Context) error {
	_, err := fagu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fagu *FmAlertGroupUpdate) ExecX(ctx context.Context) {
	if err := fagu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fagu *FmAlertGroupUpdate) defaults() {
	if _, ok := fagu.mutation.UpdatedTime(); !ok && !fagu.mutation.UpdatedTimeCleared() {
		v := fmalertgroup.UpdateDefaultUpdatedTime()
		fagu.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fagu *FmAlertGroupUpdate) check() error {
	if v, ok := fagu.mutation.GroupName(); ok {
		if err := fmalertgroup.GroupNameValidator(v); err != nil {
			return &ValidationError{Name: "group_name", err: fmt.Errorf(`genclients: validator failed for field "FmAlertGroup.group_name": %w`, err)}
		}
	}
	if v, ok := fagu.mutation.Customization(); ok {
		if err := fmalertgroup.CustomizationValidator(v); err != nil {
			return &ValidationError{Name: "customization", err: fmt.Errorf(`genclients: validator failed for field "FmAlertGroup.customization": %w`, err)}
		}
	}
	if v, ok := fagu.mutation.Description(); ok {
		if err := fmalertgroup.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "FmAlertGroup.description": %w`, err)}
		}
	}
	if v, ok := fagu.mutation.Creator(); ok {
		if err := fmalertgroup.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "FmAlertGroup.creator": %w`, err)}
		}
	}
	return nil
}

func (fagu *FmAlertGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fagu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fmalertgroup.Table, fmalertgroup.Columns, sqlgraph.NewFieldSpec(fmalertgroup.FieldID, field.TypeInt64))
	if ps := fagu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fagu.mutation.GroupName(); ok {
		_spec.SetField(fmalertgroup.FieldGroupName, field.TypeString, value)
	}
	if value, ok := fagu.mutation.GroupType(); ok {
		_spec.SetField(fmalertgroup.FieldGroupType, field.TypeInt8, value)
	}
	if value, ok := fagu.mutation.AddedGroupType(); ok {
		_spec.AddField(fmalertgroup.FieldGroupType, field.TypeInt8, value)
	}
	if fagu.mutation.GroupTypeCleared() {
		_spec.ClearField(fmalertgroup.FieldGroupType, field.TypeInt8)
	}
	if value, ok := fagu.mutation.Enabled(); ok {
		_spec.SetField(fmalertgroup.FieldEnabled, field.TypeBool, value)
	}
	if fagu.mutation.EnabledCleared() {
		_spec.ClearField(fmalertgroup.FieldEnabled, field.TypeBool)
	}
	if value, ok := fagu.mutation.Customization(); ok {
		_spec.SetField(fmalertgroup.FieldCustomization, field.TypeString, value)
	}
	if fagu.mutation.CustomizationCleared() {
		_spec.ClearField(fmalertgroup.FieldCustomization, field.TypeString)
	}
	if value, ok := fagu.mutation.Description(); ok {
		_spec.SetField(fmalertgroup.FieldDescription, field.TypeString, value)
	}
	if fagu.mutation.DescriptionCleared() {
		_spec.ClearField(fmalertgroup.FieldDescription, field.TypeString)
	}
	if value, ok := fagu.mutation.Creator(); ok {
		_spec.SetField(fmalertgroup.FieldCreator, field.TypeString, value)
	}
	if fagu.mutation.CreatorCleared() {
		_spec.ClearField(fmalertgroup.FieldCreator, field.TypeString)
	}
	if fagu.mutation.UniqEnabledGroupCleared() {
		_spec.ClearField(fmalertgroup.FieldUniqEnabledGroup, field.TypeString)
	}
	if value, ok := fagu.mutation.CreatedTime(); ok {
		_spec.SetField(fmalertgroup.FieldCreatedTime, field.TypeTime, value)
	}
	if fagu.mutation.CreatedTimeCleared() {
		_spec.ClearField(fmalertgroup.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := fagu.mutation.UpdatedTime(); ok {
		_spec.SetField(fmalertgroup.FieldUpdatedTime, field.TypeTime, value)
	}
	if fagu.mutation.UpdatedTimeCleared() {
		_spec.ClearField(fmalertgroup.FieldUpdatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fagu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fmalertgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fagu.mutation.done = true
	return n, nil
}

// FmAlertGroupUpdateOne is the builder for updating a single FmAlertGroup entity.
type FmAlertGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FmAlertGroupMutation
}

// SetGroupName sets the "group_name" field.
func (faguo *FmAlertGroupUpdateOne) SetGroupName(s string) *FmAlertGroupUpdateOne {
	faguo.mutation.SetGroupName(s)
	return faguo
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (faguo *FmAlertGroupUpdateOne) SetNillableGroupName(s *string) *FmAlertGroupUpdateOne {
	if s != nil {
		faguo.SetGroupName(*s)
	}
	return faguo
}

// SetGroupType sets the "group_type" field.
func (faguo *FmAlertGroupUpdateOne) SetGroupType(i int8) *FmAlertGroupUpdateOne {
	faguo.mutation.ResetGroupType()
	faguo.mutation.SetGroupType(i)
	return faguo
}

// SetNillableGroupType sets the "group_type" field if the given value is not nil.
func (faguo *FmAlertGroupUpdateOne) SetNillableGroupType(i *int8) *FmAlertGroupUpdateOne {
	if i != nil {
		faguo.SetGroupType(*i)
	}
	return faguo
}

// AddGroupType adds i to the "group_type" field.
func (faguo *FmAlertGroupUpdateOne) AddGroupType(i int8) *FmAlertGroupUpdateOne {
	faguo.mutation.AddGroupType(i)
	return faguo
}

// ClearGroupType clears the value of the "group_type" field.
func (faguo *FmAlertGroupUpdateOne) ClearGroupType() *FmAlertGroupUpdateOne {
	faguo.mutation.ClearGroupType()
	return faguo
}

// SetEnabled sets the "enabled" field.
func (faguo *FmAlertGroupUpdateOne) SetEnabled(b bool) *FmAlertGroupUpdateOne {
	faguo.mutation.SetEnabled(b)
	return faguo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (faguo *FmAlertGroupUpdateOne) SetNillableEnabled(b *bool) *FmAlertGroupUpdateOne {
	if b != nil {
		faguo.SetEnabled(*b)
	}
	return faguo
}

// ClearEnabled clears the value of the "enabled" field.
func (faguo *FmAlertGroupUpdateOne) ClearEnabled() *FmAlertGroupUpdateOne {
	faguo.mutation.ClearEnabled()
	return faguo
}

// SetCustomization sets the "customization" field.
func (faguo *FmAlertGroupUpdateOne) SetCustomization(s string) *FmAlertGroupUpdateOne {
	faguo.mutation.SetCustomization(s)
	return faguo
}

// SetNillableCustomization sets the "customization" field if the given value is not nil.
func (faguo *FmAlertGroupUpdateOne) SetNillableCustomization(s *string) *FmAlertGroupUpdateOne {
	if s != nil {
		faguo.SetCustomization(*s)
	}
	return faguo
}

// ClearCustomization clears the value of the "customization" field.
func (faguo *FmAlertGroupUpdateOne) ClearCustomization() *FmAlertGroupUpdateOne {
	faguo.mutation.ClearCustomization()
	return faguo
}

// SetDescription sets the "description" field.
func (faguo *FmAlertGroupUpdateOne) SetDescription(s string) *FmAlertGroupUpdateOne {
	faguo.mutation.SetDescription(s)
	return faguo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (faguo *FmAlertGroupUpdateOne) SetNillableDescription(s *string) *FmAlertGroupUpdateOne {
	if s != nil {
		faguo.SetDescription(*s)
	}
	return faguo
}

// ClearDescription clears the value of the "description" field.
func (faguo *FmAlertGroupUpdateOne) ClearDescription() *FmAlertGroupUpdateOne {
	faguo.mutation.ClearDescription()
	return faguo
}

// SetCreator sets the "creator" field.
func (faguo *FmAlertGroupUpdateOne) SetCreator(s string) *FmAlertGroupUpdateOne {
	faguo.mutation.SetCreator(s)
	return faguo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (faguo *FmAlertGroupUpdateOne) SetNillableCreator(s *string) *FmAlertGroupUpdateOne {
	if s != nil {
		faguo.SetCreator(*s)
	}
	return faguo
}

// ClearCreator clears the value of the "creator" field.
func (faguo *FmAlertGroupUpdateOne) ClearCreator() *FmAlertGroupUpdateOne {
	faguo.mutation.ClearCreator()
	return faguo
}

// SetCreatedTime sets the "created_time" field.
func (faguo *FmAlertGroupUpdateOne) SetCreatedTime(t time.Time) *FmAlertGroupUpdateOne {
	faguo.mutation.SetCreatedTime(t)
	return faguo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (faguo *FmAlertGroupUpdateOne) SetNillableCreatedTime(t *time.Time) *FmAlertGroupUpdateOne {
	if t != nil {
		faguo.SetCreatedTime(*t)
	}
	return faguo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (faguo *FmAlertGroupUpdateOne) ClearCreatedTime() *FmAlertGroupUpdateOne {
	faguo.mutation.ClearCreatedTime()
	return faguo
}

// SetUpdatedTime sets the "updated_time" field.
func (faguo *FmAlertGroupUpdateOne) SetUpdatedTime(t time.Time) *FmAlertGroupUpdateOne {
	faguo.mutation.SetUpdatedTime(t)
	return faguo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (faguo *FmAlertGroupUpdateOne) ClearUpdatedTime() *FmAlertGroupUpdateOne {
	faguo.mutation.ClearUpdatedTime()
	return faguo
}

// Mutation returns the FmAlertGroupMutation object of the builder.
func (faguo *FmAlertGroupUpdateOne) Mutation() *FmAlertGroupMutation {
	return faguo.mutation
}

// Where appends a list predicates to the FmAlertGroupUpdate builder.
func (faguo *FmAlertGroupUpdateOne) Where(ps ...predicate.FmAlertGroup) *FmAlertGroupUpdateOne {
	faguo.mutation.Where(ps...)
	return faguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (faguo *FmAlertGroupUpdateOne) Select(field string, fields ...string) *FmAlertGroupUpdateOne {
	faguo.fields = append([]string{field}, fields...)
	return faguo
}

// Save executes the query and returns the updated FmAlertGroup entity.
func (faguo *FmAlertGroupUpdateOne) Save(ctx context.Context) (*FmAlertGroup, error) {
	faguo.defaults()
	return withHooks(ctx, faguo.sqlSave, faguo.mutation, faguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (faguo *FmAlertGroupUpdateOne) SaveX(ctx context.Context) *FmAlertGroup {
	node, err := faguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (faguo *FmAlertGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := faguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (faguo *FmAlertGroupUpdateOne) ExecX(ctx context.Context) {
	if err := faguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (faguo *FmAlertGroupUpdateOne) defaults() {
	if _, ok := faguo.mutation.UpdatedTime(); !ok && !faguo.mutation.UpdatedTimeCleared() {
		v := fmalertgroup.UpdateDefaultUpdatedTime()
		faguo.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (faguo *FmAlertGroupUpdateOne) check() error {
	if v, ok := faguo.mutation.GroupName(); ok {
		if err := fmalertgroup.GroupNameValidator(v); err != nil {
			return &ValidationError{Name: "group_name", err: fmt.Errorf(`genclients: validator failed for field "FmAlertGroup.group_name": %w`, err)}
		}
	}
	if v, ok := faguo.mutation.Customization(); ok {
		if err := fmalertgroup.CustomizationValidator(v); err != nil {
			return &ValidationError{Name: "customization", err: fmt.Errorf(`genclients: validator failed for field "FmAlertGroup.customization": %w`, err)}
		}
	}
	if v, ok := faguo.mutation.Description(); ok {
		if err := fmalertgroup.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "FmAlertGroup.description": %w`, err)}
		}
	}
	if v, ok := faguo.mutation.Creator(); ok {
		if err := fmalertgroup.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "FmAlertGroup.creator": %w`, err)}
		}
	}
	return nil
}

func (faguo *FmAlertGroupUpdateOne) sqlSave(ctx context.Context) (_node *FmAlertGroup, err error) {
	if err := faguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fmalertgroup.Table, fmalertgroup.Columns, sqlgraph.NewFieldSpec(fmalertgroup.FieldID, field.TypeInt64))
	id, ok := faguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "FmAlertGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := faguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fmalertgroup.FieldID)
		for _, f := range fields {
			if !fmalertgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != fmalertgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := faguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := faguo.mutation.GroupName(); ok {
		_spec.SetField(fmalertgroup.FieldGroupName, field.TypeString, value)
	}
	if value, ok := faguo.mutation.GroupType(); ok {
		_spec.SetField(fmalertgroup.FieldGroupType, field.TypeInt8, value)
	}
	if value, ok := faguo.mutation.AddedGroupType(); ok {
		_spec.AddField(fmalertgroup.FieldGroupType, field.TypeInt8, value)
	}
	if faguo.mutation.GroupTypeCleared() {
		_spec.ClearField(fmalertgroup.FieldGroupType, field.TypeInt8)
	}
	if value, ok := faguo.mutation.Enabled(); ok {
		_spec.SetField(fmalertgroup.FieldEnabled, field.TypeBool, value)
	}
	if faguo.mutation.EnabledCleared() {
		_spec.ClearField(fmalertgroup.FieldEnabled, field.TypeBool)
	}
	if value, ok := faguo.mutation.Customization(); ok {
		_spec.SetField(fmalertgroup.FieldCustomization, field.TypeString, value)
	}
	if faguo.mutation.CustomizationCleared() {
		_spec.ClearField(fmalertgroup.FieldCustomization, field.TypeString)
	}
	if value, ok := faguo.mutation.Description(); ok {
		_spec.SetField(fmalertgroup.FieldDescription, field.TypeString, value)
	}
	if faguo.mutation.DescriptionCleared() {
		_spec.ClearField(fmalertgroup.FieldDescription, field.TypeString)
	}
	if value, ok := faguo.mutation.Creator(); ok {
		_spec.SetField(fmalertgroup.FieldCreator, field.TypeString, value)
	}
	if faguo.mutation.CreatorCleared() {
		_spec.ClearField(fmalertgroup.FieldCreator, field.TypeString)
	}
	if faguo.mutation.UniqEnabledGroupCleared() {
		_spec.ClearField(fmalertgroup.FieldUniqEnabledGroup, field.TypeString)
	}
	if value, ok := faguo.mutation.CreatedTime(); ok {
		_spec.SetField(fmalertgroup.FieldCreatedTime, field.TypeTime, value)
	}
	if faguo.mutation.CreatedTimeCleared() {
		_spec.ClearField(fmalertgroup.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := faguo.mutation.UpdatedTime(); ok {
		_spec.SetField(fmalertgroup.FieldUpdatedTime, field.TypeTime, value)
	}
	if faguo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(fmalertgroup.FieldUpdatedTime, field.TypeTime)
	}
	_node = &FmAlertGroup{config: faguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, faguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fmalertgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	faguo.mutation.done = true
	return _node, nil
}
