// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"fmcam/systems/genclients/fmuseraccount"
	"fmcam/systems/genclients/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FmUserAccountDelete is the builder for deleting a FmUserAccount entity.
type FmUserAccountDelete struct {
	config
	hooks    []Hook
	mutation *FmUserAccountMutation
}

// Where appends a list predicates to the FmUserAccountDelete builder.
func (fuad *FmUserAccountDelete) Where(ps ...predicate.FmUserAccount) *FmUserAccountDelete {
	fuad.mutation.Where(ps...)
	return fuad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fuad *FmUserAccountDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fuad.sqlExec, fuad.mutation, fuad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fuad *FmUserAccountDelete) ExecX(ctx context.Context) int {
	n, err := fuad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fuad *FmUserAccountDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(fmuseraccount.Table, sqlgraph.NewFieldSpec(fmuseraccount.FieldID, field.TypeInt64))
	if ps := fuad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fuad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fuad.mutation.done = true
	return affected, err
}

// FmUserAccountDeleteOne is the builder for deleting a single FmUserAccount entity.
type FmUserAccountDeleteOne struct {
	fuad *FmUserAccountDelete
}

// Where appends a list predicates to the FmUserAccountDelete builder.
func (fuado *FmUserAccountDeleteOne) Where(ps ...predicate.FmUserAccount) *FmUserAccountDeleteOne {
	fuado.fuad.mutation.Where(ps...)
	return fuado
}

// Exec executes the deletion query.
func (fuado *FmUserAccountDeleteOne) Exec(ctx context.Context) error {
	n, err := fuado.fuad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{fmuseraccount.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fuado *FmUserAccountDeleteOne) ExecX(ctx context.Context) {
	if err := fuado.Exec(ctx); err != nil {
		panic(err)
	}
}
