// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/fmdedicatedservices"
	"fmcam/systems/genclients/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FmDedicatedServicesUpdate is the builder for updating FmDedicatedServices entities.
type FmDedicatedServicesUpdate struct {
	config
	hooks    []Hook
	mutation *FmDedicatedServicesMutation
}

// Where appends a list predicates to the FmDedicatedServicesUpdate builder.
func (fdsu *FmDedicatedServicesUpdate) Where(ps ...predicate.FmDedicatedServices) *FmDedicatedServicesUpdate {
	fdsu.mutation.Where(ps...)
	return fdsu
}

// SetWorkID sets the "work_id" field.
func (fdsu *FmDedicatedServicesUpdate) SetWorkID(i int64) *FmDedicatedServicesUpdate {
	fdsu.mutation.ResetWorkID()
	fdsu.mutation.SetWorkID(i)
	return fdsu
}

// SetNillableWorkID sets the "work_id" field if the given value is not nil.
func (fdsu *FmDedicatedServicesUpdate) SetNillableWorkID(i *int64) *FmDedicatedServicesUpdate {
	if i != nil {
		fdsu.SetWorkID(*i)
	}
	return fdsu
}

// AddWorkID adds i to the "work_id" field.
func (fdsu *FmDedicatedServicesUpdate) AddWorkID(i int64) *FmDedicatedServicesUpdate {
	fdsu.mutation.AddWorkID(i)
	return fdsu
}

// ClearWorkID clears the value of the "work_id" field.
func (fdsu *FmDedicatedServicesUpdate) ClearWorkID() *FmDedicatedServicesUpdate {
	fdsu.mutation.ClearWorkID()
	return fdsu
}

// SetContacts sets the "contacts" field.
func (fdsu *FmDedicatedServicesUpdate) SetContacts(s string) *FmDedicatedServicesUpdate {
	fdsu.mutation.SetContacts(s)
	return fdsu
}

// SetNillableContacts sets the "contacts" field if the given value is not nil.
func (fdsu *FmDedicatedServicesUpdate) SetNillableContacts(s *string) *FmDedicatedServicesUpdate {
	if s != nil {
		fdsu.SetContacts(*s)
	}
	return fdsu
}

// ClearContacts clears the value of the "contacts" field.
func (fdsu *FmDedicatedServicesUpdate) ClearContacts() *FmDedicatedServicesUpdate {
	fdsu.mutation.ClearContacts()
	return fdsu
}

// SetSupplier sets the "supplier" field.
func (fdsu *FmDedicatedServicesUpdate) SetSupplier(s string) *FmDedicatedServicesUpdate {
	fdsu.mutation.SetSupplier(s)
	return fdsu
}

// SetNillableSupplier sets the "supplier" field if the given value is not nil.
func (fdsu *FmDedicatedServicesUpdate) SetNillableSupplier(s *string) *FmDedicatedServicesUpdate {
	if s != nil {
		fdsu.SetSupplier(*s)
	}
	return fdsu
}

// ClearSupplier clears the value of the "supplier" field.
func (fdsu *FmDedicatedServicesUpdate) ClearSupplier() *FmDedicatedServicesUpdate {
	fdsu.mutation.ClearSupplier()
	return fdsu
}

// SetPhonenum sets the "phonenum" field.
func (fdsu *FmDedicatedServicesUpdate) SetPhonenum(s string) *FmDedicatedServicesUpdate {
	fdsu.mutation.SetPhonenum(s)
	return fdsu
}

// SetNillablePhonenum sets the "phonenum" field if the given value is not nil.
func (fdsu *FmDedicatedServicesUpdate) SetNillablePhonenum(s *string) *FmDedicatedServicesUpdate {
	if s != nil {
		fdsu.SetPhonenum(*s)
	}
	return fdsu
}

// ClearPhonenum clears the value of the "phonenum" field.
func (fdsu *FmDedicatedServicesUpdate) ClearPhonenum() *FmDedicatedServicesUpdate {
	fdsu.mutation.ClearPhonenum()
	return fdsu
}

// SetEmail sets the "email" field.
func (fdsu *FmDedicatedServicesUpdate) SetEmail(s string) *FmDedicatedServicesUpdate {
	fdsu.mutation.SetEmail(s)
	return fdsu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (fdsu *FmDedicatedServicesUpdate) SetNillableEmail(s *string) *FmDedicatedServicesUpdate {
	if s != nil {
		fdsu.SetEmail(*s)
	}
	return fdsu
}

// ClearEmail clears the value of the "email" field.
func (fdsu *FmDedicatedServicesUpdate) ClearEmail() *FmDedicatedServicesUpdate {
	fdsu.mutation.ClearEmail()
	return fdsu
}

// SetFax sets the "fax" field.
func (fdsu *FmDedicatedServicesUpdate) SetFax(s string) *FmDedicatedServicesUpdate {
	fdsu.mutation.SetFax(s)
	return fdsu
}

// SetNillableFax sets the "fax" field if the given value is not nil.
func (fdsu *FmDedicatedServicesUpdate) SetNillableFax(s *string) *FmDedicatedServicesUpdate {
	if s != nil {
		fdsu.SetFax(*s)
	}
	return fdsu
}

// ClearFax clears the value of the "fax" field.
func (fdsu *FmDedicatedServicesUpdate) ClearFax() *FmDedicatedServicesUpdate {
	fdsu.mutation.ClearFax()
	return fdsu
}

// SetDescription sets the "description" field.
func (fdsu *FmDedicatedServicesUpdate) SetDescription(s string) *FmDedicatedServicesUpdate {
	fdsu.mutation.SetDescription(s)
	return fdsu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fdsu *FmDedicatedServicesUpdate) SetNillableDescription(s *string) *FmDedicatedServicesUpdate {
	if s != nil {
		fdsu.SetDescription(*s)
	}
	return fdsu
}

// ClearDescription clears the value of the "description" field.
func (fdsu *FmDedicatedServicesUpdate) ClearDescription() *FmDedicatedServicesUpdate {
	fdsu.mutation.ClearDescription()
	return fdsu
}

// SetCreator sets the "creator" field.
func (fdsu *FmDedicatedServicesUpdate) SetCreator(s string) *FmDedicatedServicesUpdate {
	fdsu.mutation.SetCreator(s)
	return fdsu
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (fdsu *FmDedicatedServicesUpdate) SetNillableCreator(s *string) *FmDedicatedServicesUpdate {
	if s != nil {
		fdsu.SetCreator(*s)
	}
	return fdsu
}

// ClearCreator clears the value of the "creator" field.
func (fdsu *FmDedicatedServicesUpdate) ClearCreator() *FmDedicatedServicesUpdate {
	fdsu.mutation.ClearCreator()
	return fdsu
}

// SetCreatedTime sets the "created_time" field.
func (fdsu *FmDedicatedServicesUpdate) SetCreatedTime(t time.Time) *FmDedicatedServicesUpdate {
	fdsu.mutation.SetCreatedTime(t)
	return fdsu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fdsu *FmDedicatedServicesUpdate) SetNillableCreatedTime(t *time.Time) *FmDedicatedServicesUpdate {
	if t != nil {
		fdsu.SetCreatedTime(*t)
	}
	return fdsu
}

// ClearCreatedTime clears the value of the "created_time" field.
func (fdsu *FmDedicatedServicesUpdate) ClearCreatedTime() *FmDedicatedServicesUpdate {
	fdsu.mutation.ClearCreatedTime()
	return fdsu
}

// Mutation returns the FmDedicatedServicesMutation object of the builder.
func (fdsu *FmDedicatedServicesUpdate) Mutation() *FmDedicatedServicesMutation {
	return fdsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fdsu *FmDedicatedServicesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fdsu.sqlSave, fdsu.mutation, fdsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fdsu *FmDedicatedServicesUpdate) SaveX(ctx context.Context) int {
	affected, err := fdsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fdsu *FmDedicatedServicesUpdate) Exec(ctx context.Context) error {
	_, err := fdsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdsu *FmDedicatedServicesUpdate) ExecX(ctx context.Context) {
	if err := fdsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fdsu *FmDedicatedServicesUpdate) check() error {
	if v, ok := fdsu.mutation.Contacts(); ok {
		if err := fmdedicatedservices.ContactsValidator(v); err != nil {
			return &ValidationError{Name: "contacts", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.contacts": %w`, err)}
		}
	}
	if v, ok := fdsu.mutation.Supplier(); ok {
		if err := fmdedicatedservices.SupplierValidator(v); err != nil {
			return &ValidationError{Name: "supplier", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.supplier": %w`, err)}
		}
	}
	if v, ok := fdsu.mutation.Phonenum(); ok {
		if err := fmdedicatedservices.PhonenumValidator(v); err != nil {
			return &ValidationError{Name: "phonenum", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.phonenum": %w`, err)}
		}
	}
	if v, ok := fdsu.mutation.Email(); ok {
		if err := fmdedicatedservices.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.email": %w`, err)}
		}
	}
	if v, ok := fdsu.mutation.Fax(); ok {
		if err := fmdedicatedservices.FaxValidator(v); err != nil {
			return &ValidationError{Name: "fax", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.fax": %w`, err)}
		}
	}
	if v, ok := fdsu.mutation.Description(); ok {
		if err := fmdedicatedservices.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.description": %w`, err)}
		}
	}
	if v, ok := fdsu.mutation.Creator(); ok {
		if err := fmdedicatedservices.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.creator": %w`, err)}
		}
	}
	return nil
}

func (fdsu *FmDedicatedServicesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fdsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fmdedicatedservices.Table, fmdedicatedservices.Columns, sqlgraph.NewFieldSpec(fmdedicatedservices.FieldID, field.TypeInt64))
	if ps := fdsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fdsu.mutation.WorkID(); ok {
		_spec.SetField(fmdedicatedservices.FieldWorkID, field.TypeInt64, value)
	}
	if value, ok := fdsu.mutation.AddedWorkID(); ok {
		_spec.AddField(fmdedicatedservices.FieldWorkID, field.TypeInt64, value)
	}
	if fdsu.mutation.WorkIDCleared() {
		_spec.ClearField(fmdedicatedservices.FieldWorkID, field.TypeInt64)
	}
	if value, ok := fdsu.mutation.Contacts(); ok {
		_spec.SetField(fmdedicatedservices.FieldContacts, field.TypeString, value)
	}
	if fdsu.mutation.ContactsCleared() {
		_spec.ClearField(fmdedicatedservices.FieldContacts, field.TypeString)
	}
	if value, ok := fdsu.mutation.Supplier(); ok {
		_spec.SetField(fmdedicatedservices.FieldSupplier, field.TypeString, value)
	}
	if fdsu.mutation.SupplierCleared() {
		_spec.ClearField(fmdedicatedservices.FieldSupplier, field.TypeString)
	}
	if value, ok := fdsu.mutation.Phonenum(); ok {
		_spec.SetField(fmdedicatedservices.FieldPhonenum, field.TypeString, value)
	}
	if fdsu.mutation.PhonenumCleared() {
		_spec.ClearField(fmdedicatedservices.FieldPhonenum, field.TypeString)
	}
	if value, ok := fdsu.mutation.Email(); ok {
		_spec.SetField(fmdedicatedservices.FieldEmail, field.TypeString, value)
	}
	if fdsu.mutation.EmailCleared() {
		_spec.ClearField(fmdedicatedservices.FieldEmail, field.TypeString)
	}
	if value, ok := fdsu.mutation.Fax(); ok {
		_spec.SetField(fmdedicatedservices.FieldFax, field.TypeString, value)
	}
	if fdsu.mutation.FaxCleared() {
		_spec.ClearField(fmdedicatedservices.FieldFax, field.TypeString)
	}
	if value, ok := fdsu.mutation.Description(); ok {
		_spec.SetField(fmdedicatedservices.FieldDescription, field.TypeString, value)
	}
	if fdsu.mutation.DescriptionCleared() {
		_spec.ClearField(fmdedicatedservices.FieldDescription, field.TypeString)
	}
	if value, ok := fdsu.mutation.Creator(); ok {
		_spec.SetField(fmdedicatedservices.FieldCreator, field.TypeString, value)
	}
	if fdsu.mutation.CreatorCleared() {
		_spec.ClearField(fmdedicatedservices.FieldCreator, field.TypeString)
	}
	if value, ok := fdsu.mutation.CreatedTime(); ok {
		_spec.SetField(fmdedicatedservices.FieldCreatedTime, field.TypeTime, value)
	}
	if fdsu.mutation.CreatedTimeCleared() {
		_spec.ClearField(fmdedicatedservices.FieldCreatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fdsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fmdedicatedservices.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fdsu.mutation.done = true
	return n, nil
}

// FmDedicatedServicesUpdateOne is the builder for updating a single FmDedicatedServices entity.
type FmDedicatedServicesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FmDedicatedServicesMutation
}

// SetWorkID sets the "work_id" field.
func (fdsuo *FmDedicatedServicesUpdateOne) SetWorkID(i int64) *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.ResetWorkID()
	fdsuo.mutation.SetWorkID(i)
	return fdsuo
}

// SetNillableWorkID sets the "work_id" field if the given value is not nil.
func (fdsuo *FmDedicatedServicesUpdateOne) SetNillableWorkID(i *int64) *FmDedicatedServicesUpdateOne {
	if i != nil {
		fdsuo.SetWorkID(*i)
	}
	return fdsuo
}

// AddWorkID adds i to the "work_id" field.
func (fdsuo *FmDedicatedServicesUpdateOne) AddWorkID(i int64) *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.AddWorkID(i)
	return fdsuo
}

// ClearWorkID clears the value of the "work_id" field.
func (fdsuo *FmDedicatedServicesUpdateOne) ClearWorkID() *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.ClearWorkID()
	return fdsuo
}

// SetContacts sets the "contacts" field.
func (fdsuo *FmDedicatedServicesUpdateOne) SetContacts(s string) *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.SetContacts(s)
	return fdsuo
}

// SetNillableContacts sets the "contacts" field if the given value is not nil.
func (fdsuo *FmDedicatedServicesUpdateOne) SetNillableContacts(s *string) *FmDedicatedServicesUpdateOne {
	if s != nil {
		fdsuo.SetContacts(*s)
	}
	return fdsuo
}

// ClearContacts clears the value of the "contacts" field.
func (fdsuo *FmDedicatedServicesUpdateOne) ClearContacts() *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.ClearContacts()
	return fdsuo
}

// SetSupplier sets the "supplier" field.
func (fdsuo *FmDedicatedServicesUpdateOne) SetSupplier(s string) *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.SetSupplier(s)
	return fdsuo
}

// SetNillableSupplier sets the "supplier" field if the given value is not nil.
func (fdsuo *FmDedicatedServicesUpdateOne) SetNillableSupplier(s *string) *FmDedicatedServicesUpdateOne {
	if s != nil {
		fdsuo.SetSupplier(*s)
	}
	return fdsuo
}

// ClearSupplier clears the value of the "supplier" field.
func (fdsuo *FmDedicatedServicesUpdateOne) ClearSupplier() *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.ClearSupplier()
	return fdsuo
}

// SetPhonenum sets the "phonenum" field.
func (fdsuo *FmDedicatedServicesUpdateOne) SetPhonenum(s string) *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.SetPhonenum(s)
	return fdsuo
}

// SetNillablePhonenum sets the "phonenum" field if the given value is not nil.
func (fdsuo *FmDedicatedServicesUpdateOne) SetNillablePhonenum(s *string) *FmDedicatedServicesUpdateOne {
	if s != nil {
		fdsuo.SetPhonenum(*s)
	}
	return fdsuo
}

// ClearPhonenum clears the value of the "phonenum" field.
func (fdsuo *FmDedicatedServicesUpdateOne) ClearPhonenum() *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.ClearPhonenum()
	return fdsuo
}

// SetEmail sets the "email" field.
func (fdsuo *FmDedicatedServicesUpdateOne) SetEmail(s string) *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.SetEmail(s)
	return fdsuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (fdsuo *FmDedicatedServicesUpdateOne) SetNillableEmail(s *string) *FmDedicatedServicesUpdateOne {
	if s != nil {
		fdsuo.SetEmail(*s)
	}
	return fdsuo
}

// ClearEmail clears the value of the "email" field.
func (fdsuo *FmDedicatedServicesUpdateOne) ClearEmail() *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.ClearEmail()
	return fdsuo
}

// SetFax sets the "fax" field.
func (fdsuo *FmDedicatedServicesUpdateOne) SetFax(s string) *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.SetFax(s)
	return fdsuo
}

// SetNillableFax sets the "fax" field if the given value is not nil.
func (fdsuo *FmDedicatedServicesUpdateOne) SetNillableFax(s *string) *FmDedicatedServicesUpdateOne {
	if s != nil {
		fdsuo.SetFax(*s)
	}
	return fdsuo
}

// ClearFax clears the value of the "fax" field.
func (fdsuo *FmDedicatedServicesUpdateOne) ClearFax() *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.ClearFax()
	return fdsuo
}

// SetDescription sets the "description" field.
func (fdsuo *FmDedicatedServicesUpdateOne) SetDescription(s string) *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.SetDescription(s)
	return fdsuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fdsuo *FmDedicatedServicesUpdateOne) SetNillableDescription(s *string) *FmDedicatedServicesUpdateOne {
	if s != nil {
		fdsuo.SetDescription(*s)
	}
	return fdsuo
}

// ClearDescription clears the value of the "description" field.
func (fdsuo *FmDedicatedServicesUpdateOne) ClearDescription() *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.ClearDescription()
	return fdsuo
}

// SetCreator sets the "creator" field.
func (fdsuo *FmDedicatedServicesUpdateOne) SetCreator(s string) *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.SetCreator(s)
	return fdsuo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (fdsuo *FmDedicatedServicesUpdateOne) SetNillableCreator(s *string) *FmDedicatedServicesUpdateOne {
	if s != nil {
		fdsuo.SetCreator(*s)
	}
	return fdsuo
}

// ClearCreator clears the value of the "creator" field.
func (fdsuo *FmDedicatedServicesUpdateOne) ClearCreator() *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.ClearCreator()
	return fdsuo
}

// SetCreatedTime sets the "created_time" field.
func (fdsuo *FmDedicatedServicesUpdateOne) SetCreatedTime(t time.Time) *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.SetCreatedTime(t)
	return fdsuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fdsuo *FmDedicatedServicesUpdateOne) SetNillableCreatedTime(t *time.Time) *FmDedicatedServicesUpdateOne {
	if t != nil {
		fdsuo.SetCreatedTime(*t)
	}
	return fdsuo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (fdsuo *FmDedicatedServicesUpdateOne) ClearCreatedTime() *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.ClearCreatedTime()
	return fdsuo
}

// Mutation returns the FmDedicatedServicesMutation object of the builder.
func (fdsuo *FmDedicatedServicesUpdateOne) Mutation() *FmDedicatedServicesMutation {
	return fdsuo.mutation
}

// Where appends a list predicates to the FmDedicatedServicesUpdate builder.
func (fdsuo *FmDedicatedServicesUpdateOne) Where(ps ...predicate.FmDedicatedServices) *FmDedicatedServicesUpdateOne {
	fdsuo.mutation.Where(ps...)
	return fdsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fdsuo *FmDedicatedServicesUpdateOne) Select(field string, fields ...string) *FmDedicatedServicesUpdateOne {
	fdsuo.fields = append([]string{field}, fields...)
	return fdsuo
}

// Save executes the query and returns the updated FmDedicatedServices entity.
func (fdsuo *FmDedicatedServicesUpdateOne) Save(ctx context.Context) (*FmDedicatedServices, error) {
	return withHooks(ctx, fdsuo.sqlSave, fdsuo.mutation, fdsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fdsuo *FmDedicatedServicesUpdateOne) SaveX(ctx context.Context) *FmDedicatedServices {
	node, err := fdsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fdsuo *FmDedicatedServicesUpdateOne) Exec(ctx context.Context) error {
	_, err := fdsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdsuo *FmDedicatedServicesUpdateOne) ExecX(ctx context.Context) {
	if err := fdsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fdsuo *FmDedicatedServicesUpdateOne) check() error {
	if v, ok := fdsuo.mutation.Contacts(); ok {
		if err := fmdedicatedservices.ContactsValidator(v); err != nil {
			return &ValidationError{Name: "contacts", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.contacts": %w`, err)}
		}
	}
	if v, ok := fdsuo.mutation.Supplier(); ok {
		if err := fmdedicatedservices.SupplierValidator(v); err != nil {
			return &ValidationError{Name: "supplier", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.supplier": %w`, err)}
		}
	}
	if v, ok := fdsuo.mutation.Phonenum(); ok {
		if err := fmdedicatedservices.PhonenumValidator(v); err != nil {
			return &ValidationError{Name: "phonenum", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.phonenum": %w`, err)}
		}
	}
	if v, ok := fdsuo.mutation.Email(); ok {
		if err := fmdedicatedservices.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.email": %w`, err)}
		}
	}
	if v, ok := fdsuo.mutation.Fax(); ok {
		if err := fmdedicatedservices.FaxValidator(v); err != nil {
			return &ValidationError{Name: "fax", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.fax": %w`, err)}
		}
	}
	if v, ok := fdsuo.mutation.Description(); ok {
		if err := fmdedicatedservices.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.description": %w`, err)}
		}
	}
	if v, ok := fdsuo.mutation.Creator(); ok {
		if err := fmdedicatedservices.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "FmDedicatedServices.creator": %w`, err)}
		}
	}
	return nil
}

func (fdsuo *FmDedicatedServicesUpdateOne) sqlSave(ctx context.Context) (_node *FmDedicatedServices, err error) {
	if err := fdsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fmdedicatedservices.Table, fmdedicatedservices.Columns, sqlgraph.NewFieldSpec(fmdedicatedservices.FieldID, field.TypeInt64))
	id, ok := fdsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "FmDedicatedServices.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fdsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fmdedicatedservices.FieldID)
		for _, f := range fields {
			if !fmdedicatedservices.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != fmdedicatedservices.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fdsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fdsuo.mutation.WorkID(); ok {
		_spec.SetField(fmdedicatedservices.FieldWorkID, field.TypeInt64, value)
	}
	if value, ok := fdsuo.mutation.AddedWorkID(); ok {
		_spec.AddField(fmdedicatedservices.FieldWorkID, field.TypeInt64, value)
	}
	if fdsuo.mutation.WorkIDCleared() {
		_spec.ClearField(fmdedicatedservices.FieldWorkID, field.TypeInt64)
	}
	if value, ok := fdsuo.mutation.Contacts(); ok {
		_spec.SetField(fmdedicatedservices.FieldContacts, field.TypeString, value)
	}
	if fdsuo.mutation.ContactsCleared() {
		_spec.ClearField(fmdedicatedservices.FieldContacts, field.TypeString)
	}
	if value, ok := fdsuo.mutation.Supplier(); ok {
		_spec.SetField(fmdedicatedservices.FieldSupplier, field.TypeString, value)
	}
	if fdsuo.mutation.SupplierCleared() {
		_spec.ClearField(fmdedicatedservices.FieldSupplier, field.TypeString)
	}
	if value, ok := fdsuo.mutation.Phonenum(); ok {
		_spec.SetField(fmdedicatedservices.FieldPhonenum, field.TypeString, value)
	}
	if fdsuo.mutation.PhonenumCleared() {
		_spec.ClearField(fmdedicatedservices.FieldPhonenum, field.TypeString)
	}
	if value, ok := fdsuo.mutation.Email(); ok {
		_spec.SetField(fmdedicatedservices.FieldEmail, field.TypeString, value)
	}
	if fdsuo.mutation.EmailCleared() {
		_spec.ClearField(fmdedicatedservices.FieldEmail, field.TypeString)
	}
	if value, ok := fdsuo.mutation.Fax(); ok {
		_spec.SetField(fmdedicatedservices.FieldFax, field.TypeString, value)
	}
	if fdsuo.mutation.FaxCleared() {
		_spec.ClearField(fmdedicatedservices.FieldFax, field.TypeString)
	}
	if value, ok := fdsuo.mutation.Description(); ok {
		_spec.SetField(fmdedicatedservices.FieldDescription, field.TypeString, value)
	}
	if fdsuo.mutation.DescriptionCleared() {
		_spec.ClearField(fmdedicatedservices.FieldDescription, field.TypeString)
	}
	if value, ok := fdsuo.mutation.Creator(); ok {
		_spec.SetField(fmdedicatedservices.FieldCreator, field.TypeString, value)
	}
	if fdsuo.mutation.CreatorCleared() {
		_spec.ClearField(fmdedicatedservices.FieldCreator, field.TypeString)
	}
	if value, ok := fdsuo.mutation.CreatedTime(); ok {
		_spec.SetField(fmdedicatedservices.FieldCreatedTime, field.TypeTime, value)
	}
	if fdsuo.mutation.CreatedTimeCleared() {
		_spec.ClearField(fmdedicatedservices.FieldCreatedTime, field.TypeTime)
	}
	_node = &FmDedicatedServices{config: fdsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fdsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fmdedicatedservices.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fdsuo.mutation.done = true
	return _node, nil
}
