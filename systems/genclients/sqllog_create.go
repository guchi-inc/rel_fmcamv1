// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/sqllog"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SqlLogCreate is the builder for creating a SqlLog entity.
type SqlLogCreate struct {
	config
	mutation *SqlLogMutation
	hooks    []Hook
}

// SetTableName sets the "table_name" field.
func (slc *SqlLogCreate) SetTableName(s string) *SqlLogCreate {
	slc.mutation.SetTableName(s)
	return slc
}

// SetQuery sets the "query" field.
func (slc *SqlLogCreate) SetQuery(s string) *SqlLogCreate {
	slc.mutation.SetQuery(s)
	return slc
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (slc *SqlLogCreate) SetNillableQuery(s *string) *SqlLogCreate {
	if s != nil {
		slc.SetQuery(*s)
	}
	return slc
}

// SetArgs sets the "args" field.
func (slc *SqlLogCreate) SetArgs(s string) *SqlLogCreate {
	slc.mutation.SetArgs(s)
	return slc
}

// SetNillableArgs sets the "args" field if the given value is not nil.
func (slc *SqlLogCreate) SetNillableArgs(s *string) *SqlLogCreate {
	if s != nil {
		slc.SetArgs(*s)
	}
	return slc
}

// SetAction sets the "action" field.
func (slc *SqlLogCreate) SetAction(s string) *SqlLogCreate {
	slc.mutation.SetAction(s)
	return slc
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (slc *SqlLogCreate) SetNillableAction(s *string) *SqlLogCreate {
	if s != nil {
		slc.SetAction(*s)
	}
	return slc
}

// SetDbName sets the "db_name" field.
func (slc *SqlLogCreate) SetDbName(s string) *SqlLogCreate {
	slc.mutation.SetDbName(s)
	return slc
}

// SetNillableDbName sets the "db_name" field if the given value is not nil.
func (slc *SqlLogCreate) SetNillableDbName(s *string) *SqlLogCreate {
	if s != nil {
		slc.SetDbName(*s)
	}
	return slc
}

// SetPkValue sets the "pk_value" field.
func (slc *SqlLogCreate) SetPkValue(i int) *SqlLogCreate {
	slc.mutation.SetPkValue(i)
	return slc
}

// SetNillablePkValue sets the "pk_value" field if the given value is not nil.
func (slc *SqlLogCreate) SetNillablePkValue(i *int) *SqlLogCreate {
	if i != nil {
		slc.SetPkValue(*i)
	}
	return slc
}

// SetOldData sets the "old_data" field.
func (slc *SqlLogCreate) SetOldData(m map[string]interface{}) *SqlLogCreate {
	slc.mutation.SetOldData(m)
	return slc
}

// SetNewData sets the "new_data" field.
func (slc *SqlLogCreate) SetNewData(m map[string]interface{}) *SqlLogCreate {
	slc.mutation.SetNewData(m)
	return slc
}

// SetCreator sets the "creator" field.
func (slc *SqlLogCreate) SetCreator(s string) *SqlLogCreate {
	slc.mutation.SetCreator(s)
	return slc
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (slc *SqlLogCreate) SetNillableCreator(s *string) *SqlLogCreate {
	if s != nil {
		slc.SetCreator(*s)
	}
	return slc
}

// SetCreatedTime sets the "created_time" field.
func (slc *SqlLogCreate) SetCreatedTime(t time.Time) *SqlLogCreate {
	slc.mutation.SetCreatedTime(t)
	return slc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (slc *SqlLogCreate) SetNillableCreatedTime(t *time.Time) *SqlLogCreate {
	if t != nil {
		slc.SetCreatedTime(*t)
	}
	return slc
}

// Mutation returns the SqlLogMutation object of the builder.
func (slc *SqlLogCreate) Mutation() *SqlLogMutation {
	return slc.mutation
}

// Save creates the SqlLog in the database.
func (slc *SqlLogCreate) Save(ctx context.Context) (*SqlLog, error) {
	slc.defaults()
	return withHooks(ctx, slc.sqlSave, slc.mutation, slc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (slc *SqlLogCreate) SaveX(ctx context.Context) *SqlLog {
	v, err := slc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slc *SqlLogCreate) Exec(ctx context.Context) error {
	_, err := slc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slc *SqlLogCreate) ExecX(ctx context.Context) {
	if err := slc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slc *SqlLogCreate) defaults() {
	if _, ok := slc.mutation.DbName(); !ok {
		v := sqllog.DefaultDbName
		slc.mutation.SetDbName(v)
	}
	if _, ok := slc.mutation.Creator(); !ok {
		v := sqllog.DefaultCreator
		slc.mutation.SetCreator(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slc *SqlLogCreate) check() error {
	if _, ok := slc.mutation.TableName(); !ok {
		return &ValidationError{Name: "table_name", err: errors.New(`genclients: missing required field "SqlLog.table_name"`)}
	}
	if v, ok := slc.mutation.TableName(); ok {
		if err := sqllog.TableNameValidator(v); err != nil {
			return &ValidationError{Name: "table_name", err: fmt.Errorf(`genclients: validator failed for field "SqlLog.table_name": %w`, err)}
		}
	}
	if v, ok := slc.mutation.Query(); ok {
		if err := sqllog.QueryValidator(v); err != nil {
			return &ValidationError{Name: "query", err: fmt.Errorf(`genclients: validator failed for field "SqlLog.query": %w`, err)}
		}
	}
	if v, ok := slc.mutation.Args(); ok {
		if err := sqllog.ArgsValidator(v); err != nil {
			return &ValidationError{Name: "args", err: fmt.Errorf(`genclients: validator failed for field "SqlLog.args": %w`, err)}
		}
	}
	if v, ok := slc.mutation.DbName(); ok {
		if err := sqllog.DbNameValidator(v); err != nil {
			return &ValidationError{Name: "db_name", err: fmt.Errorf(`genclients: validator failed for field "SqlLog.db_name": %w`, err)}
		}
	}
	if v, ok := slc.mutation.Creator(); ok {
		if err := sqllog.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "SqlLog.creator": %w`, err)}
		}
	}
	return nil
}

func (slc *SqlLogCreate) sqlSave(ctx context.Context) (*SqlLog, error) {
	if err := slc.check(); err != nil {
		return nil, err
	}
	_node, _spec := slc.createSpec()
	if err := sqlgraph.CreateNode(ctx, slc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	slc.mutation.id = &_node.ID
	slc.mutation.done = true
	return _node, nil
}

func (slc *SqlLogCreate) createSpec() (*SqlLog, *sqlgraph.CreateSpec) {
	var (
		_node = &SqlLog{config: slc.config}
		_spec = sqlgraph.NewCreateSpec(sqllog.Table, sqlgraph.NewFieldSpec(sqllog.FieldID, field.TypeInt))
	)
	if value, ok := slc.mutation.TableName(); ok {
		_spec.SetField(sqllog.FieldTableName, field.TypeString, value)
		_node.TableName = value
	}
	if value, ok := slc.mutation.Query(); ok {
		_spec.SetField(sqllog.FieldQuery, field.TypeString, value)
		_node.Query = &value
	}
	if value, ok := slc.mutation.Args(); ok {
		_spec.SetField(sqllog.FieldArgs, field.TypeString, value)
		_node.Args = &value
	}
	if value, ok := slc.mutation.Action(); ok {
		_spec.SetField(sqllog.FieldAction, field.TypeString, value)
		_node.Action = &value
	}
	if value, ok := slc.mutation.DbName(); ok {
		_spec.SetField(sqllog.FieldDbName, field.TypeString, value)
		_node.DbName = &value
	}
	if value, ok := slc.mutation.PkValue(); ok {
		_spec.SetField(sqllog.FieldPkValue, field.TypeInt, value)
		_node.PkValue = value
	}
	if value, ok := slc.mutation.OldData(); ok {
		_spec.SetField(sqllog.FieldOldData, field.TypeJSON, value)
		_node.OldData = value
	}
	if value, ok := slc.mutation.NewData(); ok {
		_spec.SetField(sqllog.FieldNewData, field.TypeJSON, value)
		_node.NewData = value
	}
	if value, ok := slc.mutation.Creator(); ok {
		_spec.SetField(sqllog.FieldCreator, field.TypeString, value)
		_node.Creator = &value
	}
	if value, ok := slc.mutation.CreatedTime(); ok {
		_spec.SetField(sqllog.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = value
	}
	return _node, _spec
}

// SqlLogCreateBulk is the builder for creating many SqlLog entities in bulk.
type SqlLogCreateBulk struct {
	config
	err      error
	builders []*SqlLogCreate
}

// Save creates the SqlLog entities in the database.
func (slcb *SqlLogCreateBulk) Save(ctx context.Context) ([]*SqlLog, error) {
	if slcb.err != nil {
		return nil, slcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(slcb.builders))
	nodes := make([]*SqlLog, len(slcb.builders))
	mutators := make([]Mutator, len(slcb.builders))
	for i := range slcb.builders {
		func(i int, root context.Context) {
			builder := slcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SqlLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, slcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, slcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, slcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (slcb *SqlLogCreateBulk) SaveX(ctx context.Context) []*SqlLog {
	v, err := slcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slcb *SqlLogCreateBulk) Exec(ctx context.Context) error {
	_, err := slcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slcb *SqlLogCreateBulk) ExecX(ctx context.Context) {
	if err := slcb.Exec(ctx); err != nil {
		panic(err)
	}
}
