// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/faces"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Faces is the model entity for the Faces schema.
type Faces struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// 租户号
	TenantID uuid.UUID `json:"tenant_id"  db:"tenant_id"`
	// ProfileID holds the value of the "profile_id" field.
	ProfileID int64 `json:"profile_id" db:"profile_id"`
	// 特征向量
	FaceEmbedding []byte `json:"face_embedding"  db:"face_embedding"`
	// 照片地址
	ImageURL string `json:"image_url"  db:"image_url"`
	// 主照片
	IsPrimary bool `json:"is_primary" db:"is_primary"`
	// 最后抓拍位置
	UpdatedLocation *string `json:"updated_location"  db:"updated_location"`
	// 抓拍总次数
	CaptureCount int `json:"capture_count" db:"capture_count"`
	// 过期清理时间
	ExpiresTime time.Time `json:"expires_time" db:"expires_time"`
	// 创建时间
	CreatedTime *time.Time `json:"created_time" db:"created_time"`
	// 更新时间
	UpdatedTime  *time.Time `json:"updated_time" db:"updated_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Faces) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case faces.FieldFaceEmbedding:
			values[i] = new([]byte)
		case faces.FieldIsPrimary:
			values[i] = new(sql.NullBool)
		case faces.FieldID, faces.FieldProfileID, faces.FieldCaptureCount:
			values[i] = new(sql.NullInt64)
		case faces.FieldImageURL, faces.FieldUpdatedLocation:
			values[i] = new(sql.NullString)
		case faces.FieldExpiresTime, faces.FieldCreatedTime, faces.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		case faces.FieldTenantID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Faces fields.
func (f *Faces) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case faces.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int64(value.Int64)
		case faces.FieldTenantID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				f.TenantID = *value
			}
		case faces.FieldProfileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field profile_id", values[i])
			} else if value.Valid {
				f.ProfileID = value.Int64
			}
		case faces.FieldFaceEmbedding:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field face_embedding", values[i])
			} else if value != nil {
				f.FaceEmbedding = *value
			}
		case faces.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				f.ImageURL = value.String
			}
		case faces.FieldIsPrimary:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_primary", values[i])
			} else if value.Valid {
				f.IsPrimary = value.Bool
			}
		case faces.FieldUpdatedLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_location", values[i])
			} else if value.Valid {
				f.UpdatedLocation = new(string)
				*f.UpdatedLocation = value.String
			}
		case faces.FieldCaptureCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field capture_count", values[i])
			} else if value.Valid {
				f.CaptureCount = int(value.Int64)
			}
		case faces.FieldExpiresTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_time", values[i])
			} else if value.Valid {
				f.ExpiresTime = value.Time
			}
		case faces.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				f.CreatedTime = new(time.Time)
				*f.CreatedTime = value.Time
			}
		case faces.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				f.UpdatedTime = new(time.Time)
				*f.UpdatedTime = value.Time
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Faces.
// This includes values selected through modifiers, order, etc.
func (f *Faces) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// Update returns a builder for updating this Faces.
// Note that you need to call Faces.Unwrap() before calling this method if this Faces
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Faces) Update() *FacesUpdateOne {
	return NewFacesClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Faces entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Faces) Unwrap() *Faces {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("genclients: Faces is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Faces) String() string {
	var builder strings.Builder
	builder.WriteString("Faces(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", f.TenantID))
	builder.WriteString(", ")
	builder.WriteString("profile_id=")
	builder.WriteString(fmt.Sprintf("%v", f.ProfileID))
	builder.WriteString(", ")
	builder.WriteString("face_embedding=")
	builder.WriteString(fmt.Sprintf("%v", f.FaceEmbedding))
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(f.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("is_primary=")
	builder.WriteString(fmt.Sprintf("%v", f.IsPrimary))
	builder.WriteString(", ")
	if v := f.UpdatedLocation; v != nil {
		builder.WriteString("updated_location=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("capture_count=")
	builder.WriteString(fmt.Sprintf("%v", f.CaptureCount))
	builder.WriteString(", ")
	builder.WriteString("expires_time=")
	builder.WriteString(f.ExpiresTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := f.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := f.UpdatedTime; v != nil {
		builder.WriteString("updated_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// FacesSlice is a parsable slice of Faces.
type FacesSlice []*Faces
