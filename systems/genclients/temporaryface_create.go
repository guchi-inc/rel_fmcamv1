// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/temporaryface"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TemporaryFaceCreate is the builder for creating a TemporaryFace entity.
type TemporaryFaceCreate struct {
	config
	mutation *TemporaryFaceMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (tfc *TemporaryFaceCreate) SetTenantID(u uuid.UUID) *TemporaryFaceCreate {
	tfc.mutation.SetTenantID(u)
	return tfc
}

// SetProfileID sets the "profile_id" field.
func (tfc *TemporaryFaceCreate) SetProfileID(i int64) *TemporaryFaceCreate {
	tfc.mutation.SetProfileID(i)
	return tfc
}

// SetNillableProfileID sets the "profile_id" field if the given value is not nil.
func (tfc *TemporaryFaceCreate) SetNillableProfileID(i *int64) *TemporaryFaceCreate {
	if i != nil {
		tfc.SetProfileID(*i)
	}
	return tfc
}

// SetFaceEmbedding sets the "face_embedding" field.
func (tfc *TemporaryFaceCreate) SetFaceEmbedding(b []byte) *TemporaryFaceCreate {
	tfc.mutation.SetFaceEmbedding(b)
	return tfc
}

// SetImgURL sets the "img_url" field.
func (tfc *TemporaryFaceCreate) SetImgURL(s string) *TemporaryFaceCreate {
	tfc.mutation.SetImgURL(s)
	return tfc
}

// SetNillableImgURL sets the "img_url" field if the given value is not nil.
func (tfc *TemporaryFaceCreate) SetNillableImgURL(s *string) *TemporaryFaceCreate {
	if s != nil {
		tfc.SetImgURL(*s)
	}
	return tfc
}

// SetUpdatedLocation sets the "updated_location" field.
func (tfc *TemporaryFaceCreate) SetUpdatedLocation(s string) *TemporaryFaceCreate {
	tfc.mutation.SetUpdatedLocation(s)
	return tfc
}

// SetNillableUpdatedLocation sets the "updated_location" field if the given value is not nil.
func (tfc *TemporaryFaceCreate) SetNillableUpdatedLocation(s *string) *TemporaryFaceCreate {
	if s != nil {
		tfc.SetUpdatedLocation(*s)
	}
	return tfc
}

// SetCaptureCount sets the "capture_count" field.
func (tfc *TemporaryFaceCreate) SetCaptureCount(i int) *TemporaryFaceCreate {
	tfc.mutation.SetCaptureCount(i)
	return tfc
}

// SetCreatedTime sets the "created_time" field.
func (tfc *TemporaryFaceCreate) SetCreatedTime(t time.Time) *TemporaryFaceCreate {
	tfc.mutation.SetCreatedTime(t)
	return tfc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (tfc *TemporaryFaceCreate) SetNillableCreatedTime(t *time.Time) *TemporaryFaceCreate {
	if t != nil {
		tfc.SetCreatedTime(*t)
	}
	return tfc
}

// SetUpdatedTime sets the "updated_time" field.
func (tfc *TemporaryFaceCreate) SetUpdatedTime(t time.Time) *TemporaryFaceCreate {
	tfc.mutation.SetUpdatedTime(t)
	return tfc
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (tfc *TemporaryFaceCreate) SetNillableUpdatedTime(t *time.Time) *TemporaryFaceCreate {
	if t != nil {
		tfc.SetUpdatedTime(*t)
	}
	return tfc
}

// SetExpiresTime sets the "expires_time" field.
func (tfc *TemporaryFaceCreate) SetExpiresTime(t time.Time) *TemporaryFaceCreate {
	tfc.mutation.SetExpiresTime(t)
	return tfc
}

// SetID sets the "id" field.
func (tfc *TemporaryFaceCreate) SetID(i int64) *TemporaryFaceCreate {
	tfc.mutation.SetID(i)
	return tfc
}

// Mutation returns the TemporaryFaceMutation object of the builder.
func (tfc *TemporaryFaceCreate) Mutation() *TemporaryFaceMutation {
	return tfc.mutation
}

// Save creates the TemporaryFace in the database.
func (tfc *TemporaryFaceCreate) Save(ctx context.Context) (*TemporaryFace, error) {
	return withHooks(ctx, tfc.sqlSave, tfc.mutation, tfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tfc *TemporaryFaceCreate) SaveX(ctx context.Context) *TemporaryFace {
	v, err := tfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfc *TemporaryFaceCreate) Exec(ctx context.Context) error {
	_, err := tfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfc *TemporaryFaceCreate) ExecX(ctx context.Context) {
	if err := tfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfc *TemporaryFaceCreate) check() error {
	if _, ok := tfc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`genclients: missing required field "TemporaryFace.tenant_id"`)}
	}
	if _, ok := tfc.mutation.FaceEmbedding(); !ok {
		return &ValidationError{Name: "face_embedding", err: errors.New(`genclients: missing required field "TemporaryFace.face_embedding"`)}
	}
	if v, ok := tfc.mutation.FaceEmbedding(); ok {
		if err := temporaryface.FaceEmbeddingValidator(v); err != nil {
			return &ValidationError{Name: "face_embedding", err: fmt.Errorf(`genclients: validator failed for field "TemporaryFace.face_embedding": %w`, err)}
		}
	}
	if v, ok := tfc.mutation.ImgURL(); ok {
		if err := temporaryface.ImgURLValidator(v); err != nil {
			return &ValidationError{Name: "img_url", err: fmt.Errorf(`genclients: validator failed for field "TemporaryFace.img_url": %w`, err)}
		}
	}
	if v, ok := tfc.mutation.UpdatedLocation(); ok {
		if err := temporaryface.UpdatedLocationValidator(v); err != nil {
			return &ValidationError{Name: "updated_location", err: fmt.Errorf(`genclients: validator failed for field "TemporaryFace.updated_location": %w`, err)}
		}
	}
	if _, ok := tfc.mutation.CaptureCount(); !ok {
		return &ValidationError{Name: "capture_count", err: errors.New(`genclients: missing required field "TemporaryFace.capture_count"`)}
	}
	if _, ok := tfc.mutation.ExpiresTime(); !ok {
		return &ValidationError{Name: "expires_time", err: errors.New(`genclients: missing required field "TemporaryFace.expires_time"`)}
	}
	return nil
}

func (tfc *TemporaryFaceCreate) sqlSave(ctx context.Context) (*TemporaryFace, error) {
	if err := tfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	tfc.mutation.id = &_node.ID
	tfc.mutation.done = true
	return _node, nil
}

func (tfc *TemporaryFaceCreate) createSpec() (*TemporaryFace, *sqlgraph.CreateSpec) {
	var (
		_node = &TemporaryFace{config: tfc.config}
		_spec = sqlgraph.NewCreateSpec(temporaryface.Table, sqlgraph.NewFieldSpec(temporaryface.FieldID, field.TypeInt64))
	)
	if id, ok := tfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tfc.mutation.TenantID(); ok {
		_spec.SetField(temporaryface.FieldTenantID, field.TypeUUID, value)
		_node.TenantID = value
	}
	if value, ok := tfc.mutation.ProfileID(); ok {
		_spec.SetField(temporaryface.FieldProfileID, field.TypeInt64, value)
		_node.ProfileID = &value
	}
	if value, ok := tfc.mutation.FaceEmbedding(); ok {
		_spec.SetField(temporaryface.FieldFaceEmbedding, field.TypeBytes, value)
		_node.FaceEmbedding = value
	}
	if value, ok := tfc.mutation.ImgURL(); ok {
		_spec.SetField(temporaryface.FieldImgURL, field.TypeString, value)
		_node.ImgURL = &value
	}
	if value, ok := tfc.mutation.UpdatedLocation(); ok {
		_spec.SetField(temporaryface.FieldUpdatedLocation, field.TypeString, value)
		_node.UpdatedLocation = &value
	}
	if value, ok := tfc.mutation.CaptureCount(); ok {
		_spec.SetField(temporaryface.FieldCaptureCount, field.TypeInt, value)
		_node.CaptureCount = value
	}
	if value, ok := tfc.mutation.CreatedTime(); ok {
		_spec.SetField(temporaryface.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	if value, ok := tfc.mutation.UpdatedTime(); ok {
		_spec.SetField(temporaryface.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = &value
	}
	if value, ok := tfc.mutation.ExpiresTime(); ok {
		_spec.SetField(temporaryface.FieldExpiresTime, field.TypeTime, value)
		_node.ExpiresTime = value
	}
	return _node, _spec
}

// TemporaryFaceCreateBulk is the builder for creating many TemporaryFace entities in bulk.
type TemporaryFaceCreateBulk struct {
	config
	err      error
	builders []*TemporaryFaceCreate
}

// Save creates the TemporaryFace entities in the database.
func (tfcb *TemporaryFaceCreateBulk) Save(ctx context.Context) ([]*TemporaryFace, error) {
	if tfcb.err != nil {
		return nil, tfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tfcb.builders))
	nodes := make([]*TemporaryFace, len(tfcb.builders))
	mutators := make([]Mutator, len(tfcb.builders))
	for i := range tfcb.builders {
		func(i int, root context.Context) {
			builder := tfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TemporaryFaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tfcb *TemporaryFaceCreateBulk) SaveX(ctx context.Context) []*TemporaryFace {
	v, err := tfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfcb *TemporaryFaceCreateBulk) Exec(ctx context.Context) error {
	_, err := tfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfcb *TemporaryFaceCreateBulk) ExecX(ctx context.Context) {
	if err := tfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
