// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"encoding/json"
	"fmcam/systems/genclients/sqllog"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SqlLog is the model entity for the SqlLog schema.
type SqlLog struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 表名
	TableName string `json:"table_name"  db:"table_name"`
	// 执行操作
	Query *string `json:"query"  db:"query"`
	// 参数
	Args *string `json:"args"  db:"args"`
	// 操作
	Action *string `json:"action" db:"action"`
	// 数据库
	DbName *string `json:"db_name"  db:"db_name"`
	// 操作键
	PkValue int `json:"pk_value" db:"pk_value"`
	// 旧值
	OldData map[string]interface{} `json:"old_data" db:"old_data"`
	// 新值
	NewData map[string]interface{} `json:"new_data" db:"new_data"`
	// 操作人
	Creator *string `json:"creator"  db:"creator"`
	// 创建时间
	CreatedTime  time.Time `json:"created_time" db:"created_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SqlLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sqllog.FieldOldData, sqllog.FieldNewData:
			values[i] = new([]byte)
		case sqllog.FieldID, sqllog.FieldPkValue:
			values[i] = new(sql.NullInt64)
		case sqllog.FieldTableName, sqllog.FieldQuery, sqllog.FieldArgs, sqllog.FieldAction, sqllog.FieldDbName, sqllog.FieldCreator:
			values[i] = new(sql.NullString)
		case sqllog.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SqlLog fields.
func (sl *SqlLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sqllog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sl.ID = int(value.Int64)
		case sqllog.FieldTableName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name", values[i])
			} else if value.Valid {
				sl.TableName = value.String
			}
		case sqllog.FieldQuery:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field query", values[i])
			} else if value.Valid {
				sl.Query = new(string)
				*sl.Query = value.String
			}
		case sqllog.FieldArgs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field args", values[i])
			} else if value.Valid {
				sl.Args = new(string)
				*sl.Args = value.String
			}
		case sqllog.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				sl.Action = new(string)
				*sl.Action = value.String
			}
		case sqllog.FieldDbName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field db_name", values[i])
			} else if value.Valid {
				sl.DbName = new(string)
				*sl.DbName = value.String
			}
		case sqllog.FieldPkValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pk_value", values[i])
			} else if value.Valid {
				sl.PkValue = int(value.Int64)
			}
		case sqllog.FieldOldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field old_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sl.OldData); err != nil {
					return fmt.Errorf("unmarshal field old_data: %w", err)
				}
			}
		case sqllog.FieldNewData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field new_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sl.NewData); err != nil {
					return fmt.Errorf("unmarshal field new_data: %w", err)
				}
			}
		case sqllog.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				sl.Creator = new(string)
				*sl.Creator = value.String
			}
		case sqllog.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				sl.CreatedTime = value.Time
			}
		default:
			sl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SqlLog.
// This includes values selected through modifiers, order, etc.
func (sl *SqlLog) Value(name string) (ent.Value, error) {
	return sl.selectValues.Get(name)
}

// Update returns a builder for updating this SqlLog.
// Note that you need to call SqlLog.Unwrap() before calling this method if this SqlLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *SqlLog) Update() *SqlLogUpdateOne {
	return NewSqlLogClient(sl.config).UpdateOne(sl)
}

// Unwrap unwraps the SqlLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *SqlLog) Unwrap() *SqlLog {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("genclients: SqlLog is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *SqlLog) String() string {
	var builder strings.Builder
	builder.WriteString("SqlLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("table_name=")
	builder.WriteString(sl.TableName)
	builder.WriteString(", ")
	if v := sl.Query; v != nil {
		builder.WriteString("query=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sl.Args; v != nil {
		builder.WriteString("args=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sl.Action; v != nil {
		builder.WriteString("action=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sl.DbName; v != nil {
		builder.WriteString("db_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("pk_value=")
	builder.WriteString(fmt.Sprintf("%v", sl.PkValue))
	builder.WriteString(", ")
	builder.WriteString("old_data=")
	builder.WriteString(fmt.Sprintf("%v", sl.OldData))
	builder.WriteString(", ")
	builder.WriteString("new_data=")
	builder.WriteString(fmt.Sprintf("%v", sl.NewData))
	builder.WriteString(", ")
	if v := sl.Creator; v != nil {
		builder.WriteString("creator=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_time=")
	builder.WriteString(sl.CreatedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SqlLogs is a parsable slice of SqlLog.
type SqlLogs []*SqlLog
