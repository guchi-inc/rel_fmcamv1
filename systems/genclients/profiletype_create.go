// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/profiletype"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProfileTypeCreate is the builder for creating a ProfileType entity.
type ProfileTypeCreate struct {
	config
	mutation *ProfileTypeMutation
	hooks    []Hook
}

// SetTypeName sets the "type_name" field.
func (ptc *ProfileTypeCreate) SetTypeName(s string) *ProfileTypeCreate {
	ptc.mutation.SetTypeName(s)
	return ptc
}

// SetWarningLevel sets the "warning_level" field.
func (ptc *ProfileTypeCreate) SetWarningLevel(i int) *ProfileTypeCreate {
	ptc.mutation.SetWarningLevel(i)
	return ptc
}

// SetNillableWarningLevel sets the "warning_level" field if the given value is not nil.
func (ptc *ProfileTypeCreate) SetNillableWarningLevel(i *int) *ProfileTypeCreate {
	if i != nil {
		ptc.SetWarningLevel(*i)
	}
	return ptc
}

// SetWarningEnabled sets the "warning_enabled" field.
func (ptc *ProfileTypeCreate) SetWarningEnabled(b bool) *ProfileTypeCreate {
	ptc.mutation.SetWarningEnabled(b)
	return ptc
}

// SetNillableWarningEnabled sets the "warning_enabled" field if the given value is not nil.
func (ptc *ProfileTypeCreate) SetNillableWarningEnabled(b *bool) *ProfileTypeCreate {
	if b != nil {
		ptc.SetWarningEnabled(*b)
	}
	return ptc
}

// SetTenantID sets the "tenant_id" field.
func (ptc *ProfileTypeCreate) SetTenantID(u uuid.UUID) *ProfileTypeCreate {
	ptc.mutation.SetTenantID(u)
	return ptc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ptc *ProfileTypeCreate) SetNillableTenantID(u *uuid.UUID) *ProfileTypeCreate {
	if u != nil {
		ptc.SetTenantID(*u)
	}
	return ptc
}

// SetDescription sets the "description" field.
func (ptc *ProfileTypeCreate) SetDescription(s string) *ProfileTypeCreate {
	ptc.mutation.SetDescription(s)
	return ptc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptc *ProfileTypeCreate) SetNillableDescription(s *string) *ProfileTypeCreate {
	if s != nil {
		ptc.SetDescription(*s)
	}
	return ptc
}

// SetDeleteable sets the "deleteable" field.
func (ptc *ProfileTypeCreate) SetDeleteable(b bool) *ProfileTypeCreate {
	ptc.mutation.SetDeleteable(b)
	return ptc
}

// SetNillableDeleteable sets the "deleteable" field if the given value is not nil.
func (ptc *ProfileTypeCreate) SetNillableDeleteable(b *bool) *ProfileTypeCreate {
	if b != nil {
		ptc.SetDeleteable(*b)
	}
	return ptc
}

// SetEnabled sets the "enabled" field.
func (ptc *ProfileTypeCreate) SetEnabled(b bool) *ProfileTypeCreate {
	ptc.mutation.SetEnabled(b)
	return ptc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ptc *ProfileTypeCreate) SetNillableEnabled(b *bool) *ProfileTypeCreate {
	if b != nil {
		ptc.SetEnabled(*b)
	}
	return ptc
}

// SetTypeCode sets the "type_code" field.
func (ptc *ProfileTypeCreate) SetTypeCode(s string) *ProfileTypeCreate {
	ptc.mutation.SetTypeCode(s)
	return ptc
}

// SetNillableTypeCode sets the "type_code" field if the given value is not nil.
func (ptc *ProfileTypeCreate) SetNillableTypeCode(s *string) *ProfileTypeCreate {
	if s != nil {
		ptc.SetTypeCode(*s)
	}
	return ptc
}

// SetFaceValidityHours sets the "face_validity_hours" field.
func (ptc *ProfileTypeCreate) SetFaceValidityHours(i int) *ProfileTypeCreate {
	ptc.mutation.SetFaceValidityHours(i)
	return ptc
}

// SetNillableFaceValidityHours sets the "face_validity_hours" field if the given value is not nil.
func (ptc *ProfileTypeCreate) SetNillableFaceValidityHours(i *int) *ProfileTypeCreate {
	if i != nil {
		ptc.SetFaceValidityHours(*i)
	}
	return ptc
}

// SetCreatedTime sets the "created_time" field.
func (ptc *ProfileTypeCreate) SetCreatedTime(t time.Time) *ProfileTypeCreate {
	ptc.mutation.SetCreatedTime(t)
	return ptc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (ptc *ProfileTypeCreate) SetNillableCreatedTime(t *time.Time) *ProfileTypeCreate {
	if t != nil {
		ptc.SetCreatedTime(*t)
	}
	return ptc
}

// SetUpdatedTime sets the "updated_time" field.
func (ptc *ProfileTypeCreate) SetUpdatedTime(t time.Time) *ProfileTypeCreate {
	ptc.mutation.SetUpdatedTime(t)
	return ptc
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (ptc *ProfileTypeCreate) SetNillableUpdatedTime(t *time.Time) *ProfileTypeCreate {
	if t != nil {
		ptc.SetUpdatedTime(*t)
	}
	return ptc
}

// SetID sets the "id" field.
func (ptc *ProfileTypeCreate) SetID(i int64) *ProfileTypeCreate {
	ptc.mutation.SetID(i)
	return ptc
}

// Mutation returns the ProfileTypeMutation object of the builder.
func (ptc *ProfileTypeCreate) Mutation() *ProfileTypeMutation {
	return ptc.mutation
}

// Save creates the ProfileType in the database.
func (ptc *ProfileTypeCreate) Save(ctx context.Context) (*ProfileType, error) {
	ptc.defaults()
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *ProfileTypeCreate) SaveX(ctx context.Context) *ProfileType {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *ProfileTypeCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *ProfileTypeCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *ProfileTypeCreate) defaults() {
	if _, ok := ptc.mutation.TypeCode(); !ok {
		v := profiletype.DefaultTypeCode
		ptc.mutation.SetTypeCode(v)
	}
	if _, ok := ptc.mutation.FaceValidityHours(); !ok {
		v := profiletype.DefaultFaceValidityHours
		ptc.mutation.SetFaceValidityHours(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *ProfileTypeCreate) check() error {
	if _, ok := ptc.mutation.TypeName(); !ok {
		return &ValidationError{Name: "type_name", err: errors.New(`genclients: missing required field "ProfileType.type_name"`)}
	}
	if v, ok := ptc.mutation.TypeName(); ok {
		if err := profiletype.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "type_name", err: fmt.Errorf(`genclients: validator failed for field "ProfileType.type_name": %w`, err)}
		}
	}
	if v, ok := ptc.mutation.Description(); ok {
		if err := profiletype.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "ProfileType.description": %w`, err)}
		}
	}
	if v, ok := ptc.mutation.TypeCode(); ok {
		if err := profiletype.TypeCodeValidator(v); err != nil {
			return &ValidationError{Name: "type_code", err: fmt.Errorf(`genclients: validator failed for field "ProfileType.type_code": %w`, err)}
		}
	}
	return nil
}

func (ptc *ProfileTypeCreate) sqlSave(ctx context.Context) (*ProfileType, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *ProfileTypeCreate) createSpec() (*ProfileType, *sqlgraph.CreateSpec) {
	var (
		_node = &ProfileType{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(profiletype.Table, sqlgraph.NewFieldSpec(profiletype.FieldID, field.TypeInt64))
	)
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ptc.mutation.TypeName(); ok {
		_spec.SetField(profiletype.FieldTypeName, field.TypeString, value)
		_node.TypeName = value
	}
	if value, ok := ptc.mutation.WarningLevel(); ok {
		_spec.SetField(profiletype.FieldWarningLevel, field.TypeInt, value)
		_node.WarningLevel = &value
	}
	if value, ok := ptc.mutation.WarningEnabled(); ok {
		_spec.SetField(profiletype.FieldWarningEnabled, field.TypeBool, value)
		_node.WarningEnabled = &value
	}
	if value, ok := ptc.mutation.TenantID(); ok {
		_spec.SetField(profiletype.FieldTenantID, field.TypeUUID, value)
		_node.TenantID = value
	}
	if value, ok := ptc.mutation.Description(); ok {
		_spec.SetField(profiletype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ptc.mutation.Deleteable(); ok {
		_spec.SetField(profiletype.FieldDeleteable, field.TypeBool, value)
		_node.Deleteable = value
	}
	if value, ok := ptc.mutation.Enabled(); ok {
		_spec.SetField(profiletype.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := ptc.mutation.TypeCode(); ok {
		_spec.SetField(profiletype.FieldTypeCode, field.TypeString, value)
		_node.TypeCode = &value
	}
	if value, ok := ptc.mutation.FaceValidityHours(); ok {
		_spec.SetField(profiletype.FieldFaceValidityHours, field.TypeInt, value)
		_node.FaceValidityHours = &value
	}
	if value, ok := ptc.mutation.CreatedTime(); ok {
		_spec.SetField(profiletype.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	if value, ok := ptc.mutation.UpdatedTime(); ok {
		_spec.SetField(profiletype.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = &value
	}
	return _node, _spec
}

// ProfileTypeCreateBulk is the builder for creating many ProfileType entities in bulk.
type ProfileTypeCreateBulk struct {
	config
	err      error
	builders []*ProfileTypeCreate
}

// Save creates the ProfileType entities in the database.
func (ptcb *ProfileTypeCreateBulk) Save(ctx context.Context) ([]*ProfileType, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*ProfileType, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfileTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *ProfileTypeCreateBulk) SaveX(ctx context.Context) []*ProfileType {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *ProfileTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *ProfileTypeCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}
