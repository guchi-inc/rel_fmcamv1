// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/govstreet"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GovStreetCreate is the builder for creating a GovStreet entity.
type GovStreetCreate struct {
	config
	mutation *GovStreetMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (gsc *GovStreetCreate) SetCode(s string) *GovStreetCreate {
	gsc.mutation.SetCode(s)
	return gsc
}

// SetName sets the "name" field.
func (gsc *GovStreetCreate) SetName(s string) *GovStreetCreate {
	gsc.mutation.SetName(s)
	return gsc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gsc *GovStreetCreate) SetNillableName(s *string) *GovStreetCreate {
	if s != nil {
		gsc.SetName(*s)
	}
	return gsc
}

// SetProvinceCode sets the "province_code" field.
func (gsc *GovStreetCreate) SetProvinceCode(s string) *GovStreetCreate {
	gsc.mutation.SetProvinceCode(s)
	return gsc
}

// SetNillableProvinceCode sets the "province_code" field if the given value is not nil.
func (gsc *GovStreetCreate) SetNillableProvinceCode(s *string) *GovStreetCreate {
	if s != nil {
		gsc.SetProvinceCode(*s)
	}
	return gsc
}

// SetCityCode sets the "city_code" field.
func (gsc *GovStreetCreate) SetCityCode(s string) *GovStreetCreate {
	gsc.mutation.SetCityCode(s)
	return gsc
}

// SetNillableCityCode sets the "city_code" field if the given value is not nil.
func (gsc *GovStreetCreate) SetNillableCityCode(s *string) *GovStreetCreate {
	if s != nil {
		gsc.SetCityCode(*s)
	}
	return gsc
}

// SetAreaCode sets the "area_code" field.
func (gsc *GovStreetCreate) SetAreaCode(s string) *GovStreetCreate {
	gsc.mutation.SetAreaCode(s)
	return gsc
}

// SetNillableAreaCode sets the "area_code" field if the given value is not nil.
func (gsc *GovStreetCreate) SetNillableAreaCode(s *string) *GovStreetCreate {
	if s != nil {
		gsc.SetAreaCode(*s)
	}
	return gsc
}

// SetCreator sets the "creator" field.
func (gsc *GovStreetCreate) SetCreator(s string) *GovStreetCreate {
	gsc.mutation.SetCreator(s)
	return gsc
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (gsc *GovStreetCreate) SetNillableCreator(s *string) *GovStreetCreate {
	if s != nil {
		gsc.SetCreator(*s)
	}
	return gsc
}

// SetDeleteFlag sets the "delete_flag" field.
func (gsc *GovStreetCreate) SetDeleteFlag(s string) *GovStreetCreate {
	gsc.mutation.SetDeleteFlag(s)
	return gsc
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (gsc *GovStreetCreate) SetNillableDeleteFlag(s *string) *GovStreetCreate {
	if s != nil {
		gsc.SetDeleteFlag(*s)
	}
	return gsc
}

// SetCreatedTime sets the "created_time" field.
func (gsc *GovStreetCreate) SetCreatedTime(t time.Time) *GovStreetCreate {
	gsc.mutation.SetCreatedTime(t)
	return gsc
}

// SetID sets the "id" field.
func (gsc *GovStreetCreate) SetID(i int64) *GovStreetCreate {
	gsc.mutation.SetID(i)
	return gsc
}

// Mutation returns the GovStreetMutation object of the builder.
func (gsc *GovStreetCreate) Mutation() *GovStreetMutation {
	return gsc.mutation
}

// Save creates the GovStreet in the database.
func (gsc *GovStreetCreate) Save(ctx context.Context) (*GovStreet, error) {
	gsc.defaults()
	return withHooks(ctx, gsc.sqlSave, gsc.mutation, gsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gsc *GovStreetCreate) SaveX(ctx context.Context) *GovStreet {
	v, err := gsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gsc *GovStreetCreate) Exec(ctx context.Context) error {
	_, err := gsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsc *GovStreetCreate) ExecX(ctx context.Context) {
	if err := gsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsc *GovStreetCreate) defaults() {
	if _, ok := gsc.mutation.Name(); !ok {
		v := govstreet.DefaultName
		gsc.mutation.SetName(v)
	}
	if _, ok := gsc.mutation.ProvinceCode(); !ok {
		v := govstreet.DefaultProvinceCode
		gsc.mutation.SetProvinceCode(v)
	}
	if _, ok := gsc.mutation.CityCode(); !ok {
		v := govstreet.DefaultCityCode
		gsc.mutation.SetCityCode(v)
	}
	if _, ok := gsc.mutation.AreaCode(); !ok {
		v := govstreet.DefaultAreaCode
		gsc.mutation.SetAreaCode(v)
	}
	if _, ok := gsc.mutation.Creator(); !ok {
		v := govstreet.DefaultCreator
		gsc.mutation.SetCreator(v)
	}
	if _, ok := gsc.mutation.DeleteFlag(); !ok {
		v := govstreet.DefaultDeleteFlag
		gsc.mutation.SetDeleteFlag(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gsc *GovStreetCreate) check() error {
	if _, ok := gsc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`genclients: missing required field "GovStreet.code"`)}
	}
	if v, ok := gsc.mutation.Code(); ok {
		if err := govstreet.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.code": %w`, err)}
		}
	}
	if _, ok := gsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`genclients: missing required field "GovStreet.name"`)}
	}
	if v, ok := gsc.mutation.Name(); ok {
		if err := govstreet.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.name": %w`, err)}
		}
	}
	if _, ok := gsc.mutation.ProvinceCode(); !ok {
		return &ValidationError{Name: "province_code", err: errors.New(`genclients: missing required field "GovStreet.province_code"`)}
	}
	if v, ok := gsc.mutation.ProvinceCode(); ok {
		if err := govstreet.ProvinceCodeValidator(v); err != nil {
			return &ValidationError{Name: "province_code", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.province_code": %w`, err)}
		}
	}
	if _, ok := gsc.mutation.CityCode(); !ok {
		return &ValidationError{Name: "city_code", err: errors.New(`genclients: missing required field "GovStreet.city_code"`)}
	}
	if v, ok := gsc.mutation.CityCode(); ok {
		if err := govstreet.CityCodeValidator(v); err != nil {
			return &ValidationError{Name: "city_code", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.city_code": %w`, err)}
		}
	}
	if _, ok := gsc.mutation.AreaCode(); !ok {
		return &ValidationError{Name: "area_code", err: errors.New(`genclients: missing required field "GovStreet.area_code"`)}
	}
	if v, ok := gsc.mutation.AreaCode(); ok {
		if err := govstreet.AreaCodeValidator(v); err != nil {
			return &ValidationError{Name: "area_code", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.area_code": %w`, err)}
		}
	}
	if _, ok := gsc.mutation.Creator(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`genclients: missing required field "GovStreet.creator"`)}
	}
	if v, ok := gsc.mutation.Creator(); ok {
		if err := govstreet.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.creator": %w`, err)}
		}
	}
	if _, ok := gsc.mutation.DeleteFlag(); !ok {
		return &ValidationError{Name: "delete_flag", err: errors.New(`genclients: missing required field "GovStreet.delete_flag"`)}
	}
	if v, ok := gsc.mutation.DeleteFlag(); ok {
		if err := govstreet.DeleteFlagValidator(v); err != nil {
			return &ValidationError{Name: "delete_flag", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.delete_flag": %w`, err)}
		}
	}
	if _, ok := gsc.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "created_time", err: errors.New(`genclients: missing required field "GovStreet.created_time"`)}
	}
	return nil
}

func (gsc *GovStreetCreate) sqlSave(ctx context.Context) (*GovStreet, error) {
	if err := gsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	gsc.mutation.id = &_node.ID
	gsc.mutation.done = true
	return _node, nil
}

func (gsc *GovStreetCreate) createSpec() (*GovStreet, *sqlgraph.CreateSpec) {
	var (
		_node = &GovStreet{config: gsc.config}
		_spec = sqlgraph.NewCreateSpec(govstreet.Table, sqlgraph.NewFieldSpec(govstreet.FieldID, field.TypeInt64))
	)
	if id, ok := gsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gsc.mutation.Code(); ok {
		_spec.SetField(govstreet.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := gsc.mutation.Name(); ok {
		_spec.SetField(govstreet.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gsc.mutation.ProvinceCode(); ok {
		_spec.SetField(govstreet.FieldProvinceCode, field.TypeString, value)
		_node.ProvinceCode = value
	}
	if value, ok := gsc.mutation.CityCode(); ok {
		_spec.SetField(govstreet.FieldCityCode, field.TypeString, value)
		_node.CityCode = value
	}
	if value, ok := gsc.mutation.AreaCode(); ok {
		_spec.SetField(govstreet.FieldAreaCode, field.TypeString, value)
		_node.AreaCode = value
	}
	if value, ok := gsc.mutation.Creator(); ok {
		_spec.SetField(govstreet.FieldCreator, field.TypeString, value)
		_node.Creator = value
	}
	if value, ok := gsc.mutation.DeleteFlag(); ok {
		_spec.SetField(govstreet.FieldDeleteFlag, field.TypeString, value)
		_node.DeleteFlag = value
	}
	if value, ok := gsc.mutation.CreatedTime(); ok {
		_spec.SetField(govstreet.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	return _node, _spec
}

// GovStreetCreateBulk is the builder for creating many GovStreet entities in bulk.
type GovStreetCreateBulk struct {
	config
	err      error
	builders []*GovStreetCreate
}

// Save creates the GovStreet entities in the database.
func (gscb *GovStreetCreateBulk) Save(ctx context.Context) ([]*GovStreet, error) {
	if gscb.err != nil {
		return nil, gscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gscb.builders))
	nodes := make([]*GovStreet, len(gscb.builders))
	mutators := make([]Mutator, len(gscb.builders))
	for i := range gscb.builders {
		func(i int, root context.Context) {
			builder := gscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GovStreetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gscb *GovStreetCreateBulk) SaveX(ctx context.Context) []*GovStreet {
	v, err := gscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gscb *GovStreetCreateBulk) Exec(ctx context.Context) error {
	_, err := gscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gscb *GovStreetCreateBulk) ExecX(ctx context.Context) {
	if err := gscb.Exec(ctx); err != nil {
		panic(err)
	}
}
