// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/fmalertdefinition"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FmAlertDefinition is the model entity for the FmAlertDefinition schema.
type FmAlertDefinition struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// 关联的分组id
	AlertGroupID int64 `json:"alert_group_id"  db:"alert_group_id"`
	// 预警等级
	Level int `json:"level"  db:"level"`
	// 人员类型id
	ProfileTypeID int64 `json:"profile_type_id"  db:"profile_type_id"`
	// 处理操作
	Action string `json:"action"  db:"action"`
	// 预警声音
	AlarmSound string `json:"alarm_sound"  db:"alarm_sound"`
	// 创建时间
	CreatedTime *time.Time `json:"created_time,omitempty" db:"created_time"`
	// 更新时间
	UpdatedTime  *time.Time `json:"updated_time,omitempty" db:"updated_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FmAlertDefinition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fmalertdefinition.FieldID, fmalertdefinition.FieldAlertGroupID, fmalertdefinition.FieldLevel, fmalertdefinition.FieldProfileTypeID:
			values[i] = new(sql.NullInt64)
		case fmalertdefinition.FieldAction, fmalertdefinition.FieldAlarmSound:
			values[i] = new(sql.NullString)
		case fmalertdefinition.FieldCreatedTime, fmalertdefinition.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FmAlertDefinition fields.
func (fad *FmAlertDefinition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fmalertdefinition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fad.ID = int64(value.Int64)
		case fmalertdefinition.FieldAlertGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field alert_group_id", values[i])
			} else if value.Valid {
				fad.AlertGroupID = value.Int64
			}
		case fmalertdefinition.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				fad.Level = int(value.Int64)
			}
		case fmalertdefinition.FieldProfileTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field profile_type_id", values[i])
			} else if value.Valid {
				fad.ProfileTypeID = value.Int64
			}
		case fmalertdefinition.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				fad.Action = value.String
			}
		case fmalertdefinition.FieldAlarmSound:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alarm_sound", values[i])
			} else if value.Valid {
				fad.AlarmSound = value.String
			}
		case fmalertdefinition.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				fad.CreatedTime = new(time.Time)
				*fad.CreatedTime = value.Time
			}
		case fmalertdefinition.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				fad.UpdatedTime = new(time.Time)
				*fad.UpdatedTime = value.Time
			}
		default:
			fad.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FmAlertDefinition.
// This includes values selected through modifiers, order, etc.
func (fad *FmAlertDefinition) Value(name string) (ent.Value, error) {
	return fad.selectValues.Get(name)
}

// Update returns a builder for updating this FmAlertDefinition.
// Note that you need to call FmAlertDefinition.Unwrap() before calling this method if this FmAlertDefinition
// was returned from a transaction, and the transaction was committed or rolled back.
func (fad *FmAlertDefinition) Update() *FmAlertDefinitionUpdateOne {
	return NewFmAlertDefinitionClient(fad.config).UpdateOne(fad)
}

// Unwrap unwraps the FmAlertDefinition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fad *FmAlertDefinition) Unwrap() *FmAlertDefinition {
	_tx, ok := fad.config.driver.(*txDriver)
	if !ok {
		panic("genclients: FmAlertDefinition is not a transactional entity")
	}
	fad.config.driver = _tx.drv
	return fad
}

// String implements the fmt.Stringer.
func (fad *FmAlertDefinition) String() string {
	var builder strings.Builder
	builder.WriteString("FmAlertDefinition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fad.ID))
	builder.WriteString("alert_group_id=")
	builder.WriteString(fmt.Sprintf("%v", fad.AlertGroupID))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", fad.Level))
	builder.WriteString(", ")
	builder.WriteString("profile_type_id=")
	builder.WriteString(fmt.Sprintf("%v", fad.ProfileTypeID))
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(fad.Action)
	builder.WriteString(", ")
	builder.WriteString("alarm_sound=")
	builder.WriteString(fad.AlarmSound)
	builder.WriteString(", ")
	if v := fad.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := fad.UpdatedTime; v != nil {
		builder.WriteString("updated_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// FmAlertDefinitions is a parsable slice of FmAlertDefinition.
type FmAlertDefinitions []*FmAlertDefinition
