// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/predicate"
	"fmcam/systems/genclients/sqllog"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SqlLogUpdate is the builder for updating SqlLog entities.
type SqlLogUpdate struct {
	config
	hooks    []Hook
	mutation *SqlLogMutation
}

// Where appends a list predicates to the SqlLogUpdate builder.
func (slu *SqlLogUpdate) Where(ps ...predicate.SqlLog) *SqlLogUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetTableName sets the "table_name" field.
func (slu *SqlLogUpdate) SetTableName(s string) *SqlLogUpdate {
	slu.mutation.SetTableName(s)
	return slu
}

// SetNillableTableName sets the "table_name" field if the given value is not nil.
func (slu *SqlLogUpdate) SetNillableTableName(s *string) *SqlLogUpdate {
	if s != nil {
		slu.SetTableName(*s)
	}
	return slu
}

// SetQuery sets the "query" field.
func (slu *SqlLogUpdate) SetQuery(s string) *SqlLogUpdate {
	slu.mutation.SetQuery(s)
	return slu
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (slu *SqlLogUpdate) SetNillableQuery(s *string) *SqlLogUpdate {
	if s != nil {
		slu.SetQuery(*s)
	}
	return slu
}

// ClearQuery clears the value of the "query" field.
func (slu *SqlLogUpdate) ClearQuery() *SqlLogUpdate {
	slu.mutation.ClearQuery()
	return slu
}

// SetArgs sets the "args" field.
func (slu *SqlLogUpdate) SetArgs(s string) *SqlLogUpdate {
	slu.mutation.SetArgs(s)
	return slu
}

// SetNillableArgs sets the "args" field if the given value is not nil.
func (slu *SqlLogUpdate) SetNillableArgs(s *string) *SqlLogUpdate {
	if s != nil {
		slu.SetArgs(*s)
	}
	return slu
}

// ClearArgs clears the value of the "args" field.
func (slu *SqlLogUpdate) ClearArgs() *SqlLogUpdate {
	slu.mutation.ClearArgs()
	return slu
}

// SetAction sets the "action" field.
func (slu *SqlLogUpdate) SetAction(s string) *SqlLogUpdate {
	slu.mutation.SetAction(s)
	return slu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (slu *SqlLogUpdate) SetNillableAction(s *string) *SqlLogUpdate {
	if s != nil {
		slu.SetAction(*s)
	}
	return slu
}

// ClearAction clears the value of the "action" field.
func (slu *SqlLogUpdate) ClearAction() *SqlLogUpdate {
	slu.mutation.ClearAction()
	return slu
}

// SetDbName sets the "db_name" field.
func (slu *SqlLogUpdate) SetDbName(s string) *SqlLogUpdate {
	slu.mutation.SetDbName(s)
	return slu
}

// SetNillableDbName sets the "db_name" field if the given value is not nil.
func (slu *SqlLogUpdate) SetNillableDbName(s *string) *SqlLogUpdate {
	if s != nil {
		slu.SetDbName(*s)
	}
	return slu
}

// ClearDbName clears the value of the "db_name" field.
func (slu *SqlLogUpdate) ClearDbName() *SqlLogUpdate {
	slu.mutation.ClearDbName()
	return slu
}

// SetPkValue sets the "pk_value" field.
func (slu *SqlLogUpdate) SetPkValue(i int) *SqlLogUpdate {
	slu.mutation.ResetPkValue()
	slu.mutation.SetPkValue(i)
	return slu
}

// SetNillablePkValue sets the "pk_value" field if the given value is not nil.
func (slu *SqlLogUpdate) SetNillablePkValue(i *int) *SqlLogUpdate {
	if i != nil {
		slu.SetPkValue(*i)
	}
	return slu
}

// AddPkValue adds i to the "pk_value" field.
func (slu *SqlLogUpdate) AddPkValue(i int) *SqlLogUpdate {
	slu.mutation.AddPkValue(i)
	return slu
}

// ClearPkValue clears the value of the "pk_value" field.
func (slu *SqlLogUpdate) ClearPkValue() *SqlLogUpdate {
	slu.mutation.ClearPkValue()
	return slu
}

// SetOldData sets the "old_data" field.
func (slu *SqlLogUpdate) SetOldData(m map[string]interface{}) *SqlLogUpdate {
	slu.mutation.SetOldData(m)
	return slu
}

// ClearOldData clears the value of the "old_data" field.
func (slu *SqlLogUpdate) ClearOldData() *SqlLogUpdate {
	slu.mutation.ClearOldData()
	return slu
}

// SetNewData sets the "new_data" field.
func (slu *SqlLogUpdate) SetNewData(m map[string]interface{}) *SqlLogUpdate {
	slu.mutation.SetNewData(m)
	return slu
}

// ClearNewData clears the value of the "new_data" field.
func (slu *SqlLogUpdate) ClearNewData() *SqlLogUpdate {
	slu.mutation.ClearNewData()
	return slu
}

// SetCreator sets the "creator" field.
func (slu *SqlLogUpdate) SetCreator(s string) *SqlLogUpdate {
	slu.mutation.SetCreator(s)
	return slu
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (slu *SqlLogUpdate) SetNillableCreator(s *string) *SqlLogUpdate {
	if s != nil {
		slu.SetCreator(*s)
	}
	return slu
}

// ClearCreator clears the value of the "creator" field.
func (slu *SqlLogUpdate) ClearCreator() *SqlLogUpdate {
	slu.mutation.ClearCreator()
	return slu
}

// SetCreatedTime sets the "created_time" field.
func (slu *SqlLogUpdate) SetCreatedTime(t time.Time) *SqlLogUpdate {
	slu.mutation.SetCreatedTime(t)
	return slu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (slu *SqlLogUpdate) SetNillableCreatedTime(t *time.Time) *SqlLogUpdate {
	if t != nil {
		slu.SetCreatedTime(*t)
	}
	return slu
}

// ClearCreatedTime clears the value of the "created_time" field.
func (slu *SqlLogUpdate) ClearCreatedTime() *SqlLogUpdate {
	slu.mutation.ClearCreatedTime()
	return slu
}

// Mutation returns the SqlLogMutation object of the builder.
func (slu *SqlLogUpdate) Mutation() *SqlLogMutation {
	return slu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *SqlLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, slu.sqlSave, slu.mutation, slu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (slu *SqlLogUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *SqlLogUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *SqlLogUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slu *SqlLogUpdate) check() error {
	if v, ok := slu.mutation.TableName(); ok {
		if err := sqllog.TableNameValidator(v); err != nil {
			return &ValidationError{Name: "table_name", err: fmt.Errorf(`genclients: validator failed for field "SqlLog.table_name": %w`, err)}
		}
	}
	if v, ok := slu.mutation.Query(); ok {
		if err := sqllog.QueryValidator(v); err != nil {
			return &ValidationError{Name: "query", err: fmt.Errorf(`genclients: validator failed for field "SqlLog.query": %w`, err)}
		}
	}
	if v, ok := slu.mutation.Args(); ok {
		if err := sqllog.ArgsValidator(v); err != nil {
			return &ValidationError{Name: "args", err: fmt.Errorf(`genclients: validator failed for field "SqlLog.args": %w`, err)}
		}
	}
	if v, ok := slu.mutation.DbName(); ok {
		if err := sqllog.DbNameValidator(v); err != nil {
			return &ValidationError{Name: "db_name", err: fmt.Errorf(`genclients: validator failed for field "SqlLog.db_name": %w`, err)}
		}
	}
	if v, ok := slu.mutation.Creator(); ok {
		if err := sqllog.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "SqlLog.creator": %w`, err)}
		}
	}
	return nil
}

func (slu *SqlLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := slu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sqllog.Table, sqllog.Columns, sqlgraph.NewFieldSpec(sqllog.FieldID, field.TypeInt))
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.TableName(); ok {
		_spec.SetField(sqllog.FieldTableName, field.TypeString, value)
	}
	if value, ok := slu.mutation.Query(); ok {
		_spec.SetField(sqllog.FieldQuery, field.TypeString, value)
	}
	if slu.mutation.QueryCleared() {
		_spec.ClearField(sqllog.FieldQuery, field.TypeString)
	}
	if value, ok := slu.mutation.Args(); ok {
		_spec.SetField(sqllog.FieldArgs, field.TypeString, value)
	}
	if slu.mutation.ArgsCleared() {
		_spec.ClearField(sqllog.FieldArgs, field.TypeString)
	}
	if value, ok := slu.mutation.Action(); ok {
		_spec.SetField(sqllog.FieldAction, field.TypeString, value)
	}
	if slu.mutation.ActionCleared() {
		_spec.ClearField(sqllog.FieldAction, field.TypeString)
	}
	if value, ok := slu.mutation.DbName(); ok {
		_spec.SetField(sqllog.FieldDbName, field.TypeString, value)
	}
	if slu.mutation.DbNameCleared() {
		_spec.ClearField(sqllog.FieldDbName, field.TypeString)
	}
	if value, ok := slu.mutation.PkValue(); ok {
		_spec.SetField(sqllog.FieldPkValue, field.TypeInt, value)
	}
	if value, ok := slu.mutation.AddedPkValue(); ok {
		_spec.AddField(sqllog.FieldPkValue, field.TypeInt, value)
	}
	if slu.mutation.PkValueCleared() {
		_spec.ClearField(sqllog.FieldPkValue, field.TypeInt)
	}
	if value, ok := slu.mutation.OldData(); ok {
		_spec.SetField(sqllog.FieldOldData, field.TypeJSON, value)
	}
	if slu.mutation.OldDataCleared() {
		_spec.ClearField(sqllog.FieldOldData, field.TypeJSON)
	}
	if value, ok := slu.mutation.NewData(); ok {
		_spec.SetField(sqllog.FieldNewData, field.TypeJSON, value)
	}
	if slu.mutation.NewDataCleared() {
		_spec.ClearField(sqllog.FieldNewData, field.TypeJSON)
	}
	if value, ok := slu.mutation.Creator(); ok {
		_spec.SetField(sqllog.FieldCreator, field.TypeString, value)
	}
	if slu.mutation.CreatorCleared() {
		_spec.ClearField(sqllog.FieldCreator, field.TypeString)
	}
	if value, ok := slu.mutation.CreatedTime(); ok {
		_spec.SetField(sqllog.FieldCreatedTime, field.TypeTime, value)
	}
	if slu.mutation.CreatedTimeCleared() {
		_spec.ClearField(sqllog.FieldCreatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sqllog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	slu.mutation.done = true
	return n, nil
}

// SqlLogUpdateOne is the builder for updating a single SqlLog entity.
type SqlLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SqlLogMutation
}

// SetTableName sets the "table_name" field.
func (sluo *SqlLogUpdateOne) SetTableName(s string) *SqlLogUpdateOne {
	sluo.mutation.SetTableName(s)
	return sluo
}

// SetNillableTableName sets the "table_name" field if the given value is not nil.
func (sluo *SqlLogUpdateOne) SetNillableTableName(s *string) *SqlLogUpdateOne {
	if s != nil {
		sluo.SetTableName(*s)
	}
	return sluo
}

// SetQuery sets the "query" field.
func (sluo *SqlLogUpdateOne) SetQuery(s string) *SqlLogUpdateOne {
	sluo.mutation.SetQuery(s)
	return sluo
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (sluo *SqlLogUpdateOne) SetNillableQuery(s *string) *SqlLogUpdateOne {
	if s != nil {
		sluo.SetQuery(*s)
	}
	return sluo
}

// ClearQuery clears the value of the "query" field.
func (sluo *SqlLogUpdateOne) ClearQuery() *SqlLogUpdateOne {
	sluo.mutation.ClearQuery()
	return sluo
}

// SetArgs sets the "args" field.
func (sluo *SqlLogUpdateOne) SetArgs(s string) *SqlLogUpdateOne {
	sluo.mutation.SetArgs(s)
	return sluo
}

// SetNillableArgs sets the "args" field if the given value is not nil.
func (sluo *SqlLogUpdateOne) SetNillableArgs(s *string) *SqlLogUpdateOne {
	if s != nil {
		sluo.SetArgs(*s)
	}
	return sluo
}

// ClearArgs clears the value of the "args" field.
func (sluo *SqlLogUpdateOne) ClearArgs() *SqlLogUpdateOne {
	sluo.mutation.ClearArgs()
	return sluo
}

// SetAction sets the "action" field.
func (sluo *SqlLogUpdateOne) SetAction(s string) *SqlLogUpdateOne {
	sluo.mutation.SetAction(s)
	return sluo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (sluo *SqlLogUpdateOne) SetNillableAction(s *string) *SqlLogUpdateOne {
	if s != nil {
		sluo.SetAction(*s)
	}
	return sluo
}

// ClearAction clears the value of the "action" field.
func (sluo *SqlLogUpdateOne) ClearAction() *SqlLogUpdateOne {
	sluo.mutation.ClearAction()
	return sluo
}

// SetDbName sets the "db_name" field.
func (sluo *SqlLogUpdateOne) SetDbName(s string) *SqlLogUpdateOne {
	sluo.mutation.SetDbName(s)
	return sluo
}

// SetNillableDbName sets the "db_name" field if the given value is not nil.
func (sluo *SqlLogUpdateOne) SetNillableDbName(s *string) *SqlLogUpdateOne {
	if s != nil {
		sluo.SetDbName(*s)
	}
	return sluo
}

// ClearDbName clears the value of the "db_name" field.
func (sluo *SqlLogUpdateOne) ClearDbName() *SqlLogUpdateOne {
	sluo.mutation.ClearDbName()
	return sluo
}

// SetPkValue sets the "pk_value" field.
func (sluo *SqlLogUpdateOne) SetPkValue(i int) *SqlLogUpdateOne {
	sluo.mutation.ResetPkValue()
	sluo.mutation.SetPkValue(i)
	return sluo
}

// SetNillablePkValue sets the "pk_value" field if the given value is not nil.
func (sluo *SqlLogUpdateOne) SetNillablePkValue(i *int) *SqlLogUpdateOne {
	if i != nil {
		sluo.SetPkValue(*i)
	}
	return sluo
}

// AddPkValue adds i to the "pk_value" field.
func (sluo *SqlLogUpdateOne) AddPkValue(i int) *SqlLogUpdateOne {
	sluo.mutation.AddPkValue(i)
	return sluo
}

// ClearPkValue clears the value of the "pk_value" field.
func (sluo *SqlLogUpdateOne) ClearPkValue() *SqlLogUpdateOne {
	sluo.mutation.ClearPkValue()
	return sluo
}

// SetOldData sets the "old_data" field.
func (sluo *SqlLogUpdateOne) SetOldData(m map[string]interface{}) *SqlLogUpdateOne {
	sluo.mutation.SetOldData(m)
	return sluo
}

// ClearOldData clears the value of the "old_data" field.
func (sluo *SqlLogUpdateOne) ClearOldData() *SqlLogUpdateOne {
	sluo.mutation.ClearOldData()
	return sluo
}

// SetNewData sets the "new_data" field.
func (sluo *SqlLogUpdateOne) SetNewData(m map[string]interface{}) *SqlLogUpdateOne {
	sluo.mutation.SetNewData(m)
	return sluo
}

// ClearNewData clears the value of the "new_data" field.
func (sluo *SqlLogUpdateOne) ClearNewData() *SqlLogUpdateOne {
	sluo.mutation.ClearNewData()
	return sluo
}

// SetCreator sets the "creator" field.
func (sluo *SqlLogUpdateOne) SetCreator(s string) *SqlLogUpdateOne {
	sluo.mutation.SetCreator(s)
	return sluo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (sluo *SqlLogUpdateOne) SetNillableCreator(s *string) *SqlLogUpdateOne {
	if s != nil {
		sluo.SetCreator(*s)
	}
	return sluo
}

// ClearCreator clears the value of the "creator" field.
func (sluo *SqlLogUpdateOne) ClearCreator() *SqlLogUpdateOne {
	sluo.mutation.ClearCreator()
	return sluo
}

// SetCreatedTime sets the "created_time" field.
func (sluo *SqlLogUpdateOne) SetCreatedTime(t time.Time) *SqlLogUpdateOne {
	sluo.mutation.SetCreatedTime(t)
	return sluo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (sluo *SqlLogUpdateOne) SetNillableCreatedTime(t *time.Time) *SqlLogUpdateOne {
	if t != nil {
		sluo.SetCreatedTime(*t)
	}
	return sluo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (sluo *SqlLogUpdateOne) ClearCreatedTime() *SqlLogUpdateOne {
	sluo.mutation.ClearCreatedTime()
	return sluo
}

// Mutation returns the SqlLogMutation object of the builder.
func (sluo *SqlLogUpdateOne) Mutation() *SqlLogMutation {
	return sluo.mutation
}

// Where appends a list predicates to the SqlLogUpdate builder.
func (sluo *SqlLogUpdateOne) Where(ps ...predicate.SqlLog) *SqlLogUpdateOne {
	sluo.mutation.Where(ps...)
	return sluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *SqlLogUpdateOne) Select(field string, fields ...string) *SqlLogUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated SqlLog entity.
func (sluo *SqlLogUpdateOne) Save(ctx context.Context) (*SqlLog, error) {
	return withHooks(ctx, sluo.sqlSave, sluo.mutation, sluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *SqlLogUpdateOne) SaveX(ctx context.Context) *SqlLog {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *SqlLogUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *SqlLogUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sluo *SqlLogUpdateOne) check() error {
	if v, ok := sluo.mutation.TableName(); ok {
		if err := sqllog.TableNameValidator(v); err != nil {
			return &ValidationError{Name: "table_name", err: fmt.Errorf(`genclients: validator failed for field "SqlLog.table_name": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.Query(); ok {
		if err := sqllog.QueryValidator(v); err != nil {
			return &ValidationError{Name: "query", err: fmt.Errorf(`genclients: validator failed for field "SqlLog.query": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.Args(); ok {
		if err := sqllog.ArgsValidator(v); err != nil {
			return &ValidationError{Name: "args", err: fmt.Errorf(`genclients: validator failed for field "SqlLog.args": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.DbName(); ok {
		if err := sqllog.DbNameValidator(v); err != nil {
			return &ValidationError{Name: "db_name", err: fmt.Errorf(`genclients: validator failed for field "SqlLog.db_name": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.Creator(); ok {
		if err := sqllog.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "SqlLog.creator": %w`, err)}
		}
	}
	return nil
}

func (sluo *SqlLogUpdateOne) sqlSave(ctx context.Context) (_node *SqlLog, err error) {
	if err := sluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sqllog.Table, sqllog.Columns, sqlgraph.NewFieldSpec(sqllog.FieldID, field.TypeInt))
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "SqlLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sqllog.FieldID)
		for _, f := range fields {
			if !sqllog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != sqllog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.TableName(); ok {
		_spec.SetField(sqllog.FieldTableName, field.TypeString, value)
	}
	if value, ok := sluo.mutation.Query(); ok {
		_spec.SetField(sqllog.FieldQuery, field.TypeString, value)
	}
	if sluo.mutation.QueryCleared() {
		_spec.ClearField(sqllog.FieldQuery, field.TypeString)
	}
	if value, ok := sluo.mutation.Args(); ok {
		_spec.SetField(sqllog.FieldArgs, field.TypeString, value)
	}
	if sluo.mutation.ArgsCleared() {
		_spec.ClearField(sqllog.FieldArgs, field.TypeString)
	}
	if value, ok := sluo.mutation.Action(); ok {
		_spec.SetField(sqllog.FieldAction, field.TypeString, value)
	}
	if sluo.mutation.ActionCleared() {
		_spec.ClearField(sqllog.FieldAction, field.TypeString)
	}
	if value, ok := sluo.mutation.DbName(); ok {
		_spec.SetField(sqllog.FieldDbName, field.TypeString, value)
	}
	if sluo.mutation.DbNameCleared() {
		_spec.ClearField(sqllog.FieldDbName, field.TypeString)
	}
	if value, ok := sluo.mutation.PkValue(); ok {
		_spec.SetField(sqllog.FieldPkValue, field.TypeInt, value)
	}
	if value, ok := sluo.mutation.AddedPkValue(); ok {
		_spec.AddField(sqllog.FieldPkValue, field.TypeInt, value)
	}
	if sluo.mutation.PkValueCleared() {
		_spec.ClearField(sqllog.FieldPkValue, field.TypeInt)
	}
	if value, ok := sluo.mutation.OldData(); ok {
		_spec.SetField(sqllog.FieldOldData, field.TypeJSON, value)
	}
	if sluo.mutation.OldDataCleared() {
		_spec.ClearField(sqllog.FieldOldData, field.TypeJSON)
	}
	if value, ok := sluo.mutation.NewData(); ok {
		_spec.SetField(sqllog.FieldNewData, field.TypeJSON, value)
	}
	if sluo.mutation.NewDataCleared() {
		_spec.ClearField(sqllog.FieldNewData, field.TypeJSON)
	}
	if value, ok := sluo.mutation.Creator(); ok {
		_spec.SetField(sqllog.FieldCreator, field.TypeString, value)
	}
	if sluo.mutation.CreatorCleared() {
		_spec.ClearField(sqllog.FieldCreator, field.TypeString)
	}
	if value, ok := sluo.mutation.CreatedTime(); ok {
		_spec.SetField(sqllog.FieldCreatedTime, field.TypeTime, value)
	}
	if sluo.mutation.CreatedTimeCleared() {
		_spec.ClearField(sqllog.FieldCreatedTime, field.TypeTime)
	}
	_node = &SqlLog{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sqllog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sluo.mutation.done = true
	return _node, nil
}
