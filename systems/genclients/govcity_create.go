// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/govcity"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GovCityCreate is the builder for creating a GovCity entity.
type GovCityCreate struct {
	config
	mutation *GovCityMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (gcc *GovCityCreate) SetCode(s string) *GovCityCreate {
	gcc.mutation.SetCode(s)
	return gcc
}

// SetName sets the "name" field.
func (gcc *GovCityCreate) SetName(s string) *GovCityCreate {
	gcc.mutation.SetName(s)
	return gcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gcc *GovCityCreate) SetNillableName(s *string) *GovCityCreate {
	if s != nil {
		gcc.SetName(*s)
	}
	return gcc
}

// SetProvinceCode sets the "province_code" field.
func (gcc *GovCityCreate) SetProvinceCode(s string) *GovCityCreate {
	gcc.mutation.SetProvinceCode(s)
	return gcc
}

// SetNillableProvinceCode sets the "province_code" field if the given value is not nil.
func (gcc *GovCityCreate) SetNillableProvinceCode(s *string) *GovCityCreate {
	if s != nil {
		gcc.SetProvinceCode(*s)
	}
	return gcc
}

// SetCreator sets the "creator" field.
func (gcc *GovCityCreate) SetCreator(s string) *GovCityCreate {
	gcc.mutation.SetCreator(s)
	return gcc
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (gcc *GovCityCreate) SetNillableCreator(s *string) *GovCityCreate {
	if s != nil {
		gcc.SetCreator(*s)
	}
	return gcc
}

// SetDeleteFlag sets the "delete_flag" field.
func (gcc *GovCityCreate) SetDeleteFlag(s string) *GovCityCreate {
	gcc.mutation.SetDeleteFlag(s)
	return gcc
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (gcc *GovCityCreate) SetNillableDeleteFlag(s *string) *GovCityCreate {
	if s != nil {
		gcc.SetDeleteFlag(*s)
	}
	return gcc
}

// SetCreatedTime sets the "created_time" field.
func (gcc *GovCityCreate) SetCreatedTime(t time.Time) *GovCityCreate {
	gcc.mutation.SetCreatedTime(t)
	return gcc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (gcc *GovCityCreate) SetNillableCreatedTime(t *time.Time) *GovCityCreate {
	if t != nil {
		gcc.SetCreatedTime(*t)
	}
	return gcc
}

// SetID sets the "id" field.
func (gcc *GovCityCreate) SetID(i int64) *GovCityCreate {
	gcc.mutation.SetID(i)
	return gcc
}

// Mutation returns the GovCityMutation object of the builder.
func (gcc *GovCityCreate) Mutation() *GovCityMutation {
	return gcc.mutation
}

// Save creates the GovCity in the database.
func (gcc *GovCityCreate) Save(ctx context.Context) (*GovCity, error) {
	gcc.defaults()
	return withHooks(ctx, gcc.sqlSave, gcc.mutation, gcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gcc *GovCityCreate) SaveX(ctx context.Context) *GovCity {
	v, err := gcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcc *GovCityCreate) Exec(ctx context.Context) error {
	_, err := gcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcc *GovCityCreate) ExecX(ctx context.Context) {
	if err := gcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcc *GovCityCreate) defaults() {
	if _, ok := gcc.mutation.Name(); !ok {
		v := govcity.DefaultName
		gcc.mutation.SetName(v)
	}
	if _, ok := gcc.mutation.ProvinceCode(); !ok {
		v := govcity.DefaultProvinceCode
		gcc.mutation.SetProvinceCode(v)
	}
	if _, ok := gcc.mutation.Creator(); !ok {
		v := govcity.DefaultCreator
		gcc.mutation.SetCreator(v)
	}
	if _, ok := gcc.mutation.DeleteFlag(); !ok {
		v := govcity.DefaultDeleteFlag
		gcc.mutation.SetDeleteFlag(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gcc *GovCityCreate) check() error {
	if _, ok := gcc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`genclients: missing required field "GovCity.code"`)}
	}
	if v, ok := gcc.mutation.Code(); ok {
		if err := govcity.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`genclients: validator failed for field "GovCity.code": %w`, err)}
		}
	}
	if _, ok := gcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`genclients: missing required field "GovCity.name"`)}
	}
	if v, ok := gcc.mutation.Name(); ok {
		if err := govcity.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "GovCity.name": %w`, err)}
		}
	}
	if _, ok := gcc.mutation.ProvinceCode(); !ok {
		return &ValidationError{Name: "province_code", err: errors.New(`genclients: missing required field "GovCity.province_code"`)}
	}
	if v, ok := gcc.mutation.ProvinceCode(); ok {
		if err := govcity.ProvinceCodeValidator(v); err != nil {
			return &ValidationError{Name: "province_code", err: fmt.Errorf(`genclients: validator failed for field "GovCity.province_code": %w`, err)}
		}
	}
	if _, ok := gcc.mutation.Creator(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`genclients: missing required field "GovCity.creator"`)}
	}
	if v, ok := gcc.mutation.Creator(); ok {
		if err := govcity.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "GovCity.creator": %w`, err)}
		}
	}
	if _, ok := gcc.mutation.DeleteFlag(); !ok {
		return &ValidationError{Name: "delete_flag", err: errors.New(`genclients: missing required field "GovCity.delete_flag"`)}
	}
	if v, ok := gcc.mutation.DeleteFlag(); ok {
		if err := govcity.DeleteFlagValidator(v); err != nil {
			return &ValidationError{Name: "delete_flag", err: fmt.Errorf(`genclients: validator failed for field "GovCity.delete_flag": %w`, err)}
		}
	}
	return nil
}

func (gcc *GovCityCreate) sqlSave(ctx context.Context) (*GovCity, error) {
	if err := gcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	gcc.mutation.id = &_node.ID
	gcc.mutation.done = true
	return _node, nil
}

func (gcc *GovCityCreate) createSpec() (*GovCity, *sqlgraph.CreateSpec) {
	var (
		_node = &GovCity{config: gcc.config}
		_spec = sqlgraph.NewCreateSpec(govcity.Table, sqlgraph.NewFieldSpec(govcity.FieldID, field.TypeInt64))
	)
	if id, ok := gcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gcc.mutation.Code(); ok {
		_spec.SetField(govcity.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := gcc.mutation.Name(); ok {
		_spec.SetField(govcity.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gcc.mutation.ProvinceCode(); ok {
		_spec.SetField(govcity.FieldProvinceCode, field.TypeString, value)
		_node.ProvinceCode = value
	}
	if value, ok := gcc.mutation.Creator(); ok {
		_spec.SetField(govcity.FieldCreator, field.TypeString, value)
		_node.Creator = value
	}
	if value, ok := gcc.mutation.DeleteFlag(); ok {
		_spec.SetField(govcity.FieldDeleteFlag, field.TypeString, value)
		_node.DeleteFlag = value
	}
	if value, ok := gcc.mutation.CreatedTime(); ok {
		_spec.SetField(govcity.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	return _node, _spec
}

// GovCityCreateBulk is the builder for creating many GovCity entities in bulk.
type GovCityCreateBulk struct {
	config
	err      error
	builders []*GovCityCreate
}

// Save creates the GovCity entities in the database.
func (gccb *GovCityCreateBulk) Save(ctx context.Context) ([]*GovCity, error) {
	if gccb.err != nil {
		return nil, gccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gccb.builders))
	nodes := make([]*GovCity, len(gccb.builders))
	mutators := make([]Mutator, len(gccb.builders))
	for i := range gccb.builders {
		func(i int, root context.Context) {
			builder := gccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GovCityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gccb *GovCityCreateBulk) SaveX(ctx context.Context) []*GovCity {
	v, err := gccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gccb *GovCityCreateBulk) Exec(ctx context.Context) error {
	_, err := gccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gccb *GovCityCreateBulk) ExecX(ctx context.Context) {
	if err := gccb.Exec(ctx); err != nil {
		panic(err)
	}
}
