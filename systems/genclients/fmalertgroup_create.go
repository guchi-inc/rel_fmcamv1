// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/fmalertgroup"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FmAlertGroupCreate is the builder for creating a FmAlertGroup entity.
type FmAlertGroupCreate struct {
	config
	mutation *FmAlertGroupMutation
	hooks    []Hook
}

// SetGroupName sets the "group_name" field.
func (fagc *FmAlertGroupCreate) SetGroupName(s string) *FmAlertGroupCreate {
	fagc.mutation.SetGroupName(s)
	return fagc
}

// SetTenantID sets the "tenant_id" field.
func (fagc *FmAlertGroupCreate) SetTenantID(u uuid.UUID) *FmAlertGroupCreate {
	fagc.mutation.SetTenantID(u)
	return fagc
}

// SetGroupType sets the "group_type" field.
func (fagc *FmAlertGroupCreate) SetGroupType(i int8) *FmAlertGroupCreate {
	fagc.mutation.SetGroupType(i)
	return fagc
}

// SetNillableGroupType sets the "group_type" field if the given value is not nil.
func (fagc *FmAlertGroupCreate) SetNillableGroupType(i *int8) *FmAlertGroupCreate {
	if i != nil {
		fagc.SetGroupType(*i)
	}
	return fagc
}

// SetEnabled sets the "enabled" field.
func (fagc *FmAlertGroupCreate) SetEnabled(b bool) *FmAlertGroupCreate {
	fagc.mutation.SetEnabled(b)
	return fagc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (fagc *FmAlertGroupCreate) SetNillableEnabled(b *bool) *FmAlertGroupCreate {
	if b != nil {
		fagc.SetEnabled(*b)
	}
	return fagc
}

// SetCustomization sets the "customization" field.
func (fagc *FmAlertGroupCreate) SetCustomization(s string) *FmAlertGroupCreate {
	fagc.mutation.SetCustomization(s)
	return fagc
}

// SetNillableCustomization sets the "customization" field if the given value is not nil.
func (fagc *FmAlertGroupCreate) SetNillableCustomization(s *string) *FmAlertGroupCreate {
	if s != nil {
		fagc.SetCustomization(*s)
	}
	return fagc
}

// SetDescription sets the "description" field.
func (fagc *FmAlertGroupCreate) SetDescription(s string) *FmAlertGroupCreate {
	fagc.mutation.SetDescription(s)
	return fagc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fagc *FmAlertGroupCreate) SetNillableDescription(s *string) *FmAlertGroupCreate {
	if s != nil {
		fagc.SetDescription(*s)
	}
	return fagc
}

// SetCreator sets the "creator" field.
func (fagc *FmAlertGroupCreate) SetCreator(s string) *FmAlertGroupCreate {
	fagc.mutation.SetCreator(s)
	return fagc
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (fagc *FmAlertGroupCreate) SetNillableCreator(s *string) *FmAlertGroupCreate {
	if s != nil {
		fagc.SetCreator(*s)
	}
	return fagc
}

// SetUniqEnabledGroup sets the "uniq_enabled_group" field.
func (fagc *FmAlertGroupCreate) SetUniqEnabledGroup(s string) *FmAlertGroupCreate {
	fagc.mutation.SetUniqEnabledGroup(s)
	return fagc
}

// SetNillableUniqEnabledGroup sets the "uniq_enabled_group" field if the given value is not nil.
func (fagc *FmAlertGroupCreate) SetNillableUniqEnabledGroup(s *string) *FmAlertGroupCreate {
	if s != nil {
		fagc.SetUniqEnabledGroup(*s)
	}
	return fagc
}

// SetCreatedTime sets the "created_time" field.
func (fagc *FmAlertGroupCreate) SetCreatedTime(t time.Time) *FmAlertGroupCreate {
	fagc.mutation.SetCreatedTime(t)
	return fagc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fagc *FmAlertGroupCreate) SetNillableCreatedTime(t *time.Time) *FmAlertGroupCreate {
	if t != nil {
		fagc.SetCreatedTime(*t)
	}
	return fagc
}

// SetUpdatedTime sets the "updated_time" field.
func (fagc *FmAlertGroupCreate) SetUpdatedTime(t time.Time) *FmAlertGroupCreate {
	fagc.mutation.SetUpdatedTime(t)
	return fagc
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (fagc *FmAlertGroupCreate) SetNillableUpdatedTime(t *time.Time) *FmAlertGroupCreate {
	if t != nil {
		fagc.SetUpdatedTime(*t)
	}
	return fagc
}

// SetID sets the "id" field.
func (fagc *FmAlertGroupCreate) SetID(i int64) *FmAlertGroupCreate {
	fagc.mutation.SetID(i)
	return fagc
}

// Mutation returns the FmAlertGroupMutation object of the builder.
func (fagc *FmAlertGroupCreate) Mutation() *FmAlertGroupMutation {
	return fagc.mutation
}

// Save creates the FmAlertGroup in the database.
func (fagc *FmAlertGroupCreate) Save(ctx context.Context) (*FmAlertGroup, error) {
	fagc.defaults()
	return withHooks(ctx, fagc.sqlSave, fagc.mutation, fagc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fagc *FmAlertGroupCreate) SaveX(ctx context.Context) *FmAlertGroup {
	v, err := fagc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fagc *FmAlertGroupCreate) Exec(ctx context.Context) error {
	_, err := fagc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fagc *FmAlertGroupCreate) ExecX(ctx context.Context) {
	if err := fagc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fagc *FmAlertGroupCreate) defaults() {
	if _, ok := fagc.mutation.GroupType(); !ok {
		v := fmalertgroup.DefaultGroupType
		fagc.mutation.SetGroupType(v)
	}
	if _, ok := fagc.mutation.Enabled(); !ok {
		v := fmalertgroup.DefaultEnabled
		fagc.mutation.SetEnabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fagc *FmAlertGroupCreate) check() error {
	if _, ok := fagc.mutation.GroupName(); !ok {
		return &ValidationError{Name: "group_name", err: errors.New(`genclients: missing required field "FmAlertGroup.group_name"`)}
	}
	if v, ok := fagc.mutation.GroupName(); ok {
		if err := fmalertgroup.GroupNameValidator(v); err != nil {
			return &ValidationError{Name: "group_name", err: fmt.Errorf(`genclients: validator failed for field "FmAlertGroup.group_name": %w`, err)}
		}
	}
	if _, ok := fagc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`genclients: missing required field "FmAlertGroup.tenant_id"`)}
	}
	if v, ok := fagc.mutation.Customization(); ok {
		if err := fmalertgroup.CustomizationValidator(v); err != nil {
			return &ValidationError{Name: "customization", err: fmt.Errorf(`genclients: validator failed for field "FmAlertGroup.customization": %w`, err)}
		}
	}
	if v, ok := fagc.mutation.Description(); ok {
		if err := fmalertgroup.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "FmAlertGroup.description": %w`, err)}
		}
	}
	if v, ok := fagc.mutation.Creator(); ok {
		if err := fmalertgroup.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "FmAlertGroup.creator": %w`, err)}
		}
	}
	return nil
}

func (fagc *FmAlertGroupCreate) sqlSave(ctx context.Context) (*FmAlertGroup, error) {
	if err := fagc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fagc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fagc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fagc.mutation.id = &_node.ID
	fagc.mutation.done = true
	return _node, nil
}

func (fagc *FmAlertGroupCreate) createSpec() (*FmAlertGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &FmAlertGroup{config: fagc.config}
		_spec = sqlgraph.NewCreateSpec(fmalertgroup.Table, sqlgraph.NewFieldSpec(fmalertgroup.FieldID, field.TypeInt64))
	)
	if id, ok := fagc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fagc.mutation.GroupName(); ok {
		_spec.SetField(fmalertgroup.FieldGroupName, field.TypeString, value)
		_node.GroupName = value
	}
	if value, ok := fagc.mutation.TenantID(); ok {
		_spec.SetField(fmalertgroup.FieldTenantID, field.TypeUUID, value)
		_node.TenantID = value
	}
	if value, ok := fagc.mutation.GroupType(); ok {
		_spec.SetField(fmalertgroup.FieldGroupType, field.TypeInt8, value)
		_node.GroupType = value
	}
	if value, ok := fagc.mutation.Enabled(); ok {
		_spec.SetField(fmalertgroup.FieldEnabled, field.TypeBool, value)
		_node.Enabled = &value
	}
	if value, ok := fagc.mutation.Customization(); ok {
		_spec.SetField(fmalertgroup.FieldCustomization, field.TypeString, value)
		_node.Customization = value
	}
	if value, ok := fagc.mutation.Description(); ok {
		_spec.SetField(fmalertgroup.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fagc.mutation.Creator(); ok {
		_spec.SetField(fmalertgroup.FieldCreator, field.TypeString, value)
		_node.Creator = value
	}
	if value, ok := fagc.mutation.UniqEnabledGroup(); ok {
		_spec.SetField(fmalertgroup.FieldUniqEnabledGroup, field.TypeString, value)
		_node.UniqEnabledGroup = &value
	}
	if value, ok := fagc.mutation.CreatedTime(); ok {
		_spec.SetField(fmalertgroup.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	if value, ok := fagc.mutation.UpdatedTime(); ok {
		_spec.SetField(fmalertgroup.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = &value
	}
	return _node, _spec
}

// FmAlertGroupCreateBulk is the builder for creating many FmAlertGroup entities in bulk.
type FmAlertGroupCreateBulk struct {
	config
	err      error
	builders []*FmAlertGroupCreate
}

// Save creates the FmAlertGroup entities in the database.
func (fagcb *FmAlertGroupCreateBulk) Save(ctx context.Context) ([]*FmAlertGroup, error) {
	if fagcb.err != nil {
		return nil, fagcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fagcb.builders))
	nodes := make([]*FmAlertGroup, len(fagcb.builders))
	mutators := make([]Mutator, len(fagcb.builders))
	for i := range fagcb.builders {
		func(i int, root context.Context) {
			builder := fagcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FmAlertGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fagcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fagcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fagcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fagcb *FmAlertGroupCreateBulk) SaveX(ctx context.Context) []*FmAlertGroup {
	v, err := fagcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fagcb *FmAlertGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := fagcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fagcb *FmAlertGroupCreateBulk) ExecX(ctx context.Context) {
	if err := fagcb.Exec(ctx); err != nil {
		panic(err)
	}
}
