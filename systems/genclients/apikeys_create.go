// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/apikeys"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ApikeysCreate is the builder for creating a Apikeys entity.
type ApikeysCreate struct {
	config
	mutation *ApikeysMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ac *ApikeysCreate) SetUserID(i int64) *ApikeysCreate {
	ac.mutation.SetUserID(i)
	return ac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ac *ApikeysCreate) SetNillableUserID(i *int64) *ApikeysCreate {
	if i != nil {
		ac.SetUserID(*i)
	}
	return ac
}

// SetTenantID sets the "tenant_id" field.
func (ac *ApikeysCreate) SetTenantID(u uuid.UUID) *ApikeysCreate {
	ac.mutation.SetTenantID(u)
	return ac
}

// SetUsageCount sets the "usage_count" field.
func (ac *ApikeysCreate) SetUsageCount(i int64) *ApikeysCreate {
	ac.mutation.SetUsageCount(i)
	return ac
}

// SetAPIKey sets the "api_key" field.
func (ac *ApikeysCreate) SetAPIKey(s string) *ApikeysCreate {
	ac.mutation.SetAPIKey(s)
	return ac
}

// SetKeyName sets the "key_name" field.
func (ac *ApikeysCreate) SetKeyName(s string) *ApikeysCreate {
	ac.mutation.SetKeyName(s)
	return ac
}

// SetEnabled sets the "enabled" field.
func (ac *ApikeysCreate) SetEnabled(b bool) *ApikeysCreate {
	ac.mutation.SetEnabled(b)
	return ac
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ac *ApikeysCreate) SetNillableEnabled(b *bool) *ApikeysCreate {
	if b != nil {
		ac.SetEnabled(*b)
	}
	return ac
}

// SetExpiresTime sets the "expires_time" field.
func (ac *ApikeysCreate) SetExpiresTime(t time.Time) *ApikeysCreate {
	ac.mutation.SetExpiresTime(t)
	return ac
}

// SetCreatedTime sets the "created_time" field.
func (ac *ApikeysCreate) SetCreatedTime(t time.Time) *ApikeysCreate {
	ac.mutation.SetCreatedTime(t)
	return ac
}

// SetUpdatedTime sets the "updated_time" field.
func (ac *ApikeysCreate) SetUpdatedTime(t time.Time) *ApikeysCreate {
	ac.mutation.SetUpdatedTime(t)
	return ac
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (ac *ApikeysCreate) SetNillableUpdatedTime(t *time.Time) *ApikeysCreate {
	if t != nil {
		ac.SetUpdatedTime(*t)
	}
	return ac
}

// SetLastUsedTime sets the "last_used_time" field.
func (ac *ApikeysCreate) SetLastUsedTime(t time.Time) *ApikeysCreate {
	ac.mutation.SetLastUsedTime(t)
	return ac
}

// SetNillableLastUsedTime sets the "last_used_time" field if the given value is not nil.
func (ac *ApikeysCreate) SetNillableLastUsedTime(t *time.Time) *ApikeysCreate {
	if t != nil {
		ac.SetLastUsedTime(*t)
	}
	return ac
}

// SetType sets the "type" field.
func (ac *ApikeysCreate) SetType(i int) *ApikeysCreate {
	ac.mutation.SetType(i)
	return ac
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ac *ApikeysCreate) SetNillableType(i *int) *ApikeysCreate {
	if i != nil {
		ac.SetType(*i)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *ApikeysCreate) SetID(i int64) *ApikeysCreate {
	ac.mutation.SetID(i)
	return ac
}

// Mutation returns the ApikeysMutation object of the builder.
func (ac *ApikeysCreate) Mutation() *ApikeysMutation {
	return ac.mutation
}

// Save creates the Apikeys in the database.
func (ac *ApikeysCreate) Save(ctx context.Context) (*Apikeys, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ApikeysCreate) SaveX(ctx context.Context) *Apikeys {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ApikeysCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ApikeysCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ApikeysCreate) check() error {
	if _, ok := ac.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`genclients: missing required field "Apikeys.tenant_id"`)}
	}
	if _, ok := ac.mutation.UsageCount(); !ok {
		return &ValidationError{Name: "usage_count", err: errors.New(`genclients: missing required field "Apikeys.usage_count"`)}
	}
	if _, ok := ac.mutation.APIKey(); !ok {
		return &ValidationError{Name: "api_key", err: errors.New(`genclients: missing required field "Apikeys.api_key"`)}
	}
	if _, ok := ac.mutation.KeyName(); !ok {
		return &ValidationError{Name: "key_name", err: errors.New(`genclients: missing required field "Apikeys.key_name"`)}
	}
	if _, ok := ac.mutation.ExpiresTime(); !ok {
		return &ValidationError{Name: "expires_time", err: errors.New(`genclients: missing required field "Apikeys.expires_time"`)}
	}
	if _, ok := ac.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "created_time", err: errors.New(`genclients: missing required field "Apikeys.created_time"`)}
	}
	return nil
}

func (ac *ApikeysCreate) sqlSave(ctx context.Context) (*Apikeys, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ApikeysCreate) createSpec() (*Apikeys, *sqlgraph.CreateSpec) {
	var (
		_node = &Apikeys{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(apikeys.Table, sqlgraph.NewFieldSpec(apikeys.FieldID, field.TypeInt64))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.UserID(); ok {
		_spec.SetField(apikeys.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := ac.mutation.TenantID(); ok {
		_spec.SetField(apikeys.FieldTenantID, field.TypeUUID, value)
		_node.TenantID = value
	}
	if value, ok := ac.mutation.UsageCount(); ok {
		_spec.SetField(apikeys.FieldUsageCount, field.TypeInt64, value)
		_node.UsageCount = value
	}
	if value, ok := ac.mutation.APIKey(); ok {
		_spec.SetField(apikeys.FieldAPIKey, field.TypeString, value)
		_node.APIKey = value
	}
	if value, ok := ac.mutation.KeyName(); ok {
		_spec.SetField(apikeys.FieldKeyName, field.TypeString, value)
		_node.KeyName = value
	}
	if value, ok := ac.mutation.Enabled(); ok {
		_spec.SetField(apikeys.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := ac.mutation.ExpiresTime(); ok {
		_spec.SetField(apikeys.FieldExpiresTime, field.TypeTime, value)
		_node.ExpiresTime = value
	}
	if value, ok := ac.mutation.CreatedTime(); ok {
		_spec.SetField(apikeys.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = value
	}
	if value, ok := ac.mutation.UpdatedTime(); ok {
		_spec.SetField(apikeys.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = value
	}
	if value, ok := ac.mutation.LastUsedTime(); ok {
		_spec.SetField(apikeys.FieldLastUsedTime, field.TypeTime, value)
		_node.LastUsedTime = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(apikeys.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	return _node, _spec
}

// ApikeysCreateBulk is the builder for creating many Apikeys entities in bulk.
type ApikeysCreateBulk struct {
	config
	err      error
	builders []*ApikeysCreate
}

// Save creates the Apikeys entities in the database.
func (acb *ApikeysCreateBulk) Save(ctx context.Context) ([]*Apikeys, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Apikeys, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApikeysMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ApikeysCreateBulk) SaveX(ctx context.Context) []*Apikeys {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ApikeysCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ApikeysCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
