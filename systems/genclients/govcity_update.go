// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/govcity"
	"fmcam/systems/genclients/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GovCityUpdate is the builder for updating GovCity entities.
type GovCityUpdate struct {
	config
	hooks    []Hook
	mutation *GovCityMutation
}

// Where appends a list predicates to the GovCityUpdate builder.
func (gcu *GovCityUpdate) Where(ps ...predicate.GovCity) *GovCityUpdate {
	gcu.mutation.Where(ps...)
	return gcu
}

// SetCode sets the "code" field.
func (gcu *GovCityUpdate) SetCode(s string) *GovCityUpdate {
	gcu.mutation.SetCode(s)
	return gcu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (gcu *GovCityUpdate) SetNillableCode(s *string) *GovCityUpdate {
	if s != nil {
		gcu.SetCode(*s)
	}
	return gcu
}

// SetName sets the "name" field.
func (gcu *GovCityUpdate) SetName(s string) *GovCityUpdate {
	gcu.mutation.SetName(s)
	return gcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gcu *GovCityUpdate) SetNillableName(s *string) *GovCityUpdate {
	if s != nil {
		gcu.SetName(*s)
	}
	return gcu
}

// SetProvinceCode sets the "province_code" field.
func (gcu *GovCityUpdate) SetProvinceCode(s string) *GovCityUpdate {
	gcu.mutation.SetProvinceCode(s)
	return gcu
}

// SetNillableProvinceCode sets the "province_code" field if the given value is not nil.
func (gcu *GovCityUpdate) SetNillableProvinceCode(s *string) *GovCityUpdate {
	if s != nil {
		gcu.SetProvinceCode(*s)
	}
	return gcu
}

// SetCreator sets the "creator" field.
func (gcu *GovCityUpdate) SetCreator(s string) *GovCityUpdate {
	gcu.mutation.SetCreator(s)
	return gcu
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (gcu *GovCityUpdate) SetNillableCreator(s *string) *GovCityUpdate {
	if s != nil {
		gcu.SetCreator(*s)
	}
	return gcu
}

// SetDeleteFlag sets the "delete_flag" field.
func (gcu *GovCityUpdate) SetDeleteFlag(s string) *GovCityUpdate {
	gcu.mutation.SetDeleteFlag(s)
	return gcu
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (gcu *GovCityUpdate) SetNillableDeleteFlag(s *string) *GovCityUpdate {
	if s != nil {
		gcu.SetDeleteFlag(*s)
	}
	return gcu
}

// SetCreatedTime sets the "created_time" field.
func (gcu *GovCityUpdate) SetCreatedTime(t time.Time) *GovCityUpdate {
	gcu.mutation.SetCreatedTime(t)
	return gcu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (gcu *GovCityUpdate) SetNillableCreatedTime(t *time.Time) *GovCityUpdate {
	if t != nil {
		gcu.SetCreatedTime(*t)
	}
	return gcu
}

// ClearCreatedTime clears the value of the "created_time" field.
func (gcu *GovCityUpdate) ClearCreatedTime() *GovCityUpdate {
	gcu.mutation.ClearCreatedTime()
	return gcu
}

// Mutation returns the GovCityMutation object of the builder.
func (gcu *GovCityUpdate) Mutation() *GovCityMutation {
	return gcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gcu *GovCityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gcu.sqlSave, gcu.mutation, gcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gcu *GovCityUpdate) SaveX(ctx context.Context) int {
	affected, err := gcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gcu *GovCityUpdate) Exec(ctx context.Context) error {
	_, err := gcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcu *GovCityUpdate) ExecX(ctx context.Context) {
	if err := gcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gcu *GovCityUpdate) check() error {
	if v, ok := gcu.mutation.Code(); ok {
		if err := govcity.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`genclients: validator failed for field "GovCity.code": %w`, err)}
		}
	}
	if v, ok := gcu.mutation.Name(); ok {
		if err := govcity.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "GovCity.name": %w`, err)}
		}
	}
	if v, ok := gcu.mutation.ProvinceCode(); ok {
		if err := govcity.ProvinceCodeValidator(v); err != nil {
			return &ValidationError{Name: "province_code", err: fmt.Errorf(`genclients: validator failed for field "GovCity.province_code": %w`, err)}
		}
	}
	if v, ok := gcu.mutation.Creator(); ok {
		if err := govcity.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "GovCity.creator": %w`, err)}
		}
	}
	if v, ok := gcu.mutation.DeleteFlag(); ok {
		if err := govcity.DeleteFlagValidator(v); err != nil {
			return &ValidationError{Name: "delete_flag", err: fmt.Errorf(`genclients: validator failed for field "GovCity.delete_flag": %w`, err)}
		}
	}
	return nil
}

func (gcu *GovCityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(govcity.Table, govcity.Columns, sqlgraph.NewFieldSpec(govcity.FieldID, field.TypeInt64))
	if ps := gcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcu.mutation.Code(); ok {
		_spec.SetField(govcity.FieldCode, field.TypeString, value)
	}
	if value, ok := gcu.mutation.Name(); ok {
		_spec.SetField(govcity.FieldName, field.TypeString, value)
	}
	if value, ok := gcu.mutation.ProvinceCode(); ok {
		_spec.SetField(govcity.FieldProvinceCode, field.TypeString, value)
	}
	if value, ok := gcu.mutation.Creator(); ok {
		_spec.SetField(govcity.FieldCreator, field.TypeString, value)
	}
	if value, ok := gcu.mutation.DeleteFlag(); ok {
		_spec.SetField(govcity.FieldDeleteFlag, field.TypeString, value)
	}
	if value, ok := gcu.mutation.CreatedTime(); ok {
		_spec.SetField(govcity.FieldCreatedTime, field.TypeTime, value)
	}
	if gcu.mutation.CreatedTimeCleared() {
		_spec.ClearField(govcity.FieldCreatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{govcity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gcu.mutation.done = true
	return n, nil
}

// GovCityUpdateOne is the builder for updating a single GovCity entity.
type GovCityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GovCityMutation
}

// SetCode sets the "code" field.
func (gcuo *GovCityUpdateOne) SetCode(s string) *GovCityUpdateOne {
	gcuo.mutation.SetCode(s)
	return gcuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (gcuo *GovCityUpdateOne) SetNillableCode(s *string) *GovCityUpdateOne {
	if s != nil {
		gcuo.SetCode(*s)
	}
	return gcuo
}

// SetName sets the "name" field.
func (gcuo *GovCityUpdateOne) SetName(s string) *GovCityUpdateOne {
	gcuo.mutation.SetName(s)
	return gcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gcuo *GovCityUpdateOne) SetNillableName(s *string) *GovCityUpdateOne {
	if s != nil {
		gcuo.SetName(*s)
	}
	return gcuo
}

// SetProvinceCode sets the "province_code" field.
func (gcuo *GovCityUpdateOne) SetProvinceCode(s string) *GovCityUpdateOne {
	gcuo.mutation.SetProvinceCode(s)
	return gcuo
}

// SetNillableProvinceCode sets the "province_code" field if the given value is not nil.
func (gcuo *GovCityUpdateOne) SetNillableProvinceCode(s *string) *GovCityUpdateOne {
	if s != nil {
		gcuo.SetProvinceCode(*s)
	}
	return gcuo
}

// SetCreator sets the "creator" field.
func (gcuo *GovCityUpdateOne) SetCreator(s string) *GovCityUpdateOne {
	gcuo.mutation.SetCreator(s)
	return gcuo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (gcuo *GovCityUpdateOne) SetNillableCreator(s *string) *GovCityUpdateOne {
	if s != nil {
		gcuo.SetCreator(*s)
	}
	return gcuo
}

// SetDeleteFlag sets the "delete_flag" field.
func (gcuo *GovCityUpdateOne) SetDeleteFlag(s string) *GovCityUpdateOne {
	gcuo.mutation.SetDeleteFlag(s)
	return gcuo
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (gcuo *GovCityUpdateOne) SetNillableDeleteFlag(s *string) *GovCityUpdateOne {
	if s != nil {
		gcuo.SetDeleteFlag(*s)
	}
	return gcuo
}

// SetCreatedTime sets the "created_time" field.
func (gcuo *GovCityUpdateOne) SetCreatedTime(t time.Time) *GovCityUpdateOne {
	gcuo.mutation.SetCreatedTime(t)
	return gcuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (gcuo *GovCityUpdateOne) SetNillableCreatedTime(t *time.Time) *GovCityUpdateOne {
	if t != nil {
		gcuo.SetCreatedTime(*t)
	}
	return gcuo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (gcuo *GovCityUpdateOne) ClearCreatedTime() *GovCityUpdateOne {
	gcuo.mutation.ClearCreatedTime()
	return gcuo
}

// Mutation returns the GovCityMutation object of the builder.
func (gcuo *GovCityUpdateOne) Mutation() *GovCityMutation {
	return gcuo.mutation
}

// Where appends a list predicates to the GovCityUpdate builder.
func (gcuo *GovCityUpdateOne) Where(ps ...predicate.GovCity) *GovCityUpdateOne {
	gcuo.mutation.Where(ps...)
	return gcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gcuo *GovCityUpdateOne) Select(field string, fields ...string) *GovCityUpdateOne {
	gcuo.fields = append([]string{field}, fields...)
	return gcuo
}

// Save executes the query and returns the updated GovCity entity.
func (gcuo *GovCityUpdateOne) Save(ctx context.Context) (*GovCity, error) {
	return withHooks(ctx, gcuo.sqlSave, gcuo.mutation, gcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gcuo *GovCityUpdateOne) SaveX(ctx context.Context) *GovCity {
	node, err := gcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gcuo *GovCityUpdateOne) Exec(ctx context.Context) error {
	_, err := gcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcuo *GovCityUpdateOne) ExecX(ctx context.Context) {
	if err := gcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gcuo *GovCityUpdateOne) check() error {
	if v, ok := gcuo.mutation.Code(); ok {
		if err := govcity.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`genclients: validator failed for field "GovCity.code": %w`, err)}
		}
	}
	if v, ok := gcuo.mutation.Name(); ok {
		if err := govcity.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "GovCity.name": %w`, err)}
		}
	}
	if v, ok := gcuo.mutation.ProvinceCode(); ok {
		if err := govcity.ProvinceCodeValidator(v); err != nil {
			return &ValidationError{Name: "province_code", err: fmt.Errorf(`genclients: validator failed for field "GovCity.province_code": %w`, err)}
		}
	}
	if v, ok := gcuo.mutation.Creator(); ok {
		if err := govcity.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "GovCity.creator": %w`, err)}
		}
	}
	if v, ok := gcuo.mutation.DeleteFlag(); ok {
		if err := govcity.DeleteFlagValidator(v); err != nil {
			return &ValidationError{Name: "delete_flag", err: fmt.Errorf(`genclients: validator failed for field "GovCity.delete_flag": %w`, err)}
		}
	}
	return nil
}

func (gcuo *GovCityUpdateOne) sqlSave(ctx context.Context) (_node *GovCity, err error) {
	if err := gcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(govcity.Table, govcity.Columns, sqlgraph.NewFieldSpec(govcity.FieldID, field.TypeInt64))
	id, ok := gcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "GovCity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, govcity.FieldID)
		for _, f := range fields {
			if !govcity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != govcity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcuo.mutation.Code(); ok {
		_spec.SetField(govcity.FieldCode, field.TypeString, value)
	}
	if value, ok := gcuo.mutation.Name(); ok {
		_spec.SetField(govcity.FieldName, field.TypeString, value)
	}
	if value, ok := gcuo.mutation.ProvinceCode(); ok {
		_spec.SetField(govcity.FieldProvinceCode, field.TypeString, value)
	}
	if value, ok := gcuo.mutation.Creator(); ok {
		_spec.SetField(govcity.FieldCreator, field.TypeString, value)
	}
	if value, ok := gcuo.mutation.DeleteFlag(); ok {
		_spec.SetField(govcity.FieldDeleteFlag, field.TypeString, value)
	}
	if value, ok := gcuo.mutation.CreatedTime(); ok {
		_spec.SetField(govcity.FieldCreatedTime, field.TypeTime, value)
	}
	if gcuo.mutation.CreatedTimeCleared() {
		_spec.ClearField(govcity.FieldCreatedTime, field.TypeTime)
	}
	_node = &GovCity{config: gcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{govcity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gcuo.mutation.done = true
	return _node, nil
}
