// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"fmcam/systems/genclients/fmalertdefinition"
	"fmcam/systems/genclients/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FmAlertDefinitionDelete is the builder for deleting a FmAlertDefinition entity.
type FmAlertDefinitionDelete struct {
	config
	hooks    []Hook
	mutation *FmAlertDefinitionMutation
}

// Where appends a list predicates to the FmAlertDefinitionDelete builder.
func (fadd *FmAlertDefinitionDelete) Where(ps ...predicate.FmAlertDefinition) *FmAlertDefinitionDelete {
	fadd.mutation.Where(ps...)
	return fadd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fadd *FmAlertDefinitionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fadd.sqlExec, fadd.mutation, fadd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fadd *FmAlertDefinitionDelete) ExecX(ctx context.Context) int {
	n, err := fadd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fadd *FmAlertDefinitionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(fmalertdefinition.Table, sqlgraph.NewFieldSpec(fmalertdefinition.FieldID, field.TypeInt64))
	if ps := fadd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fadd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fadd.mutation.done = true
	return affected, err
}

// FmAlertDefinitionDeleteOne is the builder for deleting a single FmAlertDefinition entity.
type FmAlertDefinitionDeleteOne struct {
	fadd *FmAlertDefinitionDelete
}

// Where appends a list predicates to the FmAlertDefinitionDelete builder.
func (faddo *FmAlertDefinitionDeleteOne) Where(ps ...predicate.FmAlertDefinition) *FmAlertDefinitionDeleteOne {
	faddo.fadd.mutation.Where(ps...)
	return faddo
}

// Exec executes the deletion query.
func (faddo *FmAlertDefinitionDeleteOne) Exec(ctx context.Context) error {
	n, err := faddo.fadd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{fmalertdefinition.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (faddo *FmAlertDefinitionDeleteOne) ExecX(ctx context.Context) {
	if err := faddo.Exec(ctx); err != nil {
		panic(err)
	}
}
