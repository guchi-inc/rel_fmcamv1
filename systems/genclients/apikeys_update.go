// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/apikeys"
	"fmcam/systems/genclients/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApikeysUpdate is the builder for updating Apikeys entities.
type ApikeysUpdate struct {
	config
	hooks    []Hook
	mutation *ApikeysMutation
}

// Where appends a list predicates to the ApikeysUpdate builder.
func (au *ApikeysUpdate) Where(ps ...predicate.Apikeys) *ApikeysUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUserID sets the "user_id" field.
func (au *ApikeysUpdate) SetUserID(i int64) *ApikeysUpdate {
	au.mutation.ResetUserID()
	au.mutation.SetUserID(i)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *ApikeysUpdate) SetNillableUserID(i *int64) *ApikeysUpdate {
	if i != nil {
		au.SetUserID(*i)
	}
	return au
}

// AddUserID adds i to the "user_id" field.
func (au *ApikeysUpdate) AddUserID(i int64) *ApikeysUpdate {
	au.mutation.AddUserID(i)
	return au
}

// ClearUserID clears the value of the "user_id" field.
func (au *ApikeysUpdate) ClearUserID() *ApikeysUpdate {
	au.mutation.ClearUserID()
	return au
}

// SetUsageCount sets the "usage_count" field.
func (au *ApikeysUpdate) SetUsageCount(i int64) *ApikeysUpdate {
	au.mutation.ResetUsageCount()
	au.mutation.SetUsageCount(i)
	return au
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (au *ApikeysUpdate) SetNillableUsageCount(i *int64) *ApikeysUpdate {
	if i != nil {
		au.SetUsageCount(*i)
	}
	return au
}

// AddUsageCount adds i to the "usage_count" field.
func (au *ApikeysUpdate) AddUsageCount(i int64) *ApikeysUpdate {
	au.mutation.AddUsageCount(i)
	return au
}

// SetAPIKey sets the "api_key" field.
func (au *ApikeysUpdate) SetAPIKey(s string) *ApikeysUpdate {
	au.mutation.SetAPIKey(s)
	return au
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (au *ApikeysUpdate) SetNillableAPIKey(s *string) *ApikeysUpdate {
	if s != nil {
		au.SetAPIKey(*s)
	}
	return au
}

// SetKeyName sets the "key_name" field.
func (au *ApikeysUpdate) SetKeyName(s string) *ApikeysUpdate {
	au.mutation.SetKeyName(s)
	return au
}

// SetNillableKeyName sets the "key_name" field if the given value is not nil.
func (au *ApikeysUpdate) SetNillableKeyName(s *string) *ApikeysUpdate {
	if s != nil {
		au.SetKeyName(*s)
	}
	return au
}

// SetEnabled sets the "enabled" field.
func (au *ApikeysUpdate) SetEnabled(b bool) *ApikeysUpdate {
	au.mutation.SetEnabled(b)
	return au
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (au *ApikeysUpdate) SetNillableEnabled(b *bool) *ApikeysUpdate {
	if b != nil {
		au.SetEnabled(*b)
	}
	return au
}

// ClearEnabled clears the value of the "enabled" field.
func (au *ApikeysUpdate) ClearEnabled() *ApikeysUpdate {
	au.mutation.ClearEnabled()
	return au
}

// SetUpdatedTime sets the "updated_time" field.
func (au *ApikeysUpdate) SetUpdatedTime(t time.Time) *ApikeysUpdate {
	au.mutation.SetUpdatedTime(t)
	return au
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (au *ApikeysUpdate) SetNillableUpdatedTime(t *time.Time) *ApikeysUpdate {
	if t != nil {
		au.SetUpdatedTime(*t)
	}
	return au
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (au *ApikeysUpdate) ClearUpdatedTime() *ApikeysUpdate {
	au.mutation.ClearUpdatedTime()
	return au
}

// SetLastUsedTime sets the "last_used_time" field.
func (au *ApikeysUpdate) SetLastUsedTime(t time.Time) *ApikeysUpdate {
	au.mutation.SetLastUsedTime(t)
	return au
}

// SetNillableLastUsedTime sets the "last_used_time" field if the given value is not nil.
func (au *ApikeysUpdate) SetNillableLastUsedTime(t *time.Time) *ApikeysUpdate {
	if t != nil {
		au.SetLastUsedTime(*t)
	}
	return au
}

// ClearLastUsedTime clears the value of the "last_used_time" field.
func (au *ApikeysUpdate) ClearLastUsedTime() *ApikeysUpdate {
	au.mutation.ClearLastUsedTime()
	return au
}

// SetType sets the "type" field.
func (au *ApikeysUpdate) SetType(i int) *ApikeysUpdate {
	au.mutation.ResetType()
	au.mutation.SetType(i)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *ApikeysUpdate) SetNillableType(i *int) *ApikeysUpdate {
	if i != nil {
		au.SetType(*i)
	}
	return au
}

// AddType adds i to the "type" field.
func (au *ApikeysUpdate) AddType(i int) *ApikeysUpdate {
	au.mutation.AddType(i)
	return au
}

// ClearType clears the value of the "type" field.
func (au *ApikeysUpdate) ClearType() *ApikeysUpdate {
	au.mutation.ClearType()
	return au
}

// Mutation returns the ApikeysMutation object of the builder.
func (au *ApikeysUpdate) Mutation() *ApikeysMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ApikeysUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ApikeysUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ApikeysUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ApikeysUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *ApikeysUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(apikeys.Table, apikeys.Columns, sqlgraph.NewFieldSpec(apikeys.FieldID, field.TypeInt64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UserID(); ok {
		_spec.SetField(apikeys.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedUserID(); ok {
		_spec.AddField(apikeys.FieldUserID, field.TypeInt64, value)
	}
	if au.mutation.UserIDCleared() {
		_spec.ClearField(apikeys.FieldUserID, field.TypeInt64)
	}
	if value, ok := au.mutation.UsageCount(); ok {
		_spec.SetField(apikeys.FieldUsageCount, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedUsageCount(); ok {
		_spec.AddField(apikeys.FieldUsageCount, field.TypeInt64, value)
	}
	if value, ok := au.mutation.APIKey(); ok {
		_spec.SetField(apikeys.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := au.mutation.KeyName(); ok {
		_spec.SetField(apikeys.FieldKeyName, field.TypeString, value)
	}
	if value, ok := au.mutation.Enabled(); ok {
		_spec.SetField(apikeys.FieldEnabled, field.TypeBool, value)
	}
	if au.mutation.EnabledCleared() {
		_spec.ClearField(apikeys.FieldEnabled, field.TypeBool)
	}
	if value, ok := au.mutation.UpdatedTime(); ok {
		_spec.SetField(apikeys.FieldUpdatedTime, field.TypeTime, value)
	}
	if au.mutation.UpdatedTimeCleared() {
		_spec.ClearField(apikeys.FieldUpdatedTime, field.TypeTime)
	}
	if value, ok := au.mutation.LastUsedTime(); ok {
		_spec.SetField(apikeys.FieldLastUsedTime, field.TypeTime, value)
	}
	if au.mutation.LastUsedTimeCleared() {
		_spec.ClearField(apikeys.FieldLastUsedTime, field.TypeTime)
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(apikeys.FieldType, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedType(); ok {
		_spec.AddField(apikeys.FieldType, field.TypeInt, value)
	}
	if au.mutation.TypeCleared() {
		_spec.ClearField(apikeys.FieldType, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikeys.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ApikeysUpdateOne is the builder for updating a single Apikeys entity.
type ApikeysUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApikeysMutation
}

// SetUserID sets the "user_id" field.
func (auo *ApikeysUpdateOne) SetUserID(i int64) *ApikeysUpdateOne {
	auo.mutation.ResetUserID()
	auo.mutation.SetUserID(i)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *ApikeysUpdateOne) SetNillableUserID(i *int64) *ApikeysUpdateOne {
	if i != nil {
		auo.SetUserID(*i)
	}
	return auo
}

// AddUserID adds i to the "user_id" field.
func (auo *ApikeysUpdateOne) AddUserID(i int64) *ApikeysUpdateOne {
	auo.mutation.AddUserID(i)
	return auo
}

// ClearUserID clears the value of the "user_id" field.
func (auo *ApikeysUpdateOne) ClearUserID() *ApikeysUpdateOne {
	auo.mutation.ClearUserID()
	return auo
}

// SetUsageCount sets the "usage_count" field.
func (auo *ApikeysUpdateOne) SetUsageCount(i int64) *ApikeysUpdateOne {
	auo.mutation.ResetUsageCount()
	auo.mutation.SetUsageCount(i)
	return auo
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (auo *ApikeysUpdateOne) SetNillableUsageCount(i *int64) *ApikeysUpdateOne {
	if i != nil {
		auo.SetUsageCount(*i)
	}
	return auo
}

// AddUsageCount adds i to the "usage_count" field.
func (auo *ApikeysUpdateOne) AddUsageCount(i int64) *ApikeysUpdateOne {
	auo.mutation.AddUsageCount(i)
	return auo
}

// SetAPIKey sets the "api_key" field.
func (auo *ApikeysUpdateOne) SetAPIKey(s string) *ApikeysUpdateOne {
	auo.mutation.SetAPIKey(s)
	return auo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (auo *ApikeysUpdateOne) SetNillableAPIKey(s *string) *ApikeysUpdateOne {
	if s != nil {
		auo.SetAPIKey(*s)
	}
	return auo
}

// SetKeyName sets the "key_name" field.
func (auo *ApikeysUpdateOne) SetKeyName(s string) *ApikeysUpdateOne {
	auo.mutation.SetKeyName(s)
	return auo
}

// SetNillableKeyName sets the "key_name" field if the given value is not nil.
func (auo *ApikeysUpdateOne) SetNillableKeyName(s *string) *ApikeysUpdateOne {
	if s != nil {
		auo.SetKeyName(*s)
	}
	return auo
}

// SetEnabled sets the "enabled" field.
func (auo *ApikeysUpdateOne) SetEnabled(b bool) *ApikeysUpdateOne {
	auo.mutation.SetEnabled(b)
	return auo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (auo *ApikeysUpdateOne) SetNillableEnabled(b *bool) *ApikeysUpdateOne {
	if b != nil {
		auo.SetEnabled(*b)
	}
	return auo
}

// ClearEnabled clears the value of the "enabled" field.
func (auo *ApikeysUpdateOne) ClearEnabled() *ApikeysUpdateOne {
	auo.mutation.ClearEnabled()
	return auo
}

// SetUpdatedTime sets the "updated_time" field.
func (auo *ApikeysUpdateOne) SetUpdatedTime(t time.Time) *ApikeysUpdateOne {
	auo.mutation.SetUpdatedTime(t)
	return auo
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (auo *ApikeysUpdateOne) SetNillableUpdatedTime(t *time.Time) *ApikeysUpdateOne {
	if t != nil {
		auo.SetUpdatedTime(*t)
	}
	return auo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (auo *ApikeysUpdateOne) ClearUpdatedTime() *ApikeysUpdateOne {
	auo.mutation.ClearUpdatedTime()
	return auo
}

// SetLastUsedTime sets the "last_used_time" field.
func (auo *ApikeysUpdateOne) SetLastUsedTime(t time.Time) *ApikeysUpdateOne {
	auo.mutation.SetLastUsedTime(t)
	return auo
}

// SetNillableLastUsedTime sets the "last_used_time" field if the given value is not nil.
func (auo *ApikeysUpdateOne) SetNillableLastUsedTime(t *time.Time) *ApikeysUpdateOne {
	if t != nil {
		auo.SetLastUsedTime(*t)
	}
	return auo
}

// ClearLastUsedTime clears the value of the "last_used_time" field.
func (auo *ApikeysUpdateOne) ClearLastUsedTime() *ApikeysUpdateOne {
	auo.mutation.ClearLastUsedTime()
	return auo
}

// SetType sets the "type" field.
func (auo *ApikeysUpdateOne) SetType(i int) *ApikeysUpdateOne {
	auo.mutation.ResetType()
	auo.mutation.SetType(i)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *ApikeysUpdateOne) SetNillableType(i *int) *ApikeysUpdateOne {
	if i != nil {
		auo.SetType(*i)
	}
	return auo
}

// AddType adds i to the "type" field.
func (auo *ApikeysUpdateOne) AddType(i int) *ApikeysUpdateOne {
	auo.mutation.AddType(i)
	return auo
}

// ClearType clears the value of the "type" field.
func (auo *ApikeysUpdateOne) ClearType() *ApikeysUpdateOne {
	auo.mutation.ClearType()
	return auo
}

// Mutation returns the ApikeysMutation object of the builder.
func (auo *ApikeysUpdateOne) Mutation() *ApikeysMutation {
	return auo.mutation
}

// Where appends a list predicates to the ApikeysUpdate builder.
func (auo *ApikeysUpdateOne) Where(ps ...predicate.Apikeys) *ApikeysUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ApikeysUpdateOne) Select(field string, fields ...string) *ApikeysUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Apikeys entity.
func (auo *ApikeysUpdateOne) Save(ctx context.Context) (*Apikeys, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ApikeysUpdateOne) SaveX(ctx context.Context) *Apikeys {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ApikeysUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ApikeysUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *ApikeysUpdateOne) sqlSave(ctx context.Context) (_node *Apikeys, err error) {
	_spec := sqlgraph.NewUpdateSpec(apikeys.Table, apikeys.Columns, sqlgraph.NewFieldSpec(apikeys.FieldID, field.TypeInt64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "Apikeys.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apikeys.FieldID)
		for _, f := range fields {
			if !apikeys.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != apikeys.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UserID(); ok {
		_spec.SetField(apikeys.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedUserID(); ok {
		_spec.AddField(apikeys.FieldUserID, field.TypeInt64, value)
	}
	if auo.mutation.UserIDCleared() {
		_spec.ClearField(apikeys.FieldUserID, field.TypeInt64)
	}
	if value, ok := auo.mutation.UsageCount(); ok {
		_spec.SetField(apikeys.FieldUsageCount, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedUsageCount(); ok {
		_spec.AddField(apikeys.FieldUsageCount, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.APIKey(); ok {
		_spec.SetField(apikeys.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := auo.mutation.KeyName(); ok {
		_spec.SetField(apikeys.FieldKeyName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Enabled(); ok {
		_spec.SetField(apikeys.FieldEnabled, field.TypeBool, value)
	}
	if auo.mutation.EnabledCleared() {
		_spec.ClearField(apikeys.FieldEnabled, field.TypeBool)
	}
	if value, ok := auo.mutation.UpdatedTime(); ok {
		_spec.SetField(apikeys.FieldUpdatedTime, field.TypeTime, value)
	}
	if auo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(apikeys.FieldUpdatedTime, field.TypeTime)
	}
	if value, ok := auo.mutation.LastUsedTime(); ok {
		_spec.SetField(apikeys.FieldLastUsedTime, field.TypeTime, value)
	}
	if auo.mutation.LastUsedTimeCleared() {
		_spec.ClearField(apikeys.FieldLastUsedTime, field.TypeTime)
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(apikeys.FieldType, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedType(); ok {
		_spec.AddField(apikeys.FieldType, field.TypeInt, value)
	}
	if auo.mutation.TypeCleared() {
		_spec.ClearField(apikeys.FieldType, field.TypeInt)
	}
	_node = &Apikeys{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikeys.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
