// Code generated by ent, DO NOT EDIT.

package grouprofiletypemapping

import (
	"fmcam/systems/genclients/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldLTE(FieldID, id))
}

// GroupID applies equality check predicate on the "group_id" field. It's identical to GroupIDEQ.
func GroupID(v int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldEQ(FieldGroupID, v))
}

// ProfileTypeID applies equality check predicate on the "profile_type_id" field. It's identical to ProfileTypeIDEQ.
func ProfileTypeID(v int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldEQ(FieldProfileTypeID, v))
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v string) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldEQ(FieldCreator, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldEQ(FieldCreatedTime, v))
}

// GroupIDEQ applies the EQ predicate on the "group_id" field.
func GroupIDEQ(v int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldEQ(FieldGroupID, v))
}

// GroupIDNEQ applies the NEQ predicate on the "group_id" field.
func GroupIDNEQ(v int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldNEQ(FieldGroupID, v))
}

// GroupIDIn applies the In predicate on the "group_id" field.
func GroupIDIn(vs ...int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldIn(FieldGroupID, vs...))
}

// GroupIDNotIn applies the NotIn predicate on the "group_id" field.
func GroupIDNotIn(vs ...int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldNotIn(FieldGroupID, vs...))
}

// GroupIDGT applies the GT predicate on the "group_id" field.
func GroupIDGT(v int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldGT(FieldGroupID, v))
}

// GroupIDGTE applies the GTE predicate on the "group_id" field.
func GroupIDGTE(v int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldGTE(FieldGroupID, v))
}

// GroupIDLT applies the LT predicate on the "group_id" field.
func GroupIDLT(v int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldLT(FieldGroupID, v))
}

// GroupIDLTE applies the LTE predicate on the "group_id" field.
func GroupIDLTE(v int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldLTE(FieldGroupID, v))
}

// ProfileTypeIDEQ applies the EQ predicate on the "profile_type_id" field.
func ProfileTypeIDEQ(v int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldEQ(FieldProfileTypeID, v))
}

// ProfileTypeIDNEQ applies the NEQ predicate on the "profile_type_id" field.
func ProfileTypeIDNEQ(v int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldNEQ(FieldProfileTypeID, v))
}

// ProfileTypeIDIn applies the In predicate on the "profile_type_id" field.
func ProfileTypeIDIn(vs ...int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldIn(FieldProfileTypeID, vs...))
}

// ProfileTypeIDNotIn applies the NotIn predicate on the "profile_type_id" field.
func ProfileTypeIDNotIn(vs ...int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldNotIn(FieldProfileTypeID, vs...))
}

// ProfileTypeIDGT applies the GT predicate on the "profile_type_id" field.
func ProfileTypeIDGT(v int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldGT(FieldProfileTypeID, v))
}

// ProfileTypeIDGTE applies the GTE predicate on the "profile_type_id" field.
func ProfileTypeIDGTE(v int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldGTE(FieldProfileTypeID, v))
}

// ProfileTypeIDLT applies the LT predicate on the "profile_type_id" field.
func ProfileTypeIDLT(v int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldLT(FieldProfileTypeID, v))
}

// ProfileTypeIDLTE applies the LTE predicate on the "profile_type_id" field.
func ProfileTypeIDLTE(v int64) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldLTE(FieldProfileTypeID, v))
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v string) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldEQ(FieldCreator, v))
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v string) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldNEQ(FieldCreator, v))
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...string) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldIn(FieldCreator, vs...))
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...string) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldNotIn(FieldCreator, vs...))
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v string) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldGT(FieldCreator, v))
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v string) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldGTE(FieldCreator, v))
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v string) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldLT(FieldCreator, v))
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v string) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldLTE(FieldCreator, v))
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v string) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldContains(FieldCreator, v))
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v string) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldHasPrefix(FieldCreator, v))
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v string) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldHasSuffix(FieldCreator, v))
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v string) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldEqualFold(FieldCreator, v))
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v string) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldContainsFold(FieldCreator, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldLTE(FieldCreatedTime, v))
}

// CreatedTimeIsNil applies the IsNil predicate on the "created_time" field.
func CreatedTimeIsNil() predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldIsNull(FieldCreatedTime))
}

// CreatedTimeNotNil applies the NotNil predicate on the "created_time" field.
func CreatedTimeNotNil() predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.FieldNotNull(FieldCreatedTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GrouProfileTypeMapping) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GrouProfileTypeMapping) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GrouProfileTypeMapping) predicate.GrouProfileTypeMapping {
	return predicate.GrouProfileTypeMapping(sql.NotPredicates(p))
}
