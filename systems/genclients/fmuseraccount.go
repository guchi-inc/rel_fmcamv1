// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/fmuseraccount"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// FmUserAccount is the model entity for the FmUserAccount schema.
type FmUserAccount struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// 姓名
	Username string `json:"username"  db:"username"`
	// 登陆名
	LoginName string `json:"login_name" db:"login_name"`
	// 登陆密码
	Password string `json:"password" db:"password"`
	// 领导标记
	LeaderFlag string `json:"leader_flag"  db:"leader_flag"`
	// 职位
	Position string `json:"position"  db:"position"`
	// 所属部门
	Department string `json:"department"  db:"department"`
	// 电邮
	Email string `json:"email"  db:"email"`
	// 手机号
	Phonenum string `json:"phonenum"  db:"phonenum"`
	// 描述
	Description string `json:"description"  db:"description"`
	// 国籍民族
	Ethnicity string `json:"ethnicity"  db:"ethnicity"`
	// 性别
	Gender string `json:"gender"  db:"gender"`
	// 地区
	Local string `json:"local"  db:"local"`
	// 详细地址
	Localhost string `json:"localhost"  db:"localhost"`
	// 酒店体量
	M2Localhost string `json:"m2_localhost"  db:"m2_localhost"`
	// 是否管理
	Ismanager string `json:"ismanager"  db:"ismanager"`
	// 是否内建
	Isystem string `json:"isystem"  db:"isystem"`
	// 启用
	Enabled bool `json:"enabled" db:"enabled"`
	// 验证码登陆
	IsSms bool `json:"is_sms"  db:"is_sms"`
	// 证件号
	MemberID string `json:"member_id"  db:"member_id"`
	// 父账号id
	LeaderID string `json:"leader_id"  db:"leader_id"`
	// 最近登陆
	DeviceTime string `json:"device_time"  db:"device_time"`
	// 租户号
	TenantID uuid.UUID `json:"tenant_id"  db:"tenant_id"`
	// 删除标记
	DeleteFlag string `json:"delete_flag"  db:"delete_flag"`
	// 创建时间
	CreatedTime *time.Time `json:"created_time" db:"created_time"`
	// 更新时间
	UpdatedTime *time.Time `json:"updated_time" db:"updated_time"`
	// 删除时间
	DeletedTime  *time.Time `json:"deleted_time" db:"deleted_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FmUserAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fmuseraccount.FieldEnabled, fmuseraccount.FieldIsSms:
			values[i] = new(sql.NullBool)
		case fmuseraccount.FieldID:
			values[i] = new(sql.NullInt64)
		case fmuseraccount.FieldUsername, fmuseraccount.FieldLoginName, fmuseraccount.FieldPassword, fmuseraccount.FieldLeaderFlag, fmuseraccount.FieldPosition, fmuseraccount.FieldDepartment, fmuseraccount.FieldEmail, fmuseraccount.FieldPhonenum, fmuseraccount.FieldDescription, fmuseraccount.FieldEthnicity, fmuseraccount.FieldGender, fmuseraccount.FieldLocal, fmuseraccount.FieldLocalhost, fmuseraccount.FieldM2Localhost, fmuseraccount.FieldIsmanager, fmuseraccount.FieldIsystem, fmuseraccount.FieldMemberID, fmuseraccount.FieldLeaderID, fmuseraccount.FieldDeviceTime, fmuseraccount.FieldDeleteFlag:
			values[i] = new(sql.NullString)
		case fmuseraccount.FieldCreatedTime, fmuseraccount.FieldUpdatedTime, fmuseraccount.FieldDeletedTime:
			values[i] = new(sql.NullTime)
		case fmuseraccount.FieldTenantID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FmUserAccount fields.
func (fua *FmUserAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fmuseraccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fua.ID = int64(value.Int64)
		case fmuseraccount.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				fua.Username = value.String
			}
		case fmuseraccount.FieldLoginName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login_name", values[i])
			} else if value.Valid {
				fua.LoginName = value.String
			}
		case fmuseraccount.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				fua.Password = value.String
			}
		case fmuseraccount.FieldLeaderFlag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field leader_flag", values[i])
			} else if value.Valid {
				fua.LeaderFlag = value.String
			}
		case fmuseraccount.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				fua.Position = value.String
			}
		case fmuseraccount.FieldDepartment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field department", values[i])
			} else if value.Valid {
				fua.Department = value.String
			}
		case fmuseraccount.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				fua.Email = value.String
			}
		case fmuseraccount.FieldPhonenum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phonenum", values[i])
			} else if value.Valid {
				fua.Phonenum = value.String
			}
		case fmuseraccount.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				fua.Description = value.String
			}
		case fmuseraccount.FieldEthnicity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ethnicity", values[i])
			} else if value.Valid {
				fua.Ethnicity = value.String
			}
		case fmuseraccount.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				fua.Gender = value.String
			}
		case fmuseraccount.FieldLocal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local", values[i])
			} else if value.Valid {
				fua.Local = value.String
			}
		case fmuseraccount.FieldLocalhost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field localhost", values[i])
			} else if value.Valid {
				fua.Localhost = value.String
			}
		case fmuseraccount.FieldM2Localhost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field m2_localhost", values[i])
			} else if value.Valid {
				fua.M2Localhost = value.String
			}
		case fmuseraccount.FieldIsmanager:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ismanager", values[i])
			} else if value.Valid {
				fua.Ismanager = value.String
			}
		case fmuseraccount.FieldIsystem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isystem", values[i])
			} else if value.Valid {
				fua.Isystem = value.String
			}
		case fmuseraccount.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				fua.Enabled = value.Bool
			}
		case fmuseraccount.FieldIsSms:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_sms", values[i])
			} else if value.Valid {
				fua.IsSms = value.Bool
			}
		case fmuseraccount.FieldMemberID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				fua.MemberID = value.String
			}
		case fmuseraccount.FieldLeaderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field leader_id", values[i])
			} else if value.Valid {
				fua.LeaderID = value.String
			}
		case fmuseraccount.FieldDeviceTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_time", values[i])
			} else if value.Valid {
				fua.DeviceTime = value.String
			}
		case fmuseraccount.FieldTenantID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				fua.TenantID = *value
			}
		case fmuseraccount.FieldDeleteFlag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delete_flag", values[i])
			} else if value.Valid {
				fua.DeleteFlag = value.String
			}
		case fmuseraccount.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				fua.CreatedTime = new(time.Time)
				*fua.CreatedTime = value.Time
			}
		case fmuseraccount.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				fua.UpdatedTime = new(time.Time)
				*fua.UpdatedTime = value.Time
			}
		case fmuseraccount.FieldDeletedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_time", values[i])
			} else if value.Valid {
				fua.DeletedTime = new(time.Time)
				*fua.DeletedTime = value.Time
			}
		default:
			fua.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FmUserAccount.
// This includes values selected through modifiers, order, etc.
func (fua *FmUserAccount) Value(name string) (ent.Value, error) {
	return fua.selectValues.Get(name)
}

// Update returns a builder for updating this FmUserAccount.
// Note that you need to call FmUserAccount.Unwrap() before calling this method if this FmUserAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (fua *FmUserAccount) Update() *FmUserAccountUpdateOne {
	return NewFmUserAccountClient(fua.config).UpdateOne(fua)
}

// Unwrap unwraps the FmUserAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fua *FmUserAccount) Unwrap() *FmUserAccount {
	_tx, ok := fua.config.driver.(*txDriver)
	if !ok {
		panic("genclients: FmUserAccount is not a transactional entity")
	}
	fua.config.driver = _tx.drv
	return fua
}

// String implements the fmt.Stringer.
func (fua *FmUserAccount) String() string {
	var builder strings.Builder
	builder.WriteString("FmUserAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fua.ID))
	builder.WriteString("username=")
	builder.WriteString(fua.Username)
	builder.WriteString(", ")
	builder.WriteString("login_name=")
	builder.WriteString(fua.LoginName)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(fua.Password)
	builder.WriteString(", ")
	builder.WriteString("leader_flag=")
	builder.WriteString(fua.LeaderFlag)
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(fua.Position)
	builder.WriteString(", ")
	builder.WriteString("department=")
	builder.WriteString(fua.Department)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(fua.Email)
	builder.WriteString(", ")
	builder.WriteString("phonenum=")
	builder.WriteString(fua.Phonenum)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fua.Description)
	builder.WriteString(", ")
	builder.WriteString("ethnicity=")
	builder.WriteString(fua.Ethnicity)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fua.Gender)
	builder.WriteString(", ")
	builder.WriteString("local=")
	builder.WriteString(fua.Local)
	builder.WriteString(", ")
	builder.WriteString("localhost=")
	builder.WriteString(fua.Localhost)
	builder.WriteString(", ")
	builder.WriteString("m2_localhost=")
	builder.WriteString(fua.M2Localhost)
	builder.WriteString(", ")
	builder.WriteString("ismanager=")
	builder.WriteString(fua.Ismanager)
	builder.WriteString(", ")
	builder.WriteString("isystem=")
	builder.WriteString(fua.Isystem)
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", fua.Enabled))
	builder.WriteString(", ")
	builder.WriteString("is_sms=")
	builder.WriteString(fmt.Sprintf("%v", fua.IsSms))
	builder.WriteString(", ")
	builder.WriteString("member_id=")
	builder.WriteString(fua.MemberID)
	builder.WriteString(", ")
	builder.WriteString("leader_id=")
	builder.WriteString(fua.LeaderID)
	builder.WriteString(", ")
	builder.WriteString("device_time=")
	builder.WriteString(fua.DeviceTime)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", fua.TenantID))
	builder.WriteString(", ")
	builder.WriteString("delete_flag=")
	builder.WriteString(fua.DeleteFlag)
	builder.WriteString(", ")
	if v := fua.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := fua.UpdatedTime; v != nil {
		builder.WriteString("updated_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := fua.DeletedTime; v != nil {
		builder.WriteString("deleted_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// FmUserAccounts is a parsable slice of FmUserAccount.
type FmUserAccounts []*FmUserAccount
