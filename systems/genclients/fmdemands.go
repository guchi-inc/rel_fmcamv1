// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/fmdemands"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FmDemands is the model entity for the FmDemands schema.
type FmDemands struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// 公司名
	Supplier *string `json:"supplier"  db:"supplier"`
	// 姓名
	Username *string `json:"username"  db:"username"`
	// 联系电话
	Phonenum *string `json:"phonenum"  db:"phonenum"`
	// 联系电邮
	Email *string `json:"email"  db:"email"`
	// 省份
	Province *string `json:"province"  db:"province"`
	// 城市
	City *string `json:"city"  db:"city"`
	// 区县
	Area *string `json:"area"  db:"area"`
	// 街道
	Street *string `json:"street"  db:"street"`
	// 留言
	Message *string `json:"message"  db:"message"`
	// 操作人
	Creator *string `json:"creator"  db:"creator"`
	// 创建时间
	CreatedTime  *time.Time `json:"created_time" db:"created_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FmDemands) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fmdemands.FieldID:
			values[i] = new(sql.NullInt64)
		case fmdemands.FieldSupplier, fmdemands.FieldUsername, fmdemands.FieldPhonenum, fmdemands.FieldEmail, fmdemands.FieldProvince, fmdemands.FieldCity, fmdemands.FieldArea, fmdemands.FieldStreet, fmdemands.FieldMessage, fmdemands.FieldCreator:
			values[i] = new(sql.NullString)
		case fmdemands.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FmDemands fields.
func (fd *FmDemands) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fmdemands.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fd.ID = int64(value.Int64)
		case fmdemands.FieldSupplier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supplier", values[i])
			} else if value.Valid {
				fd.Supplier = new(string)
				*fd.Supplier = value.String
			}
		case fmdemands.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				fd.Username = new(string)
				*fd.Username = value.String
			}
		case fmdemands.FieldPhonenum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phonenum", values[i])
			} else if value.Valid {
				fd.Phonenum = new(string)
				*fd.Phonenum = value.String
			}
		case fmdemands.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				fd.Email = new(string)
				*fd.Email = value.String
			}
		case fmdemands.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[i])
			} else if value.Valid {
				fd.Province = new(string)
				*fd.Province = value.String
			}
		case fmdemands.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				fd.City = new(string)
				*fd.City = value.String
			}
		case fmdemands.FieldArea:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field area", values[i])
			} else if value.Valid {
				fd.Area = new(string)
				*fd.Area = value.String
			}
		case fmdemands.FieldStreet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street", values[i])
			} else if value.Valid {
				fd.Street = new(string)
				*fd.Street = value.String
			}
		case fmdemands.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				fd.Message = new(string)
				*fd.Message = value.String
			}
		case fmdemands.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				fd.Creator = new(string)
				*fd.Creator = value.String
			}
		case fmdemands.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				fd.CreatedTime = new(time.Time)
				*fd.CreatedTime = value.Time
			}
		default:
			fd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FmDemands.
// This includes values selected through modifiers, order, etc.
func (fd *FmDemands) Value(name string) (ent.Value, error) {
	return fd.selectValues.Get(name)
}

// Update returns a builder for updating this FmDemands.
// Note that you need to call FmDemands.Unwrap() before calling this method if this FmDemands
// was returned from a transaction, and the transaction was committed or rolled back.
func (fd *FmDemands) Update() *FmDemandsUpdateOne {
	return NewFmDemandsClient(fd.config).UpdateOne(fd)
}

// Unwrap unwraps the FmDemands entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fd *FmDemands) Unwrap() *FmDemands {
	_tx, ok := fd.config.driver.(*txDriver)
	if !ok {
		panic("genclients: FmDemands is not a transactional entity")
	}
	fd.config.driver = _tx.drv
	return fd
}

// String implements the fmt.Stringer.
func (fd *FmDemands) String() string {
	var builder strings.Builder
	builder.WriteString("FmDemands(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fd.ID))
	if v := fd.Supplier; v != nil {
		builder.WriteString("supplier=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fd.Username; v != nil {
		builder.WriteString("username=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fd.Phonenum; v != nil {
		builder.WriteString("phonenum=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fd.Email; v != nil {
		builder.WriteString("email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fd.Province; v != nil {
		builder.WriteString("province=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fd.City; v != nil {
		builder.WriteString("city=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fd.Area; v != nil {
		builder.WriteString("area=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fd.Street; v != nil {
		builder.WriteString("street=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fd.Message; v != nil {
		builder.WriteString("message=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fd.Creator; v != nil {
		builder.WriteString("creator=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fd.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// FmDemandsSlice is a parsable slice of FmDemands.
type FmDemandsSlice []*FmDemands
