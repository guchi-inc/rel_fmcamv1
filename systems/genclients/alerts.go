// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/alerts"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Alerts is the model entity for the Alerts schema.
type Alerts struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// 租户号
	TenantID uuid.UUID `json:"tenant_id"  db:"tenant_id"`
	// 抓拍记录 ID
	CaptureLogID int64 `json:"capture_log_id" db:"capture_log_id"`
	// 设备 ID
	DeviceID int64 `json:"device_id" db:"device_id"`
	// 预警等级: 1=一级预警, 2=二级预警, 3=三级预警, 4=四级预警
	AlertLevel int8 `json:"alert_level" db:"alert_level"`
	// 处理状态: 0=未处理, 1=已处理, 2=已忽略
	Status int8 `json:"status" db:"status"`
	// 处理人ID
	FmUserID int64 `json:"fm_user_id" db:"fm_user_id"`
	// 开始处理的时间
	HandledTime *time.Time `json:"handled_time" db:"handled_time"`
	// 处理意见或备注
	Remarks string `json:"remarks,omitempty" db:"remarks"`
	// 预警产生时间
	CreatedTime  *time.Time `json:"created_time" db:"created_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Alerts) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case alerts.FieldID, alerts.FieldCaptureLogID, alerts.FieldDeviceID, alerts.FieldAlertLevel, alerts.FieldStatus, alerts.FieldFmUserID:
			values[i] = new(sql.NullInt64)
		case alerts.FieldRemarks:
			values[i] = new(sql.NullString)
		case alerts.FieldHandledTime, alerts.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		case alerts.FieldTenantID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Alerts fields.
func (a *Alerts) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case alerts.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int64(value.Int64)
		case alerts.FieldTenantID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				a.TenantID = *value
			}
		case alerts.FieldCaptureLogID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field capture_log_id", values[i])
			} else if value.Valid {
				a.CaptureLogID = value.Int64
			}
		case alerts.FieldDeviceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				a.DeviceID = value.Int64
			}
		case alerts.FieldAlertLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field alert_level", values[i])
			} else if value.Valid {
				a.AlertLevel = int8(value.Int64)
			}
		case alerts.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = int8(value.Int64)
			}
		case alerts.FieldFmUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fm_user_id", values[i])
			} else if value.Valid {
				a.FmUserID = value.Int64
			}
		case alerts.FieldHandledTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field handled_time", values[i])
			} else if value.Valid {
				a.HandledTime = new(time.Time)
				*a.HandledTime = value.Time
			}
		case alerts.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				a.Remarks = value.String
			}
		case alerts.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				a.CreatedTime = new(time.Time)
				*a.CreatedTime = value.Time
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Alerts.
// This includes values selected through modifiers, order, etc.
func (a *Alerts) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Alerts.
// Note that you need to call Alerts.Unwrap() before calling this method if this Alerts
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Alerts) Update() *AlertsUpdateOne {
	return NewAlertsClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Alerts entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Alerts) Unwrap() *Alerts {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("genclients: Alerts is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Alerts) String() string {
	var builder strings.Builder
	builder.WriteString("Alerts(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", a.TenantID))
	builder.WriteString(", ")
	builder.WriteString("capture_log_id=")
	builder.WriteString(fmt.Sprintf("%v", a.CaptureLogID))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(fmt.Sprintf("%v", a.DeviceID))
	builder.WriteString(", ")
	builder.WriteString("alert_level=")
	builder.WriteString(fmt.Sprintf("%v", a.AlertLevel))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", ")
	builder.WriteString("fm_user_id=")
	builder.WriteString(fmt.Sprintf("%v", a.FmUserID))
	builder.WriteString(", ")
	if v := a.HandledTime; v != nil {
		builder.WriteString("handled_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(a.Remarks)
	builder.WriteString(", ")
	if v := a.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// AlertsSlice is a parsable slice of Alerts.
type AlertsSlice []*Alerts
