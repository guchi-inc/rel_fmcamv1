// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/govarea"
	"fmcam/systems/genclients/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GovAreaUpdate is the builder for updating GovArea entities.
type GovAreaUpdate struct {
	config
	hooks    []Hook
	mutation *GovAreaMutation
}

// Where appends a list predicates to the GovAreaUpdate builder.
func (gau *GovAreaUpdate) Where(ps ...predicate.GovArea) *GovAreaUpdate {
	gau.mutation.Where(ps...)
	return gau
}

// SetCode sets the "code" field.
func (gau *GovAreaUpdate) SetCode(s string) *GovAreaUpdate {
	gau.mutation.SetCode(s)
	return gau
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (gau *GovAreaUpdate) SetNillableCode(s *string) *GovAreaUpdate {
	if s != nil {
		gau.SetCode(*s)
	}
	return gau
}

// SetName sets the "name" field.
func (gau *GovAreaUpdate) SetName(s string) *GovAreaUpdate {
	gau.mutation.SetName(s)
	return gau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gau *GovAreaUpdate) SetNillableName(s *string) *GovAreaUpdate {
	if s != nil {
		gau.SetName(*s)
	}
	return gau
}

// SetProvinceCode sets the "province_code" field.
func (gau *GovAreaUpdate) SetProvinceCode(s string) *GovAreaUpdate {
	gau.mutation.SetProvinceCode(s)
	return gau
}

// SetNillableProvinceCode sets the "province_code" field if the given value is not nil.
func (gau *GovAreaUpdate) SetNillableProvinceCode(s *string) *GovAreaUpdate {
	if s != nil {
		gau.SetProvinceCode(*s)
	}
	return gau
}

// SetCityCode sets the "city_code" field.
func (gau *GovAreaUpdate) SetCityCode(s string) *GovAreaUpdate {
	gau.mutation.SetCityCode(s)
	return gau
}

// SetNillableCityCode sets the "city_code" field if the given value is not nil.
func (gau *GovAreaUpdate) SetNillableCityCode(s *string) *GovAreaUpdate {
	if s != nil {
		gau.SetCityCode(*s)
	}
	return gau
}

// SetCreator sets the "creator" field.
func (gau *GovAreaUpdate) SetCreator(s string) *GovAreaUpdate {
	gau.mutation.SetCreator(s)
	return gau
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (gau *GovAreaUpdate) SetNillableCreator(s *string) *GovAreaUpdate {
	if s != nil {
		gau.SetCreator(*s)
	}
	return gau
}

// SetDeleteFlag sets the "delete_flag" field.
func (gau *GovAreaUpdate) SetDeleteFlag(s string) *GovAreaUpdate {
	gau.mutation.SetDeleteFlag(s)
	return gau
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (gau *GovAreaUpdate) SetNillableDeleteFlag(s *string) *GovAreaUpdate {
	if s != nil {
		gau.SetDeleteFlag(*s)
	}
	return gau
}

// SetCreatedTime sets the "created_time" field.
func (gau *GovAreaUpdate) SetCreatedTime(t time.Time) *GovAreaUpdate {
	gau.mutation.SetCreatedTime(t)
	return gau
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (gau *GovAreaUpdate) SetNillableCreatedTime(t *time.Time) *GovAreaUpdate {
	if t != nil {
		gau.SetCreatedTime(*t)
	}
	return gau
}

// ClearCreatedTime clears the value of the "created_time" field.
func (gau *GovAreaUpdate) ClearCreatedTime() *GovAreaUpdate {
	gau.mutation.ClearCreatedTime()
	return gau
}

// Mutation returns the GovAreaMutation object of the builder.
func (gau *GovAreaUpdate) Mutation() *GovAreaMutation {
	return gau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gau *GovAreaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gau.sqlSave, gau.mutation, gau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gau *GovAreaUpdate) SaveX(ctx context.Context) int {
	affected, err := gau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gau *GovAreaUpdate) Exec(ctx context.Context) error {
	_, err := gau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gau *GovAreaUpdate) ExecX(ctx context.Context) {
	if err := gau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gau *GovAreaUpdate) check() error {
	if v, ok := gau.mutation.Code(); ok {
		if err := govarea.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`genclients: validator failed for field "GovArea.code": %w`, err)}
		}
	}
	if v, ok := gau.mutation.Name(); ok {
		if err := govarea.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "GovArea.name": %w`, err)}
		}
	}
	if v, ok := gau.mutation.ProvinceCode(); ok {
		if err := govarea.ProvinceCodeValidator(v); err != nil {
			return &ValidationError{Name: "province_code", err: fmt.Errorf(`genclients: validator failed for field "GovArea.province_code": %w`, err)}
		}
	}
	if v, ok := gau.mutation.CityCode(); ok {
		if err := govarea.CityCodeValidator(v); err != nil {
			return &ValidationError{Name: "city_code", err: fmt.Errorf(`genclients: validator failed for field "GovArea.city_code": %w`, err)}
		}
	}
	if v, ok := gau.mutation.Creator(); ok {
		if err := govarea.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "GovArea.creator": %w`, err)}
		}
	}
	if v, ok := gau.mutation.DeleteFlag(); ok {
		if err := govarea.DeleteFlagValidator(v); err != nil {
			return &ValidationError{Name: "delete_flag", err: fmt.Errorf(`genclients: validator failed for field "GovArea.delete_flag": %w`, err)}
		}
	}
	return nil
}

func (gau *GovAreaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(govarea.Table, govarea.Columns, sqlgraph.NewFieldSpec(govarea.FieldID, field.TypeInt64))
	if ps := gau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gau.mutation.Code(); ok {
		_spec.SetField(govarea.FieldCode, field.TypeString, value)
	}
	if value, ok := gau.mutation.Name(); ok {
		_spec.SetField(govarea.FieldName, field.TypeString, value)
	}
	if value, ok := gau.mutation.ProvinceCode(); ok {
		_spec.SetField(govarea.FieldProvinceCode, field.TypeString, value)
	}
	if value, ok := gau.mutation.CityCode(); ok {
		_spec.SetField(govarea.FieldCityCode, field.TypeString, value)
	}
	if value, ok := gau.mutation.Creator(); ok {
		_spec.SetField(govarea.FieldCreator, field.TypeString, value)
	}
	if value, ok := gau.mutation.DeleteFlag(); ok {
		_spec.SetField(govarea.FieldDeleteFlag, field.TypeString, value)
	}
	if value, ok := gau.mutation.CreatedTime(); ok {
		_spec.SetField(govarea.FieldCreatedTime, field.TypeTime, value)
	}
	if gau.mutation.CreatedTimeCleared() {
		_spec.ClearField(govarea.FieldCreatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{govarea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gau.mutation.done = true
	return n, nil
}

// GovAreaUpdateOne is the builder for updating a single GovArea entity.
type GovAreaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GovAreaMutation
}

// SetCode sets the "code" field.
func (gauo *GovAreaUpdateOne) SetCode(s string) *GovAreaUpdateOne {
	gauo.mutation.SetCode(s)
	return gauo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (gauo *GovAreaUpdateOne) SetNillableCode(s *string) *GovAreaUpdateOne {
	if s != nil {
		gauo.SetCode(*s)
	}
	return gauo
}

// SetName sets the "name" field.
func (gauo *GovAreaUpdateOne) SetName(s string) *GovAreaUpdateOne {
	gauo.mutation.SetName(s)
	return gauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gauo *GovAreaUpdateOne) SetNillableName(s *string) *GovAreaUpdateOne {
	if s != nil {
		gauo.SetName(*s)
	}
	return gauo
}

// SetProvinceCode sets the "province_code" field.
func (gauo *GovAreaUpdateOne) SetProvinceCode(s string) *GovAreaUpdateOne {
	gauo.mutation.SetProvinceCode(s)
	return gauo
}

// SetNillableProvinceCode sets the "province_code" field if the given value is not nil.
func (gauo *GovAreaUpdateOne) SetNillableProvinceCode(s *string) *GovAreaUpdateOne {
	if s != nil {
		gauo.SetProvinceCode(*s)
	}
	return gauo
}

// SetCityCode sets the "city_code" field.
func (gauo *GovAreaUpdateOne) SetCityCode(s string) *GovAreaUpdateOne {
	gauo.mutation.SetCityCode(s)
	return gauo
}

// SetNillableCityCode sets the "city_code" field if the given value is not nil.
func (gauo *GovAreaUpdateOne) SetNillableCityCode(s *string) *GovAreaUpdateOne {
	if s != nil {
		gauo.SetCityCode(*s)
	}
	return gauo
}

// SetCreator sets the "creator" field.
func (gauo *GovAreaUpdateOne) SetCreator(s string) *GovAreaUpdateOne {
	gauo.mutation.SetCreator(s)
	return gauo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (gauo *GovAreaUpdateOne) SetNillableCreator(s *string) *GovAreaUpdateOne {
	if s != nil {
		gauo.SetCreator(*s)
	}
	return gauo
}

// SetDeleteFlag sets the "delete_flag" field.
func (gauo *GovAreaUpdateOne) SetDeleteFlag(s string) *GovAreaUpdateOne {
	gauo.mutation.SetDeleteFlag(s)
	return gauo
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (gauo *GovAreaUpdateOne) SetNillableDeleteFlag(s *string) *GovAreaUpdateOne {
	if s != nil {
		gauo.SetDeleteFlag(*s)
	}
	return gauo
}

// SetCreatedTime sets the "created_time" field.
func (gauo *GovAreaUpdateOne) SetCreatedTime(t time.Time) *GovAreaUpdateOne {
	gauo.mutation.SetCreatedTime(t)
	return gauo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (gauo *GovAreaUpdateOne) SetNillableCreatedTime(t *time.Time) *GovAreaUpdateOne {
	if t != nil {
		gauo.SetCreatedTime(*t)
	}
	return gauo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (gauo *GovAreaUpdateOne) ClearCreatedTime() *GovAreaUpdateOne {
	gauo.mutation.ClearCreatedTime()
	return gauo
}

// Mutation returns the GovAreaMutation object of the builder.
func (gauo *GovAreaUpdateOne) Mutation() *GovAreaMutation {
	return gauo.mutation
}

// Where appends a list predicates to the GovAreaUpdate builder.
func (gauo *GovAreaUpdateOne) Where(ps ...predicate.GovArea) *GovAreaUpdateOne {
	gauo.mutation.Where(ps...)
	return gauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gauo *GovAreaUpdateOne) Select(field string, fields ...string) *GovAreaUpdateOne {
	gauo.fields = append([]string{field}, fields...)
	return gauo
}

// Save executes the query and returns the updated GovArea entity.
func (gauo *GovAreaUpdateOne) Save(ctx context.Context) (*GovArea, error) {
	return withHooks(ctx, gauo.sqlSave, gauo.mutation, gauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gauo *GovAreaUpdateOne) SaveX(ctx context.Context) *GovArea {
	node, err := gauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gauo *GovAreaUpdateOne) Exec(ctx context.Context) error {
	_, err := gauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gauo *GovAreaUpdateOne) ExecX(ctx context.Context) {
	if err := gauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gauo *GovAreaUpdateOne) check() error {
	if v, ok := gauo.mutation.Code(); ok {
		if err := govarea.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`genclients: validator failed for field "GovArea.code": %w`, err)}
		}
	}
	if v, ok := gauo.mutation.Name(); ok {
		if err := govarea.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "GovArea.name": %w`, err)}
		}
	}
	if v, ok := gauo.mutation.ProvinceCode(); ok {
		if err := govarea.ProvinceCodeValidator(v); err != nil {
			return &ValidationError{Name: "province_code", err: fmt.Errorf(`genclients: validator failed for field "GovArea.province_code": %w`, err)}
		}
	}
	if v, ok := gauo.mutation.CityCode(); ok {
		if err := govarea.CityCodeValidator(v); err != nil {
			return &ValidationError{Name: "city_code", err: fmt.Errorf(`genclients: validator failed for field "GovArea.city_code": %w`, err)}
		}
	}
	if v, ok := gauo.mutation.Creator(); ok {
		if err := govarea.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "GovArea.creator": %w`, err)}
		}
	}
	if v, ok := gauo.mutation.DeleteFlag(); ok {
		if err := govarea.DeleteFlagValidator(v); err != nil {
			return &ValidationError{Name: "delete_flag", err: fmt.Errorf(`genclients: validator failed for field "GovArea.delete_flag": %w`, err)}
		}
	}
	return nil
}

func (gauo *GovAreaUpdateOne) sqlSave(ctx context.Context) (_node *GovArea, err error) {
	if err := gauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(govarea.Table, govarea.Columns, sqlgraph.NewFieldSpec(govarea.FieldID, field.TypeInt64))
	id, ok := gauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "GovArea.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, govarea.FieldID)
		for _, f := range fields {
			if !govarea.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != govarea.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gauo.mutation.Code(); ok {
		_spec.SetField(govarea.FieldCode, field.TypeString, value)
	}
	if value, ok := gauo.mutation.Name(); ok {
		_spec.SetField(govarea.FieldName, field.TypeString, value)
	}
	if value, ok := gauo.mutation.ProvinceCode(); ok {
		_spec.SetField(govarea.FieldProvinceCode, field.TypeString, value)
	}
	if value, ok := gauo.mutation.CityCode(); ok {
		_spec.SetField(govarea.FieldCityCode, field.TypeString, value)
	}
	if value, ok := gauo.mutation.Creator(); ok {
		_spec.SetField(govarea.FieldCreator, field.TypeString, value)
	}
	if value, ok := gauo.mutation.DeleteFlag(); ok {
		_spec.SetField(govarea.FieldDeleteFlag, field.TypeString, value)
	}
	if value, ok := gauo.mutation.CreatedTime(); ok {
		_spec.SetField(govarea.FieldCreatedTime, field.TypeTime, value)
	}
	if gauo.mutation.CreatedTimeCleared() {
		_spec.ClearField(govarea.FieldCreatedTime, field.TypeTime)
	}
	_node = &GovArea{config: gauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{govarea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gauo.mutation.done = true
	return _node, nil
}
