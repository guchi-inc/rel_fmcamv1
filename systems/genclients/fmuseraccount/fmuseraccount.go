// Code generated by ent, DO NOT EDIT.

package fmuseraccount

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the fmuseraccount type in the database.
	Label = "fm_user_account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldLoginName holds the string denoting the login_name field in the database.
	FieldLoginName = "login_name"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldLeaderFlag holds the string denoting the leader_flag field in the database.
	FieldLeaderFlag = "leader_flag"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldDepartment holds the string denoting the department field in the database.
	FieldDepartment = "department"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhonenum holds the string denoting the phonenum field in the database.
	FieldPhonenum = "phonenum"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldEthnicity holds the string denoting the ethnicity field in the database.
	FieldEthnicity = "ethnicity"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldLocal holds the string denoting the local field in the database.
	FieldLocal = "local"
	// FieldLocalhost holds the string denoting the localhost field in the database.
	FieldLocalhost = "localhost"
	// FieldM2Localhost holds the string denoting the m2_localhost field in the database.
	FieldM2Localhost = "m2_localhost"
	// FieldIsmanager holds the string denoting the ismanager field in the database.
	FieldIsmanager = "ismanager"
	// FieldIsystem holds the string denoting the isystem field in the database.
	FieldIsystem = "isystem"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldIsSms holds the string denoting the is_sms field in the database.
	FieldIsSms = "is_sms"
	// FieldMemberID holds the string denoting the member_id field in the database.
	FieldMemberID = "member_id"
	// FieldLeaderID holds the string denoting the leader_id field in the database.
	FieldLeaderID = "leader_id"
	// FieldDeviceTime holds the string denoting the device_time field in the database.
	FieldDeviceTime = "device_time"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldDeleteFlag holds the string denoting the delete_flag field in the database.
	FieldDeleteFlag = "delete_flag"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// FieldDeletedTime holds the string denoting the deleted_time field in the database.
	FieldDeletedTime = "deleted_time"
	// Table holds the table name of the fmuseraccount in the database.
	Table = "fm_user"
)

// Columns holds all SQL columns for fmuseraccount fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldLoginName,
	FieldPassword,
	FieldLeaderFlag,
	FieldPosition,
	FieldDepartment,
	FieldEmail,
	FieldPhonenum,
	FieldDescription,
	FieldEthnicity,
	FieldGender,
	FieldLocal,
	FieldLocalhost,
	FieldM2Localhost,
	FieldIsmanager,
	FieldIsystem,
	FieldEnabled,
	FieldIsSms,
	FieldMemberID,
	FieldLeaderID,
	FieldDeviceTime,
	FieldTenantID,
	FieldDeleteFlag,
	FieldCreatedTime,
	FieldUpdatedTime,
	FieldDeletedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// DefaultLoginName holds the default value on creation for the "login_name" field.
	DefaultLoginName string
	// LoginNameValidator is a validator for the "login_name" field. It is called by the builders before save.
	LoginNameValidator func(string) error
	// DefaultPassword holds the default value on creation for the "password" field.
	DefaultPassword string
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// UpdateDefaultUpdatedTime holds the default value on update for the "updated_time" field.
	UpdateDefaultUpdatedTime func() time.Time
)

// OrderOption defines the ordering options for the FmUserAccount queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByLoginName orders the results by the login_name field.
func ByLoginName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginName, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByLeaderFlag orders the results by the leader_flag field.
func ByLeaderFlag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLeaderFlag, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByDepartment orders the results by the department field.
func ByDepartment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartment, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhonenum orders the results by the phonenum field.
func ByPhonenum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhonenum, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByEthnicity orders the results by the ethnicity field.
func ByEthnicity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEthnicity, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByLocal orders the results by the local field.
func ByLocal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocal, opts...).ToFunc()
}

// ByLocalhost orders the results by the localhost field.
func ByLocalhost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalhost, opts...).ToFunc()
}

// ByM2Localhost orders the results by the m2_localhost field.
func ByM2Localhost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldM2Localhost, opts...).ToFunc()
}

// ByIsmanager orders the results by the ismanager field.
func ByIsmanager(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsmanager, opts...).ToFunc()
}

// ByIsystem orders the results by the isystem field.
func ByIsystem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsystem, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByIsSms orders the results by the is_sms field.
func ByIsSms(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSms, opts...).ToFunc()
}

// ByMemberID orders the results by the member_id field.
func ByMemberID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemberID, opts...).ToFunc()
}

// ByLeaderID orders the results by the leader_id field.
func ByLeaderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLeaderID, opts...).ToFunc()
}

// ByDeviceTime orders the results by the device_time field.
func ByDeviceTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceTime, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByDeleteFlag orders the results by the delete_flag field.
func ByDeleteFlag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteFlag, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}

// ByDeletedTime orders the results by the deleted_time field.
func ByDeletedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedTime, opts...).ToFunc()
}
