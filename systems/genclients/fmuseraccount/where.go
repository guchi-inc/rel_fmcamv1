// Code generated by ent, DO NOT EDIT.

package fmuseraccount

import (
	"fmcam/systems/genclients/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldUsername, v))
}

// LoginName applies equality check predicate on the "login_name" field. It's identical to LoginNameEQ.
func LoginName(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldLoginName, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldPassword, v))
}

// LeaderFlag applies equality check predicate on the "leader_flag" field. It's identical to LeaderFlagEQ.
func LeaderFlag(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldLeaderFlag, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldPosition, v))
}

// Department applies equality check predicate on the "department" field. It's identical to DepartmentEQ.
func Department(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldDepartment, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldEmail, v))
}

// Phonenum applies equality check predicate on the "phonenum" field. It's identical to PhonenumEQ.
func Phonenum(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldPhonenum, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldDescription, v))
}

// Ethnicity applies equality check predicate on the "ethnicity" field. It's identical to EthnicityEQ.
func Ethnicity(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldEthnicity, v))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldGender, v))
}

// Local applies equality check predicate on the "local" field. It's identical to LocalEQ.
func Local(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldLocal, v))
}

// Localhost applies equality check predicate on the "localhost" field. It's identical to LocalhostEQ.
func Localhost(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldLocalhost, v))
}

// M2Localhost applies equality check predicate on the "m2_localhost" field. It's identical to M2LocalhostEQ.
func M2Localhost(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldM2Localhost, v))
}

// Ismanager applies equality check predicate on the "ismanager" field. It's identical to IsmanagerEQ.
func Ismanager(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldIsmanager, v))
}

// Isystem applies equality check predicate on the "isystem" field. It's identical to IsystemEQ.
func Isystem(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldIsystem, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldEnabled, v))
}

// IsSms applies equality check predicate on the "is_sms" field. It's identical to IsSmsEQ.
func IsSms(v bool) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldIsSms, v))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldMemberID, v))
}

// LeaderID applies equality check predicate on the "leader_id" field. It's identical to LeaderIDEQ.
func LeaderID(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldLeaderID, v))
}

// DeviceTime applies equality check predicate on the "device_time" field. It's identical to DeviceTimeEQ.
func DeviceTime(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldDeviceTime, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v uuid.UUID) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldTenantID, v))
}

// DeleteFlag applies equality check predicate on the "delete_flag" field. It's identical to DeleteFlagEQ.
func DeleteFlag(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldDeleteFlag, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldCreatedTime, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldUpdatedTime, v))
}

// DeletedTime applies equality check predicate on the "deleted_time" field. It's identical to DeletedTimeEQ.
func DeletedTime(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldDeletedTime, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldUsername, v))
}

// LoginNameEQ applies the EQ predicate on the "login_name" field.
func LoginNameEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldLoginName, v))
}

// LoginNameNEQ applies the NEQ predicate on the "login_name" field.
func LoginNameNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldLoginName, v))
}

// LoginNameIn applies the In predicate on the "login_name" field.
func LoginNameIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldLoginName, vs...))
}

// LoginNameNotIn applies the NotIn predicate on the "login_name" field.
func LoginNameNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldLoginName, vs...))
}

// LoginNameGT applies the GT predicate on the "login_name" field.
func LoginNameGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldLoginName, v))
}

// LoginNameGTE applies the GTE predicate on the "login_name" field.
func LoginNameGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldLoginName, v))
}

// LoginNameLT applies the LT predicate on the "login_name" field.
func LoginNameLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldLoginName, v))
}

// LoginNameLTE applies the LTE predicate on the "login_name" field.
func LoginNameLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldLoginName, v))
}

// LoginNameContains applies the Contains predicate on the "login_name" field.
func LoginNameContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldLoginName, v))
}

// LoginNameHasPrefix applies the HasPrefix predicate on the "login_name" field.
func LoginNameHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldLoginName, v))
}

// LoginNameHasSuffix applies the HasSuffix predicate on the "login_name" field.
func LoginNameHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldLoginName, v))
}

// LoginNameEqualFold applies the EqualFold predicate on the "login_name" field.
func LoginNameEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldLoginName, v))
}

// LoginNameContainsFold applies the ContainsFold predicate on the "login_name" field.
func LoginNameContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldLoginName, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldPassword, v))
}

// LeaderFlagEQ applies the EQ predicate on the "leader_flag" field.
func LeaderFlagEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldLeaderFlag, v))
}

// LeaderFlagNEQ applies the NEQ predicate on the "leader_flag" field.
func LeaderFlagNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldLeaderFlag, v))
}

// LeaderFlagIn applies the In predicate on the "leader_flag" field.
func LeaderFlagIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldLeaderFlag, vs...))
}

// LeaderFlagNotIn applies the NotIn predicate on the "leader_flag" field.
func LeaderFlagNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldLeaderFlag, vs...))
}

// LeaderFlagGT applies the GT predicate on the "leader_flag" field.
func LeaderFlagGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldLeaderFlag, v))
}

// LeaderFlagGTE applies the GTE predicate on the "leader_flag" field.
func LeaderFlagGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldLeaderFlag, v))
}

// LeaderFlagLT applies the LT predicate on the "leader_flag" field.
func LeaderFlagLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldLeaderFlag, v))
}

// LeaderFlagLTE applies the LTE predicate on the "leader_flag" field.
func LeaderFlagLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldLeaderFlag, v))
}

// LeaderFlagContains applies the Contains predicate on the "leader_flag" field.
func LeaderFlagContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldLeaderFlag, v))
}

// LeaderFlagHasPrefix applies the HasPrefix predicate on the "leader_flag" field.
func LeaderFlagHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldLeaderFlag, v))
}

// LeaderFlagHasSuffix applies the HasSuffix predicate on the "leader_flag" field.
func LeaderFlagHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldLeaderFlag, v))
}

// LeaderFlagIsNil applies the IsNil predicate on the "leader_flag" field.
func LeaderFlagIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldLeaderFlag))
}

// LeaderFlagNotNil applies the NotNil predicate on the "leader_flag" field.
func LeaderFlagNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldLeaderFlag))
}

// LeaderFlagEqualFold applies the EqualFold predicate on the "leader_flag" field.
func LeaderFlagEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldLeaderFlag, v))
}

// LeaderFlagContainsFold applies the ContainsFold predicate on the "leader_flag" field.
func LeaderFlagContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldLeaderFlag, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldPosition, v))
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldPosition, v))
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldPosition, v))
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldPosition, v))
}

// PositionIsNil applies the IsNil predicate on the "position" field.
func PositionIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldPosition))
}

// PositionNotNil applies the NotNil predicate on the "position" field.
func PositionNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldPosition))
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldPosition, v))
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldPosition, v))
}

// DepartmentEQ applies the EQ predicate on the "department" field.
func DepartmentEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldDepartment, v))
}

// DepartmentNEQ applies the NEQ predicate on the "department" field.
func DepartmentNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldDepartment, v))
}

// DepartmentIn applies the In predicate on the "department" field.
func DepartmentIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldDepartment, vs...))
}

// DepartmentNotIn applies the NotIn predicate on the "department" field.
func DepartmentNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldDepartment, vs...))
}

// DepartmentGT applies the GT predicate on the "department" field.
func DepartmentGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldDepartment, v))
}

// DepartmentGTE applies the GTE predicate on the "department" field.
func DepartmentGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldDepartment, v))
}

// DepartmentLT applies the LT predicate on the "department" field.
func DepartmentLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldDepartment, v))
}

// DepartmentLTE applies the LTE predicate on the "department" field.
func DepartmentLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldDepartment, v))
}

// DepartmentContains applies the Contains predicate on the "department" field.
func DepartmentContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldDepartment, v))
}

// DepartmentHasPrefix applies the HasPrefix predicate on the "department" field.
func DepartmentHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldDepartment, v))
}

// DepartmentHasSuffix applies the HasSuffix predicate on the "department" field.
func DepartmentHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldDepartment, v))
}

// DepartmentIsNil applies the IsNil predicate on the "department" field.
func DepartmentIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldDepartment))
}

// DepartmentNotNil applies the NotNil predicate on the "department" field.
func DepartmentNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldDepartment))
}

// DepartmentEqualFold applies the EqualFold predicate on the "department" field.
func DepartmentEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldDepartment, v))
}

// DepartmentContainsFold applies the ContainsFold predicate on the "department" field.
func DepartmentContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldDepartment, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldEmail, v))
}

// PhonenumEQ applies the EQ predicate on the "phonenum" field.
func PhonenumEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldPhonenum, v))
}

// PhonenumNEQ applies the NEQ predicate on the "phonenum" field.
func PhonenumNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldPhonenum, v))
}

// PhonenumIn applies the In predicate on the "phonenum" field.
func PhonenumIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldPhonenum, vs...))
}

// PhonenumNotIn applies the NotIn predicate on the "phonenum" field.
func PhonenumNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldPhonenum, vs...))
}

// PhonenumGT applies the GT predicate on the "phonenum" field.
func PhonenumGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldPhonenum, v))
}

// PhonenumGTE applies the GTE predicate on the "phonenum" field.
func PhonenumGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldPhonenum, v))
}

// PhonenumLT applies the LT predicate on the "phonenum" field.
func PhonenumLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldPhonenum, v))
}

// PhonenumLTE applies the LTE predicate on the "phonenum" field.
func PhonenumLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldPhonenum, v))
}

// PhonenumContains applies the Contains predicate on the "phonenum" field.
func PhonenumContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldPhonenum, v))
}

// PhonenumHasPrefix applies the HasPrefix predicate on the "phonenum" field.
func PhonenumHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldPhonenum, v))
}

// PhonenumHasSuffix applies the HasSuffix predicate on the "phonenum" field.
func PhonenumHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldPhonenum, v))
}

// PhonenumIsNil applies the IsNil predicate on the "phonenum" field.
func PhonenumIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldPhonenum))
}

// PhonenumNotNil applies the NotNil predicate on the "phonenum" field.
func PhonenumNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldPhonenum))
}

// PhonenumEqualFold applies the EqualFold predicate on the "phonenum" field.
func PhonenumEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldPhonenum, v))
}

// PhonenumContainsFold applies the ContainsFold predicate on the "phonenum" field.
func PhonenumContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldPhonenum, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldDescription, v))
}

// EthnicityEQ applies the EQ predicate on the "ethnicity" field.
func EthnicityEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldEthnicity, v))
}

// EthnicityNEQ applies the NEQ predicate on the "ethnicity" field.
func EthnicityNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldEthnicity, v))
}

// EthnicityIn applies the In predicate on the "ethnicity" field.
func EthnicityIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldEthnicity, vs...))
}

// EthnicityNotIn applies the NotIn predicate on the "ethnicity" field.
func EthnicityNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldEthnicity, vs...))
}

// EthnicityGT applies the GT predicate on the "ethnicity" field.
func EthnicityGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldEthnicity, v))
}

// EthnicityGTE applies the GTE predicate on the "ethnicity" field.
func EthnicityGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldEthnicity, v))
}

// EthnicityLT applies the LT predicate on the "ethnicity" field.
func EthnicityLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldEthnicity, v))
}

// EthnicityLTE applies the LTE predicate on the "ethnicity" field.
func EthnicityLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldEthnicity, v))
}

// EthnicityContains applies the Contains predicate on the "ethnicity" field.
func EthnicityContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldEthnicity, v))
}

// EthnicityHasPrefix applies the HasPrefix predicate on the "ethnicity" field.
func EthnicityHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldEthnicity, v))
}

// EthnicityHasSuffix applies the HasSuffix predicate on the "ethnicity" field.
func EthnicityHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldEthnicity, v))
}

// EthnicityIsNil applies the IsNil predicate on the "ethnicity" field.
func EthnicityIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldEthnicity))
}

// EthnicityNotNil applies the NotNil predicate on the "ethnicity" field.
func EthnicityNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldEthnicity))
}

// EthnicityEqualFold applies the EqualFold predicate on the "ethnicity" field.
func EthnicityEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldEthnicity, v))
}

// EthnicityContainsFold applies the ContainsFold predicate on the "ethnicity" field.
func EthnicityContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldEthnicity, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldGender, v))
}

// GenderContains applies the Contains predicate on the "gender" field.
func GenderContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldGender, v))
}

// GenderHasPrefix applies the HasPrefix predicate on the "gender" field.
func GenderHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldGender, v))
}

// GenderHasSuffix applies the HasSuffix predicate on the "gender" field.
func GenderHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldGender, v))
}

// GenderIsNil applies the IsNil predicate on the "gender" field.
func GenderIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldGender))
}

// GenderNotNil applies the NotNil predicate on the "gender" field.
func GenderNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldGender))
}

// GenderEqualFold applies the EqualFold predicate on the "gender" field.
func GenderEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldGender, v))
}

// GenderContainsFold applies the ContainsFold predicate on the "gender" field.
func GenderContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldGender, v))
}

// LocalEQ applies the EQ predicate on the "local" field.
func LocalEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldLocal, v))
}

// LocalNEQ applies the NEQ predicate on the "local" field.
func LocalNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldLocal, v))
}

// LocalIn applies the In predicate on the "local" field.
func LocalIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldLocal, vs...))
}

// LocalNotIn applies the NotIn predicate on the "local" field.
func LocalNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldLocal, vs...))
}

// LocalGT applies the GT predicate on the "local" field.
func LocalGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldLocal, v))
}

// LocalGTE applies the GTE predicate on the "local" field.
func LocalGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldLocal, v))
}

// LocalLT applies the LT predicate on the "local" field.
func LocalLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldLocal, v))
}

// LocalLTE applies the LTE predicate on the "local" field.
func LocalLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldLocal, v))
}

// LocalContains applies the Contains predicate on the "local" field.
func LocalContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldLocal, v))
}

// LocalHasPrefix applies the HasPrefix predicate on the "local" field.
func LocalHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldLocal, v))
}

// LocalHasSuffix applies the HasSuffix predicate on the "local" field.
func LocalHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldLocal, v))
}

// LocalIsNil applies the IsNil predicate on the "local" field.
func LocalIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldLocal))
}

// LocalNotNil applies the NotNil predicate on the "local" field.
func LocalNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldLocal))
}

// LocalEqualFold applies the EqualFold predicate on the "local" field.
func LocalEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldLocal, v))
}

// LocalContainsFold applies the ContainsFold predicate on the "local" field.
func LocalContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldLocal, v))
}

// LocalhostEQ applies the EQ predicate on the "localhost" field.
func LocalhostEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldLocalhost, v))
}

// LocalhostNEQ applies the NEQ predicate on the "localhost" field.
func LocalhostNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldLocalhost, v))
}

// LocalhostIn applies the In predicate on the "localhost" field.
func LocalhostIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldLocalhost, vs...))
}

// LocalhostNotIn applies the NotIn predicate on the "localhost" field.
func LocalhostNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldLocalhost, vs...))
}

// LocalhostGT applies the GT predicate on the "localhost" field.
func LocalhostGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldLocalhost, v))
}

// LocalhostGTE applies the GTE predicate on the "localhost" field.
func LocalhostGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldLocalhost, v))
}

// LocalhostLT applies the LT predicate on the "localhost" field.
func LocalhostLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldLocalhost, v))
}

// LocalhostLTE applies the LTE predicate on the "localhost" field.
func LocalhostLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldLocalhost, v))
}

// LocalhostContains applies the Contains predicate on the "localhost" field.
func LocalhostContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldLocalhost, v))
}

// LocalhostHasPrefix applies the HasPrefix predicate on the "localhost" field.
func LocalhostHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldLocalhost, v))
}

// LocalhostHasSuffix applies the HasSuffix predicate on the "localhost" field.
func LocalhostHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldLocalhost, v))
}

// LocalhostIsNil applies the IsNil predicate on the "localhost" field.
func LocalhostIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldLocalhost))
}

// LocalhostNotNil applies the NotNil predicate on the "localhost" field.
func LocalhostNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldLocalhost))
}

// LocalhostEqualFold applies the EqualFold predicate on the "localhost" field.
func LocalhostEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldLocalhost, v))
}

// LocalhostContainsFold applies the ContainsFold predicate on the "localhost" field.
func LocalhostContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldLocalhost, v))
}

// M2LocalhostEQ applies the EQ predicate on the "m2_localhost" field.
func M2LocalhostEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldM2Localhost, v))
}

// M2LocalhostNEQ applies the NEQ predicate on the "m2_localhost" field.
func M2LocalhostNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldM2Localhost, v))
}

// M2LocalhostIn applies the In predicate on the "m2_localhost" field.
func M2LocalhostIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldM2Localhost, vs...))
}

// M2LocalhostNotIn applies the NotIn predicate on the "m2_localhost" field.
func M2LocalhostNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldM2Localhost, vs...))
}

// M2LocalhostGT applies the GT predicate on the "m2_localhost" field.
func M2LocalhostGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldM2Localhost, v))
}

// M2LocalhostGTE applies the GTE predicate on the "m2_localhost" field.
func M2LocalhostGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldM2Localhost, v))
}

// M2LocalhostLT applies the LT predicate on the "m2_localhost" field.
func M2LocalhostLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldM2Localhost, v))
}

// M2LocalhostLTE applies the LTE predicate on the "m2_localhost" field.
func M2LocalhostLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldM2Localhost, v))
}

// M2LocalhostContains applies the Contains predicate on the "m2_localhost" field.
func M2LocalhostContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldM2Localhost, v))
}

// M2LocalhostHasPrefix applies the HasPrefix predicate on the "m2_localhost" field.
func M2LocalhostHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldM2Localhost, v))
}

// M2LocalhostHasSuffix applies the HasSuffix predicate on the "m2_localhost" field.
func M2LocalhostHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldM2Localhost, v))
}

// M2LocalhostIsNil applies the IsNil predicate on the "m2_localhost" field.
func M2LocalhostIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldM2Localhost))
}

// M2LocalhostNotNil applies the NotNil predicate on the "m2_localhost" field.
func M2LocalhostNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldM2Localhost))
}

// M2LocalhostEqualFold applies the EqualFold predicate on the "m2_localhost" field.
func M2LocalhostEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldM2Localhost, v))
}

// M2LocalhostContainsFold applies the ContainsFold predicate on the "m2_localhost" field.
func M2LocalhostContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldM2Localhost, v))
}

// IsmanagerEQ applies the EQ predicate on the "ismanager" field.
func IsmanagerEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldIsmanager, v))
}

// IsmanagerNEQ applies the NEQ predicate on the "ismanager" field.
func IsmanagerNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldIsmanager, v))
}

// IsmanagerIn applies the In predicate on the "ismanager" field.
func IsmanagerIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldIsmanager, vs...))
}

// IsmanagerNotIn applies the NotIn predicate on the "ismanager" field.
func IsmanagerNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldIsmanager, vs...))
}

// IsmanagerGT applies the GT predicate on the "ismanager" field.
func IsmanagerGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldIsmanager, v))
}

// IsmanagerGTE applies the GTE predicate on the "ismanager" field.
func IsmanagerGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldIsmanager, v))
}

// IsmanagerLT applies the LT predicate on the "ismanager" field.
func IsmanagerLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldIsmanager, v))
}

// IsmanagerLTE applies the LTE predicate on the "ismanager" field.
func IsmanagerLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldIsmanager, v))
}

// IsmanagerContains applies the Contains predicate on the "ismanager" field.
func IsmanagerContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldIsmanager, v))
}

// IsmanagerHasPrefix applies the HasPrefix predicate on the "ismanager" field.
func IsmanagerHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldIsmanager, v))
}

// IsmanagerHasSuffix applies the HasSuffix predicate on the "ismanager" field.
func IsmanagerHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldIsmanager, v))
}

// IsmanagerIsNil applies the IsNil predicate on the "ismanager" field.
func IsmanagerIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldIsmanager))
}

// IsmanagerNotNil applies the NotNil predicate on the "ismanager" field.
func IsmanagerNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldIsmanager))
}

// IsmanagerEqualFold applies the EqualFold predicate on the "ismanager" field.
func IsmanagerEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldIsmanager, v))
}

// IsmanagerContainsFold applies the ContainsFold predicate on the "ismanager" field.
func IsmanagerContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldIsmanager, v))
}

// IsystemEQ applies the EQ predicate on the "isystem" field.
func IsystemEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldIsystem, v))
}

// IsystemNEQ applies the NEQ predicate on the "isystem" field.
func IsystemNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldIsystem, v))
}

// IsystemIn applies the In predicate on the "isystem" field.
func IsystemIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldIsystem, vs...))
}

// IsystemNotIn applies the NotIn predicate on the "isystem" field.
func IsystemNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldIsystem, vs...))
}

// IsystemGT applies the GT predicate on the "isystem" field.
func IsystemGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldIsystem, v))
}

// IsystemGTE applies the GTE predicate on the "isystem" field.
func IsystemGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldIsystem, v))
}

// IsystemLT applies the LT predicate on the "isystem" field.
func IsystemLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldIsystem, v))
}

// IsystemLTE applies the LTE predicate on the "isystem" field.
func IsystemLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldIsystem, v))
}

// IsystemContains applies the Contains predicate on the "isystem" field.
func IsystemContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldIsystem, v))
}

// IsystemHasPrefix applies the HasPrefix predicate on the "isystem" field.
func IsystemHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldIsystem, v))
}

// IsystemHasSuffix applies the HasSuffix predicate on the "isystem" field.
func IsystemHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldIsystem, v))
}

// IsystemIsNil applies the IsNil predicate on the "isystem" field.
func IsystemIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldIsystem))
}

// IsystemNotNil applies the NotNil predicate on the "isystem" field.
func IsystemNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldIsystem))
}

// IsystemEqualFold applies the EqualFold predicate on the "isystem" field.
func IsystemEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldIsystem, v))
}

// IsystemContainsFold applies the ContainsFold predicate on the "isystem" field.
func IsystemContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldIsystem, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldEnabled, v))
}

// EnabledIsNil applies the IsNil predicate on the "enabled" field.
func EnabledIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldEnabled))
}

// EnabledNotNil applies the NotNil predicate on the "enabled" field.
func EnabledNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldEnabled))
}

// IsSmsEQ applies the EQ predicate on the "is_sms" field.
func IsSmsEQ(v bool) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldIsSms, v))
}

// IsSmsNEQ applies the NEQ predicate on the "is_sms" field.
func IsSmsNEQ(v bool) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldIsSms, v))
}

// IsSmsIsNil applies the IsNil predicate on the "is_sms" field.
func IsSmsIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldIsSms))
}

// IsSmsNotNil applies the NotNil predicate on the "is_sms" field.
func IsSmsNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldIsSms))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDGT applies the GT predicate on the "member_id" field.
func MemberIDGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldMemberID, v))
}

// MemberIDGTE applies the GTE predicate on the "member_id" field.
func MemberIDGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldMemberID, v))
}

// MemberIDLT applies the LT predicate on the "member_id" field.
func MemberIDLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldMemberID, v))
}

// MemberIDLTE applies the LTE predicate on the "member_id" field.
func MemberIDLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldMemberID, v))
}

// MemberIDContains applies the Contains predicate on the "member_id" field.
func MemberIDContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldMemberID, v))
}

// MemberIDHasPrefix applies the HasPrefix predicate on the "member_id" field.
func MemberIDHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldMemberID, v))
}

// MemberIDHasSuffix applies the HasSuffix predicate on the "member_id" field.
func MemberIDHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldMemberID, v))
}

// MemberIDIsNil applies the IsNil predicate on the "member_id" field.
func MemberIDIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldMemberID))
}

// MemberIDNotNil applies the NotNil predicate on the "member_id" field.
func MemberIDNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldMemberID))
}

// MemberIDEqualFold applies the EqualFold predicate on the "member_id" field.
func MemberIDEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldMemberID, v))
}

// MemberIDContainsFold applies the ContainsFold predicate on the "member_id" field.
func MemberIDContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldMemberID, v))
}

// LeaderIDEQ applies the EQ predicate on the "leader_id" field.
func LeaderIDEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldLeaderID, v))
}

// LeaderIDNEQ applies the NEQ predicate on the "leader_id" field.
func LeaderIDNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldLeaderID, v))
}

// LeaderIDIn applies the In predicate on the "leader_id" field.
func LeaderIDIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldLeaderID, vs...))
}

// LeaderIDNotIn applies the NotIn predicate on the "leader_id" field.
func LeaderIDNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldLeaderID, vs...))
}

// LeaderIDGT applies the GT predicate on the "leader_id" field.
func LeaderIDGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldLeaderID, v))
}

// LeaderIDGTE applies the GTE predicate on the "leader_id" field.
func LeaderIDGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldLeaderID, v))
}

// LeaderIDLT applies the LT predicate on the "leader_id" field.
func LeaderIDLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldLeaderID, v))
}

// LeaderIDLTE applies the LTE predicate on the "leader_id" field.
func LeaderIDLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldLeaderID, v))
}

// LeaderIDContains applies the Contains predicate on the "leader_id" field.
func LeaderIDContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldLeaderID, v))
}

// LeaderIDHasPrefix applies the HasPrefix predicate on the "leader_id" field.
func LeaderIDHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldLeaderID, v))
}

// LeaderIDHasSuffix applies the HasSuffix predicate on the "leader_id" field.
func LeaderIDHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldLeaderID, v))
}

// LeaderIDIsNil applies the IsNil predicate on the "leader_id" field.
func LeaderIDIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldLeaderID))
}

// LeaderIDNotNil applies the NotNil predicate on the "leader_id" field.
func LeaderIDNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldLeaderID))
}

// LeaderIDEqualFold applies the EqualFold predicate on the "leader_id" field.
func LeaderIDEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldLeaderID, v))
}

// LeaderIDContainsFold applies the ContainsFold predicate on the "leader_id" field.
func LeaderIDContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldLeaderID, v))
}

// DeviceTimeEQ applies the EQ predicate on the "device_time" field.
func DeviceTimeEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldDeviceTime, v))
}

// DeviceTimeNEQ applies the NEQ predicate on the "device_time" field.
func DeviceTimeNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldDeviceTime, v))
}

// DeviceTimeIn applies the In predicate on the "device_time" field.
func DeviceTimeIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldDeviceTime, vs...))
}

// DeviceTimeNotIn applies the NotIn predicate on the "device_time" field.
func DeviceTimeNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldDeviceTime, vs...))
}

// DeviceTimeGT applies the GT predicate on the "device_time" field.
func DeviceTimeGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldDeviceTime, v))
}

// DeviceTimeGTE applies the GTE predicate on the "device_time" field.
func DeviceTimeGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldDeviceTime, v))
}

// DeviceTimeLT applies the LT predicate on the "device_time" field.
func DeviceTimeLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldDeviceTime, v))
}

// DeviceTimeLTE applies the LTE predicate on the "device_time" field.
func DeviceTimeLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldDeviceTime, v))
}

// DeviceTimeContains applies the Contains predicate on the "device_time" field.
func DeviceTimeContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldDeviceTime, v))
}

// DeviceTimeHasPrefix applies the HasPrefix predicate on the "device_time" field.
func DeviceTimeHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldDeviceTime, v))
}

// DeviceTimeHasSuffix applies the HasSuffix predicate on the "device_time" field.
func DeviceTimeHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldDeviceTime, v))
}

// DeviceTimeIsNil applies the IsNil predicate on the "device_time" field.
func DeviceTimeIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldDeviceTime))
}

// DeviceTimeNotNil applies the NotNil predicate on the "device_time" field.
func DeviceTimeNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldDeviceTime))
}

// DeviceTimeEqualFold applies the EqualFold predicate on the "device_time" field.
func DeviceTimeEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldDeviceTime, v))
}

// DeviceTimeContainsFold applies the ContainsFold predicate on the "device_time" field.
func DeviceTimeContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldDeviceTime, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v uuid.UUID) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v uuid.UUID) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...uuid.UUID) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...uuid.UUID) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v uuid.UUID) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v uuid.UUID) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v uuid.UUID) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v uuid.UUID) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldTenantID))
}

// DeleteFlagEQ applies the EQ predicate on the "delete_flag" field.
func DeleteFlagEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldDeleteFlag, v))
}

// DeleteFlagNEQ applies the NEQ predicate on the "delete_flag" field.
func DeleteFlagNEQ(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldDeleteFlag, v))
}

// DeleteFlagIn applies the In predicate on the "delete_flag" field.
func DeleteFlagIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldDeleteFlag, vs...))
}

// DeleteFlagNotIn applies the NotIn predicate on the "delete_flag" field.
func DeleteFlagNotIn(vs ...string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldDeleteFlag, vs...))
}

// DeleteFlagGT applies the GT predicate on the "delete_flag" field.
func DeleteFlagGT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldDeleteFlag, v))
}

// DeleteFlagGTE applies the GTE predicate on the "delete_flag" field.
func DeleteFlagGTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldDeleteFlag, v))
}

// DeleteFlagLT applies the LT predicate on the "delete_flag" field.
func DeleteFlagLT(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldDeleteFlag, v))
}

// DeleteFlagLTE applies the LTE predicate on the "delete_flag" field.
func DeleteFlagLTE(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldDeleteFlag, v))
}

// DeleteFlagContains applies the Contains predicate on the "delete_flag" field.
func DeleteFlagContains(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContains(FieldDeleteFlag, v))
}

// DeleteFlagHasPrefix applies the HasPrefix predicate on the "delete_flag" field.
func DeleteFlagHasPrefix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasPrefix(FieldDeleteFlag, v))
}

// DeleteFlagHasSuffix applies the HasSuffix predicate on the "delete_flag" field.
func DeleteFlagHasSuffix(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldHasSuffix(FieldDeleteFlag, v))
}

// DeleteFlagIsNil applies the IsNil predicate on the "delete_flag" field.
func DeleteFlagIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldDeleteFlag))
}

// DeleteFlagNotNil applies the NotNil predicate on the "delete_flag" field.
func DeleteFlagNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldDeleteFlag))
}

// DeleteFlagEqualFold applies the EqualFold predicate on the "delete_flag" field.
func DeleteFlagEqualFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEqualFold(FieldDeleteFlag, v))
}

// DeleteFlagContainsFold applies the ContainsFold predicate on the "delete_flag" field.
func DeleteFlagContainsFold(v string) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldContainsFold(FieldDeleteFlag, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldCreatedTime, v))
}

// CreatedTimeIsNil applies the IsNil predicate on the "created_time" field.
func CreatedTimeIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldCreatedTime))
}

// CreatedTimeNotNil applies the NotNil predicate on the "created_time" field.
func CreatedTimeNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldCreatedTime))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldUpdatedTime, v))
}

// UpdatedTimeIsNil applies the IsNil predicate on the "updated_time" field.
func UpdatedTimeIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldUpdatedTime))
}

// UpdatedTimeNotNil applies the NotNil predicate on the "updated_time" field.
func UpdatedTimeNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldUpdatedTime))
}

// DeletedTimeEQ applies the EQ predicate on the "deleted_time" field.
func DeletedTimeEQ(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldEQ(FieldDeletedTime, v))
}

// DeletedTimeNEQ applies the NEQ predicate on the "deleted_time" field.
func DeletedTimeNEQ(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNEQ(FieldDeletedTime, v))
}

// DeletedTimeIn applies the In predicate on the "deleted_time" field.
func DeletedTimeIn(vs ...time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIn(FieldDeletedTime, vs...))
}

// DeletedTimeNotIn applies the NotIn predicate on the "deleted_time" field.
func DeletedTimeNotIn(vs ...time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotIn(FieldDeletedTime, vs...))
}

// DeletedTimeGT applies the GT predicate on the "deleted_time" field.
func DeletedTimeGT(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGT(FieldDeletedTime, v))
}

// DeletedTimeGTE applies the GTE predicate on the "deleted_time" field.
func DeletedTimeGTE(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldGTE(FieldDeletedTime, v))
}

// DeletedTimeLT applies the LT predicate on the "deleted_time" field.
func DeletedTimeLT(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLT(FieldDeletedTime, v))
}

// DeletedTimeLTE applies the LTE predicate on the "deleted_time" field.
func DeletedTimeLTE(v time.Time) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldLTE(FieldDeletedTime, v))
}

// DeletedTimeIsNil applies the IsNil predicate on the "deleted_time" field.
func DeletedTimeIsNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldIsNull(FieldDeletedTime))
}

// DeletedTimeNotNil applies the NotNil predicate on the "deleted_time" field.
func DeletedTimeNotNil() predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.FieldNotNull(FieldDeletedTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FmUserAccount) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FmUserAccount) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FmUserAccount) predicate.FmUserAccount {
	return predicate.FmUserAccount(sql.NotPredicates(p))
}
