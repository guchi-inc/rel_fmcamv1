// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmcam/systems/genclients"
	"fmt"
)

// The AlertsFunc type is an adapter to allow the use of ordinary
// function as Alerts mutator.
type AlertsFunc func(context.Context, *genclients.AlertsMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f AlertsFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.AlertsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.AlertsMutation", m)
}

// The ApikeysFunc type is an adapter to allow the use of ordinary
// function as Apikeys mutator.
type ApikeysFunc func(context.Context, *genclients.ApikeysMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f ApikeysFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.ApikeysMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.ApikeysMutation", m)
}

// The CaptureLogsFunc type is an adapter to allow the use of ordinary
// function as CaptureLogs mutator.
type CaptureLogsFunc func(context.Context, *genclients.CaptureLogsMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f CaptureLogsFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.CaptureLogsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.CaptureLogsMutation", m)
}

// The DevicesFunc type is an adapter to allow the use of ordinary
// function as Devices mutator.
type DevicesFunc func(context.Context, *genclients.DevicesMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f DevicesFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.DevicesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.DevicesMutation", m)
}

// The FMPMSApiFunc type is an adapter to allow the use of ordinary
// function as FMPMSApi mutator.
type FMPMSApiFunc func(context.Context, *genclients.FMPMSApiMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f FMPMSApiFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.FMPMSApiMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.FMPMSApiMutation", m)
}

// The FacesFunc type is an adapter to allow the use of ordinary
// function as Faces mutator.
type FacesFunc func(context.Context, *genclients.FacesMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f FacesFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.FacesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.FacesMutation", m)
}

// The FieldMetadataFunc type is an adapter to allow the use of ordinary
// function as FieldMetadata mutator.
type FieldMetadataFunc func(context.Context, *genclients.FieldMetadataMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f FieldMetadataFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.FieldMetadataMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.FieldMetadataMutation", m)
}

// The FmAlertDefinitionFunc type is an adapter to allow the use of ordinary
// function as FmAlertDefinition mutator.
type FmAlertDefinitionFunc func(context.Context, *genclients.FmAlertDefinitionMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f FmAlertDefinitionFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.FmAlertDefinitionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.FmAlertDefinitionMutation", m)
}

// The FmAlertGroupFunc type is an adapter to allow the use of ordinary
// function as FmAlertGroup mutator.
type FmAlertGroupFunc func(context.Context, *genclients.FmAlertGroupMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f FmAlertGroupFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.FmAlertGroupMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.FmAlertGroupMutation", m)
}

// The FmDedicatedServicesFunc type is an adapter to allow the use of ordinary
// function as FmDedicatedServices mutator.
type FmDedicatedServicesFunc func(context.Context, *genclients.FmDedicatedServicesMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f FmDedicatedServicesFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.FmDedicatedServicesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.FmDedicatedServicesMutation", m)
}

// The FmDemandsFunc type is an adapter to allow the use of ordinary
// function as FmDemands mutator.
type FmDemandsFunc func(context.Context, *genclients.FmDemandsMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f FmDemandsFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.FmDemandsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.FmDemandsMutation", m)
}

// The FmUserAccountFunc type is an adapter to allow the use of ordinary
// function as FmUserAccount mutator.
type FmUserAccountFunc func(context.Context, *genclients.FmUserAccountMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f FmUserAccountFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.FmUserAccountMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.FmUserAccountMutation", m)
}

// The GovAreaFunc type is an adapter to allow the use of ordinary
// function as GovArea mutator.
type GovAreaFunc func(context.Context, *genclients.GovAreaMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f GovAreaFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.GovAreaMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.GovAreaMutation", m)
}

// The GovCityFunc type is an adapter to allow the use of ordinary
// function as GovCity mutator.
type GovCityFunc func(context.Context, *genclients.GovCityMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f GovCityFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.GovCityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.GovCityMutation", m)
}

// The GovStreetFunc type is an adapter to allow the use of ordinary
// function as GovStreet mutator.
type GovStreetFunc func(context.Context, *genclients.GovStreetMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f GovStreetFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.GovStreetMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.GovStreetMutation", m)
}

// The GrouProfileTypeMappingFunc type is an adapter to allow the use of ordinary
// function as GrouProfileTypeMapping mutator.
type GrouProfileTypeMappingFunc func(context.Context, *genclients.GrouProfileTypeMappingMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f GrouProfileTypeMappingFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.GrouProfileTypeMappingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.GrouProfileTypeMappingMutation", m)
}

// The ProfileTypeFunc type is an adapter to allow the use of ordinary
// function as ProfileType mutator.
type ProfileTypeFunc func(context.Context, *genclients.ProfileTypeMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f ProfileTypeFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.ProfileTypeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.ProfileTypeMutation", m)
}

// The ProfilesFunc type is an adapter to allow the use of ordinary
// function as Profiles mutator.
type ProfilesFunc func(context.Context, *genclients.ProfilesMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f ProfilesFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.ProfilesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.ProfilesMutation", m)
}

// The ProvinceFunc type is an adapter to allow the use of ordinary
// function as Province mutator.
type ProvinceFunc func(context.Context, *genclients.ProvinceMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f ProvinceFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.ProvinceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.ProvinceMutation", m)
}

// The SqlLogFunc type is an adapter to allow the use of ordinary
// function as SqlLog mutator.
type SqlLogFunc func(context.Context, *genclients.SqlLogMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f SqlLogFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.SqlLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.SqlLogMutation", m)
}

// The TemporaryFaceFunc type is an adapter to allow the use of ordinary
// function as TemporaryFace mutator.
type TemporaryFaceFunc func(context.Context, *genclients.TemporaryFaceMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f TemporaryFaceFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.TemporaryFaceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.TemporaryFaceMutation", m)
}

// The TenantsFunc type is an adapter to allow the use of ordinary
// function as Tenants mutator.
type TenantsFunc func(context.Context, *genclients.TenantsMutation) (genclients.Value, error)

// Mutate calls f(ctx, m).
func (f TenantsFunc) Mutate(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
	if mv, ok := m.(*genclients.TenantsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *genclients.TenantsMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, genclients.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m genclients.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m genclients.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m genclients.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op genclients.Op) Condition {
	return func(_ context.Context, m genclients.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m genclients.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m genclients.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m genclients.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk genclients.Hook, cond Condition) genclients.Hook {
	return func(next genclients.Mutator) genclients.Mutator {
		return genclients.MutateFunc(func(ctx context.Context, m genclients.Mutation) (genclients.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, genclients.Delete|genclients.Create)
func On(hk genclients.Hook, op genclients.Op) genclients.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, genclients.Update|genclients.UpdateOne)
func Unless(hk genclients.Hook, op genclients.Op) genclients.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) genclients.Hook {
	return func(genclients.Mutator) genclients.Mutator {
		return genclients.MutateFunc(func(context.Context, genclients.Mutation) (genclients.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []genclients.Hook {
//		return []genclients.Hook{
//			Reject(genclients.Delete|genclients.Update),
//		}
//	}
func Reject(op genclients.Op) genclients.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []genclients.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...genclients.Hook) Chain {
	return Chain{append([]genclients.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() genclients.Hook {
	return func(mutator genclients.Mutator) genclients.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...genclients.Hook) Chain {
	newHooks := make([]genclients.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
