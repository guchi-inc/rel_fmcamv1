// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/fieldmetadata"
	"fmcam/systems/genclients/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FieldMetadataUpdate is the builder for updating FieldMetadata entities.
type FieldMetadataUpdate struct {
	config
	hooks    []Hook
	mutation *FieldMetadataMutation
}

// Where appends a list predicates to the FieldMetadataUpdate builder.
func (fmu *FieldMetadataUpdate) Where(ps ...predicate.FieldMetadata) *FieldMetadataUpdate {
	fmu.mutation.Where(ps...)
	return fmu
}

// SetTableName sets the "table_name" field.
func (fmu *FieldMetadataUpdate) SetTableName(s string) *FieldMetadataUpdate {
	fmu.mutation.SetTableName(s)
	return fmu
}

// SetNillableTableName sets the "table_name" field if the given value is not nil.
func (fmu *FieldMetadataUpdate) SetNillableTableName(s *string) *FieldMetadataUpdate {
	if s != nil {
		fmu.SetTableName(*s)
	}
	return fmu
}

// SetName sets the "name" field.
func (fmu *FieldMetadataUpdate) SetName(s string) *FieldMetadataUpdate {
	fmu.mutation.SetName(s)
	return fmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fmu *FieldMetadataUpdate) SetNillableName(s *string) *FieldMetadataUpdate {
	if s != nil {
		fmu.SetName(*s)
	}
	return fmu
}

// SetCname sets the "cname" field.
func (fmu *FieldMetadataUpdate) SetCname(s string) *FieldMetadataUpdate {
	fmu.mutation.SetCname(s)
	return fmu
}

// SetNillableCname sets the "cname" field if the given value is not nil.
func (fmu *FieldMetadataUpdate) SetNillableCname(s *string) *FieldMetadataUpdate {
	if s != nil {
		fmu.SetCname(*s)
	}
	return fmu
}

// SetDataType sets the "data_type" field.
func (fmu *FieldMetadataUpdate) SetDataType(s string) *FieldMetadataUpdate {
	fmu.mutation.SetDataType(s)
	return fmu
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (fmu *FieldMetadataUpdate) SetNillableDataType(s *string) *FieldMetadataUpdate {
	if s != nil {
		fmu.SetDataType(*s)
	}
	return fmu
}

// SetIsVisible sets the "is_visible" field.
func (fmu *FieldMetadataUpdate) SetIsVisible(b bool) *FieldMetadataUpdate {
	fmu.mutation.SetIsVisible(b)
	return fmu
}

// SetNillableIsVisible sets the "is_visible" field if the given value is not nil.
func (fmu *FieldMetadataUpdate) SetNillableIsVisible(b *bool) *FieldMetadataUpdate {
	if b != nil {
		fmu.SetIsVisible(*b)
	}
	return fmu
}

// SetIsSearchable sets the "is_searchable" field.
func (fmu *FieldMetadataUpdate) SetIsSearchable(b bool) *FieldMetadataUpdate {
	fmu.mutation.SetIsSearchable(b)
	return fmu
}

// SetNillableIsSearchable sets the "is_searchable" field if the given value is not nil.
func (fmu *FieldMetadataUpdate) SetNillableIsSearchable(b *bool) *FieldMetadataUpdate {
	if b != nil {
		fmu.SetIsSearchable(*b)
	}
	return fmu
}

// SetIsEditable sets the "is_editable" field.
func (fmu *FieldMetadataUpdate) SetIsEditable(b bool) *FieldMetadataUpdate {
	fmu.mutation.SetIsEditable(b)
	return fmu
}

// SetNillableIsEditable sets the "is_editable" field if the given value is not nil.
func (fmu *FieldMetadataUpdate) SetNillableIsEditable(b *bool) *FieldMetadataUpdate {
	if b != nil {
		fmu.SetIsEditable(*b)
	}
	return fmu
}

// SetIsRequired sets the "is_required" field.
func (fmu *FieldMetadataUpdate) SetIsRequired(b bool) *FieldMetadataUpdate {
	fmu.mutation.SetIsRequired(b)
	return fmu
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (fmu *FieldMetadataUpdate) SetNillableIsRequired(b *bool) *FieldMetadataUpdate {
	if b != nil {
		fmu.SetIsRequired(*b)
	}
	return fmu
}

// SetMaxLength sets the "max_length" field.
func (fmu *FieldMetadataUpdate) SetMaxLength(i int) *FieldMetadataUpdate {
	fmu.mutation.ResetMaxLength()
	fmu.mutation.SetMaxLength(i)
	return fmu
}

// SetNillableMaxLength sets the "max_length" field if the given value is not nil.
func (fmu *FieldMetadataUpdate) SetNillableMaxLength(i *int) *FieldMetadataUpdate {
	if i != nil {
		fmu.SetMaxLength(*i)
	}
	return fmu
}

// AddMaxLength adds i to the "max_length" field.
func (fmu *FieldMetadataUpdate) AddMaxLength(i int) *FieldMetadataUpdate {
	fmu.mutation.AddMaxLength(i)
	return fmu
}

// SetDefaultValue sets the "default_value" field.
func (fmu *FieldMetadataUpdate) SetDefaultValue(s string) *FieldMetadataUpdate {
	fmu.mutation.SetDefaultValue(s)
	return fmu
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (fmu *FieldMetadataUpdate) SetNillableDefaultValue(s *string) *FieldMetadataUpdate {
	if s != nil {
		fmu.SetDefaultValue(*s)
	}
	return fmu
}

// SetDescription sets the "description" field.
func (fmu *FieldMetadataUpdate) SetDescription(s string) *FieldMetadataUpdate {
	fmu.mutation.SetDescription(s)
	return fmu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fmu *FieldMetadataUpdate) SetNillableDescription(s *string) *FieldMetadataUpdate {
	if s != nil {
		fmu.SetDescription(*s)
	}
	return fmu
}

// SetCreatedTime sets the "created_time" field.
func (fmu *FieldMetadataUpdate) SetCreatedTime(t time.Time) *FieldMetadataUpdate {
	fmu.mutation.SetCreatedTime(t)
	return fmu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fmu *FieldMetadataUpdate) SetNillableCreatedTime(t *time.Time) *FieldMetadataUpdate {
	if t != nil {
		fmu.SetCreatedTime(*t)
	}
	return fmu
}

// ClearCreatedTime clears the value of the "created_time" field.
func (fmu *FieldMetadataUpdate) ClearCreatedTime() *FieldMetadataUpdate {
	fmu.mutation.ClearCreatedTime()
	return fmu
}

// SetUpdatedTime sets the "updated_time" field.
func (fmu *FieldMetadataUpdate) SetUpdatedTime(t time.Time) *FieldMetadataUpdate {
	fmu.mutation.SetUpdatedTime(t)
	return fmu
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (fmu *FieldMetadataUpdate) ClearUpdatedTime() *FieldMetadataUpdate {
	fmu.mutation.ClearUpdatedTime()
	return fmu
}

// Mutation returns the FieldMetadataMutation object of the builder.
func (fmu *FieldMetadataUpdate) Mutation() *FieldMetadataMutation {
	return fmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fmu *FieldMetadataUpdate) Save(ctx context.Context) (int, error) {
	fmu.defaults()
	return withHooks(ctx, fmu.sqlSave, fmu.mutation, fmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fmu *FieldMetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := fmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fmu *FieldMetadataUpdate) Exec(ctx context.Context) error {
	_, err := fmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmu *FieldMetadataUpdate) ExecX(ctx context.Context) {
	if err := fmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fmu *FieldMetadataUpdate) defaults() {
	if _, ok := fmu.mutation.UpdatedTime(); !ok && !fmu.mutation.UpdatedTimeCleared() {
		v := fieldmetadata.UpdateDefaultUpdatedTime()
		fmu.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fmu *FieldMetadataUpdate) check() error {
	if v, ok := fmu.mutation.TableName(); ok {
		if err := fieldmetadata.TableNameValidator(v); err != nil {
			return &ValidationError{Name: "table_name", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.table_name": %w`, err)}
		}
	}
	if v, ok := fmu.mutation.Name(); ok {
		if err := fieldmetadata.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.name": %w`, err)}
		}
	}
	if v, ok := fmu.mutation.Cname(); ok {
		if err := fieldmetadata.CnameValidator(v); err != nil {
			return &ValidationError{Name: "cname", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.cname": %w`, err)}
		}
	}
	if v, ok := fmu.mutation.DataType(); ok {
		if err := fieldmetadata.DataTypeValidator(v); err != nil {
			return &ValidationError{Name: "data_type", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.data_type": %w`, err)}
		}
	}
	if v, ok := fmu.mutation.DefaultValue(); ok {
		if err := fieldmetadata.DefaultValueValidator(v); err != nil {
			return &ValidationError{Name: "default_value", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.default_value": %w`, err)}
		}
	}
	if v, ok := fmu.mutation.Description(); ok {
		if err := fieldmetadata.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.description": %w`, err)}
		}
	}
	return nil
}

func (fmu *FieldMetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fieldmetadata.Table, fieldmetadata.Columns, sqlgraph.NewFieldSpec(fieldmetadata.FieldID, field.TypeInt64))
	if ps := fmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fmu.mutation.TableName(); ok {
		_spec.SetField(fieldmetadata.FieldTableName, field.TypeString, value)
	}
	if value, ok := fmu.mutation.Name(); ok {
		_spec.SetField(fieldmetadata.FieldName, field.TypeString, value)
	}
	if value, ok := fmu.mutation.Cname(); ok {
		_spec.SetField(fieldmetadata.FieldCname, field.TypeString, value)
	}
	if value, ok := fmu.mutation.DataType(); ok {
		_spec.SetField(fieldmetadata.FieldDataType, field.TypeString, value)
	}
	if value, ok := fmu.mutation.IsVisible(); ok {
		_spec.SetField(fieldmetadata.FieldIsVisible, field.TypeBool, value)
	}
	if value, ok := fmu.mutation.IsSearchable(); ok {
		_spec.SetField(fieldmetadata.FieldIsSearchable, field.TypeBool, value)
	}
	if value, ok := fmu.mutation.IsEditable(); ok {
		_spec.SetField(fieldmetadata.FieldIsEditable, field.TypeBool, value)
	}
	if value, ok := fmu.mutation.IsRequired(); ok {
		_spec.SetField(fieldmetadata.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := fmu.mutation.MaxLength(); ok {
		_spec.SetField(fieldmetadata.FieldMaxLength, field.TypeInt, value)
	}
	if value, ok := fmu.mutation.AddedMaxLength(); ok {
		_spec.AddField(fieldmetadata.FieldMaxLength, field.TypeInt, value)
	}
	if value, ok := fmu.mutation.DefaultValue(); ok {
		_spec.SetField(fieldmetadata.FieldDefaultValue, field.TypeString, value)
	}
	if value, ok := fmu.mutation.Description(); ok {
		_spec.SetField(fieldmetadata.FieldDescription, field.TypeString, value)
	}
	if value, ok := fmu.mutation.CreatedTime(); ok {
		_spec.SetField(fieldmetadata.FieldCreatedTime, field.TypeTime, value)
	}
	if fmu.mutation.CreatedTimeCleared() {
		_spec.ClearField(fieldmetadata.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := fmu.mutation.UpdatedTime(); ok {
		_spec.SetField(fieldmetadata.FieldUpdatedTime, field.TypeTime, value)
	}
	if fmu.mutation.UpdatedTimeCleared() {
		_spec.ClearField(fieldmetadata.FieldUpdatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fieldmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fmu.mutation.done = true
	return n, nil
}

// FieldMetadataUpdateOne is the builder for updating a single FieldMetadata entity.
type FieldMetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FieldMetadataMutation
}

// SetTableName sets the "table_name" field.
func (fmuo *FieldMetadataUpdateOne) SetTableName(s string) *FieldMetadataUpdateOne {
	fmuo.mutation.SetTableName(s)
	return fmuo
}

// SetNillableTableName sets the "table_name" field if the given value is not nil.
func (fmuo *FieldMetadataUpdateOne) SetNillableTableName(s *string) *FieldMetadataUpdateOne {
	if s != nil {
		fmuo.SetTableName(*s)
	}
	return fmuo
}

// SetName sets the "name" field.
func (fmuo *FieldMetadataUpdateOne) SetName(s string) *FieldMetadataUpdateOne {
	fmuo.mutation.SetName(s)
	return fmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fmuo *FieldMetadataUpdateOne) SetNillableName(s *string) *FieldMetadataUpdateOne {
	if s != nil {
		fmuo.SetName(*s)
	}
	return fmuo
}

// SetCname sets the "cname" field.
func (fmuo *FieldMetadataUpdateOne) SetCname(s string) *FieldMetadataUpdateOne {
	fmuo.mutation.SetCname(s)
	return fmuo
}

// SetNillableCname sets the "cname" field if the given value is not nil.
func (fmuo *FieldMetadataUpdateOne) SetNillableCname(s *string) *FieldMetadataUpdateOne {
	if s != nil {
		fmuo.SetCname(*s)
	}
	return fmuo
}

// SetDataType sets the "data_type" field.
func (fmuo *FieldMetadataUpdateOne) SetDataType(s string) *FieldMetadataUpdateOne {
	fmuo.mutation.SetDataType(s)
	return fmuo
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (fmuo *FieldMetadataUpdateOne) SetNillableDataType(s *string) *FieldMetadataUpdateOne {
	if s != nil {
		fmuo.SetDataType(*s)
	}
	return fmuo
}

// SetIsVisible sets the "is_visible" field.
func (fmuo *FieldMetadataUpdateOne) SetIsVisible(b bool) *FieldMetadataUpdateOne {
	fmuo.mutation.SetIsVisible(b)
	return fmuo
}

// SetNillableIsVisible sets the "is_visible" field if the given value is not nil.
func (fmuo *FieldMetadataUpdateOne) SetNillableIsVisible(b *bool) *FieldMetadataUpdateOne {
	if b != nil {
		fmuo.SetIsVisible(*b)
	}
	return fmuo
}

// SetIsSearchable sets the "is_searchable" field.
func (fmuo *FieldMetadataUpdateOne) SetIsSearchable(b bool) *FieldMetadataUpdateOne {
	fmuo.mutation.SetIsSearchable(b)
	return fmuo
}

// SetNillableIsSearchable sets the "is_searchable" field if the given value is not nil.
func (fmuo *FieldMetadataUpdateOne) SetNillableIsSearchable(b *bool) *FieldMetadataUpdateOne {
	if b != nil {
		fmuo.SetIsSearchable(*b)
	}
	return fmuo
}

// SetIsEditable sets the "is_editable" field.
func (fmuo *FieldMetadataUpdateOne) SetIsEditable(b bool) *FieldMetadataUpdateOne {
	fmuo.mutation.SetIsEditable(b)
	return fmuo
}

// SetNillableIsEditable sets the "is_editable" field if the given value is not nil.
func (fmuo *FieldMetadataUpdateOne) SetNillableIsEditable(b *bool) *FieldMetadataUpdateOne {
	if b != nil {
		fmuo.SetIsEditable(*b)
	}
	return fmuo
}

// SetIsRequired sets the "is_required" field.
func (fmuo *FieldMetadataUpdateOne) SetIsRequired(b bool) *FieldMetadataUpdateOne {
	fmuo.mutation.SetIsRequired(b)
	return fmuo
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (fmuo *FieldMetadataUpdateOne) SetNillableIsRequired(b *bool) *FieldMetadataUpdateOne {
	if b != nil {
		fmuo.SetIsRequired(*b)
	}
	return fmuo
}

// SetMaxLength sets the "max_length" field.
func (fmuo *FieldMetadataUpdateOne) SetMaxLength(i int) *FieldMetadataUpdateOne {
	fmuo.mutation.ResetMaxLength()
	fmuo.mutation.SetMaxLength(i)
	return fmuo
}

// SetNillableMaxLength sets the "max_length" field if the given value is not nil.
func (fmuo *FieldMetadataUpdateOne) SetNillableMaxLength(i *int) *FieldMetadataUpdateOne {
	if i != nil {
		fmuo.SetMaxLength(*i)
	}
	return fmuo
}

// AddMaxLength adds i to the "max_length" field.
func (fmuo *FieldMetadataUpdateOne) AddMaxLength(i int) *FieldMetadataUpdateOne {
	fmuo.mutation.AddMaxLength(i)
	return fmuo
}

// SetDefaultValue sets the "default_value" field.
func (fmuo *FieldMetadataUpdateOne) SetDefaultValue(s string) *FieldMetadataUpdateOne {
	fmuo.mutation.SetDefaultValue(s)
	return fmuo
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (fmuo *FieldMetadataUpdateOne) SetNillableDefaultValue(s *string) *FieldMetadataUpdateOne {
	if s != nil {
		fmuo.SetDefaultValue(*s)
	}
	return fmuo
}

// SetDescription sets the "description" field.
func (fmuo *FieldMetadataUpdateOne) SetDescription(s string) *FieldMetadataUpdateOne {
	fmuo.mutation.SetDescription(s)
	return fmuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fmuo *FieldMetadataUpdateOne) SetNillableDescription(s *string) *FieldMetadataUpdateOne {
	if s != nil {
		fmuo.SetDescription(*s)
	}
	return fmuo
}

// SetCreatedTime sets the "created_time" field.
func (fmuo *FieldMetadataUpdateOne) SetCreatedTime(t time.Time) *FieldMetadataUpdateOne {
	fmuo.mutation.SetCreatedTime(t)
	return fmuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fmuo *FieldMetadataUpdateOne) SetNillableCreatedTime(t *time.Time) *FieldMetadataUpdateOne {
	if t != nil {
		fmuo.SetCreatedTime(*t)
	}
	return fmuo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (fmuo *FieldMetadataUpdateOne) ClearCreatedTime() *FieldMetadataUpdateOne {
	fmuo.mutation.ClearCreatedTime()
	return fmuo
}

// SetUpdatedTime sets the "updated_time" field.
func (fmuo *FieldMetadataUpdateOne) SetUpdatedTime(t time.Time) *FieldMetadataUpdateOne {
	fmuo.mutation.SetUpdatedTime(t)
	return fmuo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (fmuo *FieldMetadataUpdateOne) ClearUpdatedTime() *FieldMetadataUpdateOne {
	fmuo.mutation.ClearUpdatedTime()
	return fmuo
}

// Mutation returns the FieldMetadataMutation object of the builder.
func (fmuo *FieldMetadataUpdateOne) Mutation() *FieldMetadataMutation {
	return fmuo.mutation
}

// Where appends a list predicates to the FieldMetadataUpdate builder.
func (fmuo *FieldMetadataUpdateOne) Where(ps ...predicate.FieldMetadata) *FieldMetadataUpdateOne {
	fmuo.mutation.Where(ps...)
	return fmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fmuo *FieldMetadataUpdateOne) Select(field string, fields ...string) *FieldMetadataUpdateOne {
	fmuo.fields = append([]string{field}, fields...)
	return fmuo
}

// Save executes the query and returns the updated FieldMetadata entity.
func (fmuo *FieldMetadataUpdateOne) Save(ctx context.Context) (*FieldMetadata, error) {
	fmuo.defaults()
	return withHooks(ctx, fmuo.sqlSave, fmuo.mutation, fmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fmuo *FieldMetadataUpdateOne) SaveX(ctx context.Context) *FieldMetadata {
	node, err := fmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fmuo *FieldMetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := fmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmuo *FieldMetadataUpdateOne) ExecX(ctx context.Context) {
	if err := fmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fmuo *FieldMetadataUpdateOne) defaults() {
	if _, ok := fmuo.mutation.UpdatedTime(); !ok && !fmuo.mutation.UpdatedTimeCleared() {
		v := fieldmetadata.UpdateDefaultUpdatedTime()
		fmuo.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fmuo *FieldMetadataUpdateOne) check() error {
	if v, ok := fmuo.mutation.TableName(); ok {
		if err := fieldmetadata.TableNameValidator(v); err != nil {
			return &ValidationError{Name: "table_name", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.table_name": %w`, err)}
		}
	}
	if v, ok := fmuo.mutation.Name(); ok {
		if err := fieldmetadata.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.name": %w`, err)}
		}
	}
	if v, ok := fmuo.mutation.Cname(); ok {
		if err := fieldmetadata.CnameValidator(v); err != nil {
			return &ValidationError{Name: "cname", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.cname": %w`, err)}
		}
	}
	if v, ok := fmuo.mutation.DataType(); ok {
		if err := fieldmetadata.DataTypeValidator(v); err != nil {
			return &ValidationError{Name: "data_type", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.data_type": %w`, err)}
		}
	}
	if v, ok := fmuo.mutation.DefaultValue(); ok {
		if err := fieldmetadata.DefaultValueValidator(v); err != nil {
			return &ValidationError{Name: "default_value", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.default_value": %w`, err)}
		}
	}
	if v, ok := fmuo.mutation.Description(); ok {
		if err := fieldmetadata.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "FieldMetadata.description": %w`, err)}
		}
	}
	return nil
}

func (fmuo *FieldMetadataUpdateOne) sqlSave(ctx context.Context) (_node *FieldMetadata, err error) {
	if err := fmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fieldmetadata.Table, fieldmetadata.Columns, sqlgraph.NewFieldSpec(fieldmetadata.FieldID, field.TypeInt64))
	id, ok := fmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "FieldMetadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fieldmetadata.FieldID)
		for _, f := range fields {
			if !fieldmetadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != fieldmetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fmuo.mutation.TableName(); ok {
		_spec.SetField(fieldmetadata.FieldTableName, field.TypeString, value)
	}
	if value, ok := fmuo.mutation.Name(); ok {
		_spec.SetField(fieldmetadata.FieldName, field.TypeString, value)
	}
	if value, ok := fmuo.mutation.Cname(); ok {
		_spec.SetField(fieldmetadata.FieldCname, field.TypeString, value)
	}
	if value, ok := fmuo.mutation.DataType(); ok {
		_spec.SetField(fieldmetadata.FieldDataType, field.TypeString, value)
	}
	if value, ok := fmuo.mutation.IsVisible(); ok {
		_spec.SetField(fieldmetadata.FieldIsVisible, field.TypeBool, value)
	}
	if value, ok := fmuo.mutation.IsSearchable(); ok {
		_spec.SetField(fieldmetadata.FieldIsSearchable, field.TypeBool, value)
	}
	if value, ok := fmuo.mutation.IsEditable(); ok {
		_spec.SetField(fieldmetadata.FieldIsEditable, field.TypeBool, value)
	}
	if value, ok := fmuo.mutation.IsRequired(); ok {
		_spec.SetField(fieldmetadata.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := fmuo.mutation.MaxLength(); ok {
		_spec.SetField(fieldmetadata.FieldMaxLength, field.TypeInt, value)
	}
	if value, ok := fmuo.mutation.AddedMaxLength(); ok {
		_spec.AddField(fieldmetadata.FieldMaxLength, field.TypeInt, value)
	}
	if value, ok := fmuo.mutation.DefaultValue(); ok {
		_spec.SetField(fieldmetadata.FieldDefaultValue, field.TypeString, value)
	}
	if value, ok := fmuo.mutation.Description(); ok {
		_spec.SetField(fieldmetadata.FieldDescription, field.TypeString, value)
	}
	if value, ok := fmuo.mutation.CreatedTime(); ok {
		_spec.SetField(fieldmetadata.FieldCreatedTime, field.TypeTime, value)
	}
	if fmuo.mutation.CreatedTimeCleared() {
		_spec.ClearField(fieldmetadata.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := fmuo.mutation.UpdatedTime(); ok {
		_spec.SetField(fieldmetadata.FieldUpdatedTime, field.TypeTime, value)
	}
	if fmuo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(fieldmetadata.FieldUpdatedTime, field.TypeTime)
	}
	_node = &FieldMetadata{config: fmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fieldmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fmuo.mutation.done = true
	return _node, nil
}
