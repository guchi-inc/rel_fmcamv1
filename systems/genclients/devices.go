// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/devices"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Devices is the model entity for the Devices schema.
type Devices struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// 租户号
	TenantID uuid.UUID `json:"tenant_id"  db:"tenant_id"`
	// 设备名称
	Name *string `json:"name"  db:"name"`
	// 设备管理地址
	URL string `json:"url"  db:"url"`
	// 安装地址
	Location string `json:"location"  db:"location"`
	// 是否监控
	FuncType int `json:"func_type" db:"func_type"`
	// 图像宽度
	DisplayWidth *uint16 `json:"display_width"  db:"display_width"`
	// 图像高度
	DisplayHeight *uint16 `json:"display_height"  db:"display_height"`
	// 采集区域左上角X坐标
	RoiX *uint16 `json:"roi_x"  db:"roi_x"`
	// 采集区域左上角y坐标
	RoiY *uint16 `json:"roi_y"  db:"roi_y"`
	// 采集区域宽度
	RoiWidth *uint16 `json:"roi_width"  db:"roi_width"`
	// 采集区域高度
	RoiHeight *uint16 `json:"roi_height"  db:"roi_height"`
	// 采集区域旋转角度
	RoiRotationAngle *float64 `json:"roi_rotation_angle"  db:"roi_rotation_angle"`
	// 已设置ROI
	RoiEnabled bool `json:"roi_enabled" db:"roi_enabled"`
	// 启用
	Enabled bool `json:"enabled" db:"enabled"`
	// 目标帧率
	TargetFps int64 `json:"target_fps" db:"target_fps"`
	// 逗留时间
	DwellDuration *int64 `json:"dwell_duration" db:"dwell_duration"`
	// 创建时间
	CreatedTime *time.Time `json:"created_time" db:"created_time"`
	// 更新时间
	UpdatedTime  *time.Time `json:"updated_time" db:"updated_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Devices) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case devices.FieldRoiEnabled, devices.FieldEnabled:
			values[i] = new(sql.NullBool)
		case devices.FieldRoiRotationAngle:
			values[i] = new(sql.NullFloat64)
		case devices.FieldID, devices.FieldFuncType, devices.FieldDisplayWidth, devices.FieldDisplayHeight, devices.FieldRoiX, devices.FieldRoiY, devices.FieldRoiWidth, devices.FieldRoiHeight, devices.FieldTargetFps, devices.FieldDwellDuration:
			values[i] = new(sql.NullInt64)
		case devices.FieldName, devices.FieldURL, devices.FieldLocation:
			values[i] = new(sql.NullString)
		case devices.FieldCreatedTime, devices.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		case devices.FieldTenantID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Devices fields.
func (d *Devices) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case devices.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int64(value.Int64)
		case devices.FieldTenantID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				d.TenantID = *value
			}
		case devices.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = new(string)
				*d.Name = value.String
			}
		case devices.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				d.URL = value.String
			}
		case devices.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				d.Location = value.String
			}
		case devices.FieldFuncType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field func_type", values[i])
			} else if value.Valid {
				d.FuncType = int(value.Int64)
			}
		case devices.FieldDisplayWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_width", values[i])
			} else if value.Valid {
				d.DisplayWidth = new(uint16)
				*d.DisplayWidth = uint16(value.Int64)
			}
		case devices.FieldDisplayHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_height", values[i])
			} else if value.Valid {
				d.DisplayHeight = new(uint16)
				*d.DisplayHeight = uint16(value.Int64)
			}
		case devices.FieldRoiX:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field roi_x", values[i])
			} else if value.Valid {
				d.RoiX = new(uint16)
				*d.RoiX = uint16(value.Int64)
			}
		case devices.FieldRoiY:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field roi_y", values[i])
			} else if value.Valid {
				d.RoiY = new(uint16)
				*d.RoiY = uint16(value.Int64)
			}
		case devices.FieldRoiWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field roi_width", values[i])
			} else if value.Valid {
				d.RoiWidth = new(uint16)
				*d.RoiWidth = uint16(value.Int64)
			}
		case devices.FieldRoiHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field roi_height", values[i])
			} else if value.Valid {
				d.RoiHeight = new(uint16)
				*d.RoiHeight = uint16(value.Int64)
			}
		case devices.FieldRoiRotationAngle:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field roi_rotation_angle", values[i])
			} else if value.Valid {
				d.RoiRotationAngle = new(float64)
				*d.RoiRotationAngle = value.Float64
			}
		case devices.FieldRoiEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field roi_enabled", values[i])
			} else if value.Valid {
				d.RoiEnabled = value.Bool
			}
		case devices.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				d.Enabled = value.Bool
			}
		case devices.FieldTargetFps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_fps", values[i])
			} else if value.Valid {
				d.TargetFps = value.Int64
			}
		case devices.FieldDwellDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dwell_duration", values[i])
			} else if value.Valid {
				d.DwellDuration = new(int64)
				*d.DwellDuration = value.Int64
			}
		case devices.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				d.CreatedTime = new(time.Time)
				*d.CreatedTime = value.Time
			}
		case devices.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				d.UpdatedTime = new(time.Time)
				*d.UpdatedTime = value.Time
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Devices.
// This includes values selected through modifiers, order, etc.
func (d *Devices) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// Update returns a builder for updating this Devices.
// Note that you need to call Devices.Unwrap() before calling this method if this Devices
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Devices) Update() *DevicesUpdateOne {
	return NewDevicesClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Devices entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Devices) Unwrap() *Devices {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("genclients: Devices is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Devices) String() string {
	var builder strings.Builder
	builder.WriteString("Devices(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", d.TenantID))
	builder.WriteString(", ")
	if v := d.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(d.URL)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(d.Location)
	builder.WriteString(", ")
	builder.WriteString("func_type=")
	builder.WriteString(fmt.Sprintf("%v", d.FuncType))
	builder.WriteString(", ")
	if v := d.DisplayWidth; v != nil {
		builder.WriteString("display_width=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.DisplayHeight; v != nil {
		builder.WriteString("display_height=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.RoiX; v != nil {
		builder.WriteString("roi_x=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.RoiY; v != nil {
		builder.WriteString("roi_y=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.RoiWidth; v != nil {
		builder.WriteString("roi_width=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.RoiHeight; v != nil {
		builder.WriteString("roi_height=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.RoiRotationAngle; v != nil {
		builder.WriteString("roi_rotation_angle=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("roi_enabled=")
	builder.WriteString(fmt.Sprintf("%v", d.RoiEnabled))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", d.Enabled))
	builder.WriteString(", ")
	builder.WriteString("target_fps=")
	builder.WriteString(fmt.Sprintf("%v", d.TargetFps))
	builder.WriteString(", ")
	if v := d.DwellDuration; v != nil {
		builder.WriteString("dwell_duration=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := d.UpdatedTime; v != nil {
		builder.WriteString("updated_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// DevicesSlice is a parsable slice of Devices.
type DevicesSlice []*Devices
