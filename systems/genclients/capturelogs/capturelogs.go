// Code generated by ent, DO NOT EDIT.

package capturelogs

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the capturelogs type in the database.
	Label = "capture_logs"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldMatchedProfileID holds the string denoting the matched_profile_id field in the database.
	FieldMatchedProfileID = "matched_profile_id"
	// FieldFuncType holds the string denoting the func_type field in the database.
	FieldFuncType = "func_type"
	// FieldMatchScore holds the string denoting the match_score field in the database.
	FieldMatchScore = "match_score"
	// FieldHasAlert holds the string denoting the has_alert field in the database.
	FieldHasAlert = "has_alert"
	// FieldDeviceName holds the string denoting the device_name field in the database.
	FieldDeviceName = "device_name"
	// FieldDeviceLocation holds the string denoting the device_location field in the database.
	FieldDeviceLocation = "device_location"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldCaptureImageURL holds the string denoting the capture_image_url field in the database.
	FieldCaptureImageURL = "capture_image_url"
	// FieldCaptureTime holds the string denoting the capture_time field in the database.
	FieldCaptureTime = "capture_time"
	// Table holds the table name of the capturelogs in the database.
	Table = "CaptureLogs"
)

// Columns holds all SQL columns for capturelogs fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldDeviceID,
	FieldMatchedProfileID,
	FieldFuncType,
	FieldMatchScore,
	FieldHasAlert,
	FieldDeviceName,
	FieldDeviceLocation,
	FieldContent,
	FieldCaptureImageURL,
	FieldCaptureTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultFuncType holds the default value on creation for the "func_type" field.
	DefaultFuncType int8
	// DefaultMatchScore holds the default value on creation for the "match_score" field.
	DefaultMatchScore float32
	// DefaultHasAlert holds the default value on creation for the "has_alert" field.
	DefaultHasAlert bool
	// DefaultCaptureImageURL holds the default value on creation for the "capture_image_url" field.
	DefaultCaptureImageURL string
	// CaptureImageURLValidator is a validator for the "capture_image_url" field. It is called by the builders before save.
	CaptureImageURLValidator func(string) error
)

// OrderOption defines the ordering options for the CaptureLogs queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByMatchedProfileID orders the results by the matched_profile_id field.
func ByMatchedProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchedProfileID, opts...).ToFunc()
}

// ByFuncType orders the results by the func_type field.
func ByFuncType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFuncType, opts...).ToFunc()
}

// ByMatchScore orders the results by the match_score field.
func ByMatchScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchScore, opts...).ToFunc()
}

// ByHasAlert orders the results by the has_alert field.
func ByHasAlert(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasAlert, opts...).ToFunc()
}

// ByDeviceName orders the results by the device_name field.
func ByDeviceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceName, opts...).ToFunc()
}

// ByDeviceLocation orders the results by the device_location field.
func ByDeviceLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceLocation, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByCaptureImageURL orders the results by the capture_image_url field.
func ByCaptureImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaptureImageURL, opts...).ToFunc()
}

// ByCaptureTime orders the results by the capture_time field.
func ByCaptureTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaptureTime, opts...).ToFunc()
}
