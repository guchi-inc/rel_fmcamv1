// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/govstreet"
	"fmcam/systems/genclients/predicate"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GovStreetUpdate is the builder for updating GovStreet entities.
type GovStreetUpdate struct {
	config
	hooks    []Hook
	mutation *GovStreetMutation
}

// Where appends a list predicates to the GovStreetUpdate builder.
func (gsu *GovStreetUpdate) Where(ps ...predicate.GovStreet) *GovStreetUpdate {
	gsu.mutation.Where(ps...)
	return gsu
}

// SetCode sets the "code" field.
func (gsu *GovStreetUpdate) SetCode(s string) *GovStreetUpdate {
	gsu.mutation.SetCode(s)
	return gsu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (gsu *GovStreetUpdate) SetNillableCode(s *string) *GovStreetUpdate {
	if s != nil {
		gsu.SetCode(*s)
	}
	return gsu
}

// SetName sets the "name" field.
func (gsu *GovStreetUpdate) SetName(s string) *GovStreetUpdate {
	gsu.mutation.SetName(s)
	return gsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gsu *GovStreetUpdate) SetNillableName(s *string) *GovStreetUpdate {
	if s != nil {
		gsu.SetName(*s)
	}
	return gsu
}

// SetProvinceCode sets the "province_code" field.
func (gsu *GovStreetUpdate) SetProvinceCode(s string) *GovStreetUpdate {
	gsu.mutation.SetProvinceCode(s)
	return gsu
}

// SetNillableProvinceCode sets the "province_code" field if the given value is not nil.
func (gsu *GovStreetUpdate) SetNillableProvinceCode(s *string) *GovStreetUpdate {
	if s != nil {
		gsu.SetProvinceCode(*s)
	}
	return gsu
}

// SetCityCode sets the "city_code" field.
func (gsu *GovStreetUpdate) SetCityCode(s string) *GovStreetUpdate {
	gsu.mutation.SetCityCode(s)
	return gsu
}

// SetNillableCityCode sets the "city_code" field if the given value is not nil.
func (gsu *GovStreetUpdate) SetNillableCityCode(s *string) *GovStreetUpdate {
	if s != nil {
		gsu.SetCityCode(*s)
	}
	return gsu
}

// SetAreaCode sets the "area_code" field.
func (gsu *GovStreetUpdate) SetAreaCode(s string) *GovStreetUpdate {
	gsu.mutation.SetAreaCode(s)
	return gsu
}

// SetNillableAreaCode sets the "area_code" field if the given value is not nil.
func (gsu *GovStreetUpdate) SetNillableAreaCode(s *string) *GovStreetUpdate {
	if s != nil {
		gsu.SetAreaCode(*s)
	}
	return gsu
}

// SetCreator sets the "creator" field.
func (gsu *GovStreetUpdate) SetCreator(s string) *GovStreetUpdate {
	gsu.mutation.SetCreator(s)
	return gsu
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (gsu *GovStreetUpdate) SetNillableCreator(s *string) *GovStreetUpdate {
	if s != nil {
		gsu.SetCreator(*s)
	}
	return gsu
}

// SetDeleteFlag sets the "delete_flag" field.
func (gsu *GovStreetUpdate) SetDeleteFlag(s string) *GovStreetUpdate {
	gsu.mutation.SetDeleteFlag(s)
	return gsu
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (gsu *GovStreetUpdate) SetNillableDeleteFlag(s *string) *GovStreetUpdate {
	if s != nil {
		gsu.SetDeleteFlag(*s)
	}
	return gsu
}

// Mutation returns the GovStreetMutation object of the builder.
func (gsu *GovStreetUpdate) Mutation() *GovStreetMutation {
	return gsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gsu *GovStreetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gsu.sqlSave, gsu.mutation, gsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gsu *GovStreetUpdate) SaveX(ctx context.Context) int {
	affected, err := gsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gsu *GovStreetUpdate) Exec(ctx context.Context) error {
	_, err := gsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsu *GovStreetUpdate) ExecX(ctx context.Context) {
	if err := gsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gsu *GovStreetUpdate) check() error {
	if v, ok := gsu.mutation.Code(); ok {
		if err := govstreet.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.code": %w`, err)}
		}
	}
	if v, ok := gsu.mutation.Name(); ok {
		if err := govstreet.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.name": %w`, err)}
		}
	}
	if v, ok := gsu.mutation.ProvinceCode(); ok {
		if err := govstreet.ProvinceCodeValidator(v); err != nil {
			return &ValidationError{Name: "province_code", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.province_code": %w`, err)}
		}
	}
	if v, ok := gsu.mutation.CityCode(); ok {
		if err := govstreet.CityCodeValidator(v); err != nil {
			return &ValidationError{Name: "city_code", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.city_code": %w`, err)}
		}
	}
	if v, ok := gsu.mutation.AreaCode(); ok {
		if err := govstreet.AreaCodeValidator(v); err != nil {
			return &ValidationError{Name: "area_code", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.area_code": %w`, err)}
		}
	}
	if v, ok := gsu.mutation.Creator(); ok {
		if err := govstreet.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.creator": %w`, err)}
		}
	}
	if v, ok := gsu.mutation.DeleteFlag(); ok {
		if err := govstreet.DeleteFlagValidator(v); err != nil {
			return &ValidationError{Name: "delete_flag", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.delete_flag": %w`, err)}
		}
	}
	return nil
}

func (gsu *GovStreetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(govstreet.Table, govstreet.Columns, sqlgraph.NewFieldSpec(govstreet.FieldID, field.TypeInt64))
	if ps := gsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsu.mutation.Code(); ok {
		_spec.SetField(govstreet.FieldCode, field.TypeString, value)
	}
	if value, ok := gsu.mutation.Name(); ok {
		_spec.SetField(govstreet.FieldName, field.TypeString, value)
	}
	if value, ok := gsu.mutation.ProvinceCode(); ok {
		_spec.SetField(govstreet.FieldProvinceCode, field.TypeString, value)
	}
	if value, ok := gsu.mutation.CityCode(); ok {
		_spec.SetField(govstreet.FieldCityCode, field.TypeString, value)
	}
	if value, ok := gsu.mutation.AreaCode(); ok {
		_spec.SetField(govstreet.FieldAreaCode, field.TypeString, value)
	}
	if value, ok := gsu.mutation.Creator(); ok {
		_spec.SetField(govstreet.FieldCreator, field.TypeString, value)
	}
	if value, ok := gsu.mutation.DeleteFlag(); ok {
		_spec.SetField(govstreet.FieldDeleteFlag, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{govstreet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gsu.mutation.done = true
	return n, nil
}

// GovStreetUpdateOne is the builder for updating a single GovStreet entity.
type GovStreetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GovStreetMutation
}

// SetCode sets the "code" field.
func (gsuo *GovStreetUpdateOne) SetCode(s string) *GovStreetUpdateOne {
	gsuo.mutation.SetCode(s)
	return gsuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (gsuo *GovStreetUpdateOne) SetNillableCode(s *string) *GovStreetUpdateOne {
	if s != nil {
		gsuo.SetCode(*s)
	}
	return gsuo
}

// SetName sets the "name" field.
func (gsuo *GovStreetUpdateOne) SetName(s string) *GovStreetUpdateOne {
	gsuo.mutation.SetName(s)
	return gsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gsuo *GovStreetUpdateOne) SetNillableName(s *string) *GovStreetUpdateOne {
	if s != nil {
		gsuo.SetName(*s)
	}
	return gsuo
}

// SetProvinceCode sets the "province_code" field.
func (gsuo *GovStreetUpdateOne) SetProvinceCode(s string) *GovStreetUpdateOne {
	gsuo.mutation.SetProvinceCode(s)
	return gsuo
}

// SetNillableProvinceCode sets the "province_code" field if the given value is not nil.
func (gsuo *GovStreetUpdateOne) SetNillableProvinceCode(s *string) *GovStreetUpdateOne {
	if s != nil {
		gsuo.SetProvinceCode(*s)
	}
	return gsuo
}

// SetCityCode sets the "city_code" field.
func (gsuo *GovStreetUpdateOne) SetCityCode(s string) *GovStreetUpdateOne {
	gsuo.mutation.SetCityCode(s)
	return gsuo
}

// SetNillableCityCode sets the "city_code" field if the given value is not nil.
func (gsuo *GovStreetUpdateOne) SetNillableCityCode(s *string) *GovStreetUpdateOne {
	if s != nil {
		gsuo.SetCityCode(*s)
	}
	return gsuo
}

// SetAreaCode sets the "area_code" field.
func (gsuo *GovStreetUpdateOne) SetAreaCode(s string) *GovStreetUpdateOne {
	gsuo.mutation.SetAreaCode(s)
	return gsuo
}

// SetNillableAreaCode sets the "area_code" field if the given value is not nil.
func (gsuo *GovStreetUpdateOne) SetNillableAreaCode(s *string) *GovStreetUpdateOne {
	if s != nil {
		gsuo.SetAreaCode(*s)
	}
	return gsuo
}

// SetCreator sets the "creator" field.
func (gsuo *GovStreetUpdateOne) SetCreator(s string) *GovStreetUpdateOne {
	gsuo.mutation.SetCreator(s)
	return gsuo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (gsuo *GovStreetUpdateOne) SetNillableCreator(s *string) *GovStreetUpdateOne {
	if s != nil {
		gsuo.SetCreator(*s)
	}
	return gsuo
}

// SetDeleteFlag sets the "delete_flag" field.
func (gsuo *GovStreetUpdateOne) SetDeleteFlag(s string) *GovStreetUpdateOne {
	gsuo.mutation.SetDeleteFlag(s)
	return gsuo
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (gsuo *GovStreetUpdateOne) SetNillableDeleteFlag(s *string) *GovStreetUpdateOne {
	if s != nil {
		gsuo.SetDeleteFlag(*s)
	}
	return gsuo
}

// Mutation returns the GovStreetMutation object of the builder.
func (gsuo *GovStreetUpdateOne) Mutation() *GovStreetMutation {
	return gsuo.mutation
}

// Where appends a list predicates to the GovStreetUpdate builder.
func (gsuo *GovStreetUpdateOne) Where(ps ...predicate.GovStreet) *GovStreetUpdateOne {
	gsuo.mutation.Where(ps...)
	return gsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gsuo *GovStreetUpdateOne) Select(field string, fields ...string) *GovStreetUpdateOne {
	gsuo.fields = append([]string{field}, fields...)
	return gsuo
}

// Save executes the query and returns the updated GovStreet entity.
func (gsuo *GovStreetUpdateOne) Save(ctx context.Context) (*GovStreet, error) {
	return withHooks(ctx, gsuo.sqlSave, gsuo.mutation, gsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gsuo *GovStreetUpdateOne) SaveX(ctx context.Context) *GovStreet {
	node, err := gsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gsuo *GovStreetUpdateOne) Exec(ctx context.Context) error {
	_, err := gsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsuo *GovStreetUpdateOne) ExecX(ctx context.Context) {
	if err := gsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gsuo *GovStreetUpdateOne) check() error {
	if v, ok := gsuo.mutation.Code(); ok {
		if err := govstreet.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.code": %w`, err)}
		}
	}
	if v, ok := gsuo.mutation.Name(); ok {
		if err := govstreet.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.name": %w`, err)}
		}
	}
	if v, ok := gsuo.mutation.ProvinceCode(); ok {
		if err := govstreet.ProvinceCodeValidator(v); err != nil {
			return &ValidationError{Name: "province_code", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.province_code": %w`, err)}
		}
	}
	if v, ok := gsuo.mutation.CityCode(); ok {
		if err := govstreet.CityCodeValidator(v); err != nil {
			return &ValidationError{Name: "city_code", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.city_code": %w`, err)}
		}
	}
	if v, ok := gsuo.mutation.AreaCode(); ok {
		if err := govstreet.AreaCodeValidator(v); err != nil {
			return &ValidationError{Name: "area_code", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.area_code": %w`, err)}
		}
	}
	if v, ok := gsuo.mutation.Creator(); ok {
		if err := govstreet.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.creator": %w`, err)}
		}
	}
	if v, ok := gsuo.mutation.DeleteFlag(); ok {
		if err := govstreet.DeleteFlagValidator(v); err != nil {
			return &ValidationError{Name: "delete_flag", err: fmt.Errorf(`genclients: validator failed for field "GovStreet.delete_flag": %w`, err)}
		}
	}
	return nil
}

func (gsuo *GovStreetUpdateOne) sqlSave(ctx context.Context) (_node *GovStreet, err error) {
	if err := gsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(govstreet.Table, govstreet.Columns, sqlgraph.NewFieldSpec(govstreet.FieldID, field.TypeInt64))
	id, ok := gsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "GovStreet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, govstreet.FieldID)
		for _, f := range fields {
			if !govstreet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != govstreet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsuo.mutation.Code(); ok {
		_spec.SetField(govstreet.FieldCode, field.TypeString, value)
	}
	if value, ok := gsuo.mutation.Name(); ok {
		_spec.SetField(govstreet.FieldName, field.TypeString, value)
	}
	if value, ok := gsuo.mutation.ProvinceCode(); ok {
		_spec.SetField(govstreet.FieldProvinceCode, field.TypeString, value)
	}
	if value, ok := gsuo.mutation.CityCode(); ok {
		_spec.SetField(govstreet.FieldCityCode, field.TypeString, value)
	}
	if value, ok := gsuo.mutation.AreaCode(); ok {
		_spec.SetField(govstreet.FieldAreaCode, field.TypeString, value)
	}
	if value, ok := gsuo.mutation.Creator(); ok {
		_spec.SetField(govstreet.FieldCreator, field.TypeString, value)
	}
	if value, ok := gsuo.mutation.DeleteFlag(); ok {
		_spec.SetField(govstreet.FieldDeleteFlag, field.TypeString, value)
	}
	_node = &GovStreet{config: gsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{govstreet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gsuo.mutation.done = true
	return _node, nil
}
