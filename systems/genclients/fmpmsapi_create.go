// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/fmpmsapi"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FMPMSApiCreate is the builder for creating a FMPMSApi entity.
type FMPMSApiCreate struct {
	config
	mutation *FMPMSApiMutation
	hooks    []Hook
}

// SetPmsName sets the "pms_name" field.
func (fac *FMPMSApiCreate) SetPmsName(s string) *FMPMSApiCreate {
	fac.mutation.SetPmsName(s)
	return fac
}

// SetNillablePmsName sets the "pms_name" field if the given value is not nil.
func (fac *FMPMSApiCreate) SetNillablePmsName(s *string) *FMPMSApiCreate {
	if s != nil {
		fac.SetPmsName(*s)
	}
	return fac
}

// SetPmsAPI sets the "pms_api" field.
func (fac *FMPMSApiCreate) SetPmsAPI(s string) *FMPMSApiCreate {
	fac.mutation.SetPmsAPI(s)
	return fac
}

// SetNillablePmsAPI sets the "pms_api" field if the given value is not nil.
func (fac *FMPMSApiCreate) SetNillablePmsAPI(s *string) *FMPMSApiCreate {
	if s != nil {
		fac.SetPmsAPI(*s)
	}
	return fac
}

// SetEnabled sets the "enabled" field.
func (fac *FMPMSApiCreate) SetEnabled(b bool) *FMPMSApiCreate {
	fac.mutation.SetEnabled(b)
	return fac
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (fac *FMPMSApiCreate) SetNillableEnabled(b *bool) *FMPMSApiCreate {
	if b != nil {
		fac.SetEnabled(*b)
	}
	return fac
}

// SetContact sets the "contact" field.
func (fac *FMPMSApiCreate) SetContact(s string) *FMPMSApiCreate {
	fac.mutation.SetContact(s)
	return fac
}

// SetNillableContact sets the "contact" field if the given value is not nil.
func (fac *FMPMSApiCreate) SetNillableContact(s *string) *FMPMSApiCreate {
	if s != nil {
		fac.SetContact(*s)
	}
	return fac
}

// SetPhonenum sets the "phonenum" field.
func (fac *FMPMSApiCreate) SetPhonenum(s string) *FMPMSApiCreate {
	fac.mutation.SetPhonenum(s)
	return fac
}

// SetNillablePhonenum sets the "phonenum" field if the given value is not nil.
func (fac *FMPMSApiCreate) SetNillablePhonenum(s *string) *FMPMSApiCreate {
	if s != nil {
		fac.SetPhonenum(*s)
	}
	return fac
}

// SetDescription sets the "description" field.
func (fac *FMPMSApiCreate) SetDescription(s string) *FMPMSApiCreate {
	fac.mutation.SetDescription(s)
	return fac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fac *FMPMSApiCreate) SetNillableDescription(s *string) *FMPMSApiCreate {
	if s != nil {
		fac.SetDescription(*s)
	}
	return fac
}

// SetDeleteFlag sets the "delete_flag" field.
func (fac *FMPMSApiCreate) SetDeleteFlag(s string) *FMPMSApiCreate {
	fac.mutation.SetDeleteFlag(s)
	return fac
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (fac *FMPMSApiCreate) SetNillableDeleteFlag(s *string) *FMPMSApiCreate {
	if s != nil {
		fac.SetDeleteFlag(*s)
	}
	return fac
}

// SetCreator sets the "creator" field.
func (fac *FMPMSApiCreate) SetCreator(s string) *FMPMSApiCreate {
	fac.mutation.SetCreator(s)
	return fac
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (fac *FMPMSApiCreate) SetNillableCreator(s *string) *FMPMSApiCreate {
	if s != nil {
		fac.SetCreator(*s)
	}
	return fac
}

// SetCreatedTime sets the "created_time" field.
func (fac *FMPMSApiCreate) SetCreatedTime(t time.Time) *FMPMSApiCreate {
	fac.mutation.SetCreatedTime(t)
	return fac
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fac *FMPMSApiCreate) SetNillableCreatedTime(t *time.Time) *FMPMSApiCreate {
	if t != nil {
		fac.SetCreatedTime(*t)
	}
	return fac
}

// SetUpdatedTime sets the "updated_time" field.
func (fac *FMPMSApiCreate) SetUpdatedTime(t time.Time) *FMPMSApiCreate {
	fac.mutation.SetUpdatedTime(t)
	return fac
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (fac *FMPMSApiCreate) SetNillableUpdatedTime(t *time.Time) *FMPMSApiCreate {
	if t != nil {
		fac.SetUpdatedTime(*t)
	}
	return fac
}

// SetID sets the "id" field.
func (fac *FMPMSApiCreate) SetID(i int64) *FMPMSApiCreate {
	fac.mutation.SetID(i)
	return fac
}

// Mutation returns the FMPMSApiMutation object of the builder.
func (fac *FMPMSApiCreate) Mutation() *FMPMSApiMutation {
	return fac.mutation
}

// Save creates the FMPMSApi in the database.
func (fac *FMPMSApiCreate) Save(ctx context.Context) (*FMPMSApi, error) {
	fac.defaults()
	return withHooks(ctx, fac.sqlSave, fac.mutation, fac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fac *FMPMSApiCreate) SaveX(ctx context.Context) *FMPMSApi {
	v, err := fac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fac *FMPMSApiCreate) Exec(ctx context.Context) error {
	_, err := fac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fac *FMPMSApiCreate) ExecX(ctx context.Context) {
	if err := fac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fac *FMPMSApiCreate) defaults() {
	if _, ok := fac.mutation.PmsName(); !ok {
		v := fmpmsapi.DefaultPmsName
		fac.mutation.SetPmsName(v)
	}
	if _, ok := fac.mutation.PmsAPI(); !ok {
		v := fmpmsapi.DefaultPmsAPI
		fac.mutation.SetPmsAPI(v)
	}
	if _, ok := fac.mutation.Enabled(); !ok {
		v := fmpmsapi.DefaultEnabled
		fac.mutation.SetEnabled(v)
	}
	if _, ok := fac.mutation.Contact(); !ok {
		v := fmpmsapi.DefaultContact
		fac.mutation.SetContact(v)
	}
	if _, ok := fac.mutation.Phonenum(); !ok {
		v := fmpmsapi.DefaultPhonenum
		fac.mutation.SetPhonenum(v)
	}
	if _, ok := fac.mutation.Description(); !ok {
		v := fmpmsapi.DefaultDescription
		fac.mutation.SetDescription(v)
	}
	if _, ok := fac.mutation.DeleteFlag(); !ok {
		v := fmpmsapi.DefaultDeleteFlag
		fac.mutation.SetDeleteFlag(v)
	}
	if _, ok := fac.mutation.Creator(); !ok {
		v := fmpmsapi.DefaultCreator
		fac.mutation.SetCreator(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fac *FMPMSApiCreate) check() error {
	if _, ok := fac.mutation.PmsName(); !ok {
		return &ValidationError{Name: "pms_name", err: errors.New(`genclients: missing required field "FMPMSApi.pms_name"`)}
	}
	if v, ok := fac.mutation.PmsName(); ok {
		if err := fmpmsapi.PmsNameValidator(v); err != nil {
			return &ValidationError{Name: "pms_name", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.pms_name": %w`, err)}
		}
	}
	if _, ok := fac.mutation.PmsAPI(); !ok {
		return &ValidationError{Name: "pms_api", err: errors.New(`genclients: missing required field "FMPMSApi.pms_api"`)}
	}
	if v, ok := fac.mutation.PmsAPI(); ok {
		if err := fmpmsapi.PmsAPIValidator(v); err != nil {
			return &ValidationError{Name: "pms_api", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.pms_api": %w`, err)}
		}
	}
	if _, ok := fac.mutation.Contact(); !ok {
		return &ValidationError{Name: "contact", err: errors.New(`genclients: missing required field "FMPMSApi.contact"`)}
	}
	if v, ok := fac.mutation.Contact(); ok {
		if err := fmpmsapi.ContactValidator(v); err != nil {
			return &ValidationError{Name: "contact", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.contact": %w`, err)}
		}
	}
	if v, ok := fac.mutation.Phonenum(); ok {
		if err := fmpmsapi.PhonenumValidator(v); err != nil {
			return &ValidationError{Name: "phonenum", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.phonenum": %w`, err)}
		}
	}
	if v, ok := fac.mutation.Description(); ok {
		if err := fmpmsapi.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.description": %w`, err)}
		}
	}
	if v, ok := fac.mutation.DeleteFlag(); ok {
		if err := fmpmsapi.DeleteFlagValidator(v); err != nil {
			return &ValidationError{Name: "delete_flag", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.delete_flag": %w`, err)}
		}
	}
	if v, ok := fac.mutation.Creator(); ok {
		if err := fmpmsapi.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.creator": %w`, err)}
		}
	}
	return nil
}

func (fac *FMPMSApiCreate) sqlSave(ctx context.Context) (*FMPMSApi, error) {
	if err := fac.check(); err != nil {
		return nil, err
	}
	_node, _spec := fac.createSpec()
	if err := sqlgraph.CreateNode(ctx, fac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fac.mutation.id = &_node.ID
	fac.mutation.done = true
	return _node, nil
}

func (fac *FMPMSApiCreate) createSpec() (*FMPMSApi, *sqlgraph.CreateSpec) {
	var (
		_node = &FMPMSApi{config: fac.config}
		_spec = sqlgraph.NewCreateSpec(fmpmsapi.Table, sqlgraph.NewFieldSpec(fmpmsapi.FieldID, field.TypeInt64))
	)
	if id, ok := fac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fac.mutation.PmsName(); ok {
		_spec.SetField(fmpmsapi.FieldPmsName, field.TypeString, value)
		_node.PmsName = value
	}
	if value, ok := fac.mutation.PmsAPI(); ok {
		_spec.SetField(fmpmsapi.FieldPmsAPI, field.TypeString, value)
		_node.PmsAPI = value
	}
	if value, ok := fac.mutation.Enabled(); ok {
		_spec.SetField(fmpmsapi.FieldEnabled, field.TypeBool, value)
		_node.Enabled = &value
	}
	if value, ok := fac.mutation.Contact(); ok {
		_spec.SetField(fmpmsapi.FieldContact, field.TypeString, value)
		_node.Contact = value
	}
	if value, ok := fac.mutation.Phonenum(); ok {
		_spec.SetField(fmpmsapi.FieldPhonenum, field.TypeString, value)
		_node.Phonenum = &value
	}
	if value, ok := fac.mutation.Description(); ok {
		_spec.SetField(fmpmsapi.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := fac.mutation.DeleteFlag(); ok {
		_spec.SetField(fmpmsapi.FieldDeleteFlag, field.TypeString, value)
		_node.DeleteFlag = &value
	}
	if value, ok := fac.mutation.Creator(); ok {
		_spec.SetField(fmpmsapi.FieldCreator, field.TypeString, value)
		_node.Creator = &value
	}
	if value, ok := fac.mutation.CreatedTime(); ok {
		_spec.SetField(fmpmsapi.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	if value, ok := fac.mutation.UpdatedTime(); ok {
		_spec.SetField(fmpmsapi.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = &value
	}
	return _node, _spec
}

// FMPMSApiCreateBulk is the builder for creating many FMPMSApi entities in bulk.
type FMPMSApiCreateBulk struct {
	config
	err      error
	builders []*FMPMSApiCreate
}

// Save creates the FMPMSApi entities in the database.
func (facb *FMPMSApiCreateBulk) Save(ctx context.Context) ([]*FMPMSApi, error) {
	if facb.err != nil {
		return nil, facb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(facb.builders))
	nodes := make([]*FMPMSApi, len(facb.builders))
	mutators := make([]Mutator, len(facb.builders))
	for i := range facb.builders {
		func(i int, root context.Context) {
			builder := facb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FMPMSApiMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, facb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, facb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, facb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (facb *FMPMSApiCreateBulk) SaveX(ctx context.Context) []*FMPMSApi {
	v, err := facb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (facb *FMPMSApiCreateBulk) Exec(ctx context.Context) error {
	_, err := facb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (facb *FMPMSApiCreateBulk) ExecX(ctx context.Context) {
	if err := facb.Exec(ctx); err != nil {
		panic(err)
	}
}
