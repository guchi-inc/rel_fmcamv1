// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/fmalertgroup"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// FmAlertGroup is the model entity for the FmAlertGroup schema.
type FmAlertGroup struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// 组名
	GroupName string `json:"group_name"  db:"group_name"`
	// 租户号
	TenantID uuid.UUID `json:"tenant_id"  db:"tenant_id"`
	// 组类别
	GroupType int8 `json:"group_type" db:"group_type"`
	// 启用
	Enabled *bool `json:"enabled" db:"enabled"`
	// 定制化
	Customization string `json:"customization"  db:"customization"`
	// 描述
	Description string `json:"description"  db:"description"`
	// 操作员
	Creator string `json:"creator"  db:"creator"`
	// 启用户
	UniqEnabledGroup *string `json:"uniq_enabled_group,omitempty" db:"uniq_enabled_group"`
	// 创建时间
	CreatedTime *time.Time `json:"created_time,omitempty" db:"created_time"`
	// 更新时间
	UpdatedTime  *time.Time `json:"updated_time,omitempty" db:"updated_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FmAlertGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fmalertgroup.FieldEnabled:
			values[i] = new(sql.NullBool)
		case fmalertgroup.FieldID, fmalertgroup.FieldGroupType:
			values[i] = new(sql.NullInt64)
		case fmalertgroup.FieldGroupName, fmalertgroup.FieldCustomization, fmalertgroup.FieldDescription, fmalertgroup.FieldCreator, fmalertgroup.FieldUniqEnabledGroup:
			values[i] = new(sql.NullString)
		case fmalertgroup.FieldCreatedTime, fmalertgroup.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		case fmalertgroup.FieldTenantID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FmAlertGroup fields.
func (fag *FmAlertGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fmalertgroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fag.ID = int64(value.Int64)
		case fmalertgroup.FieldGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_name", values[i])
			} else if value.Valid {
				fag.GroupName = value.String
			}
		case fmalertgroup.FieldTenantID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				fag.TenantID = *value
			}
		case fmalertgroup.FieldGroupType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_type", values[i])
			} else if value.Valid {
				fag.GroupType = int8(value.Int64)
			}
		case fmalertgroup.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				fag.Enabled = new(bool)
				*fag.Enabled = value.Bool
			}
		case fmalertgroup.FieldCustomization:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customization", values[i])
			} else if value.Valid {
				fag.Customization = value.String
			}
		case fmalertgroup.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				fag.Description = value.String
			}
		case fmalertgroup.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				fag.Creator = value.String
			}
		case fmalertgroup.FieldUniqEnabledGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uniq_enabled_group", values[i])
			} else if value.Valid {
				fag.UniqEnabledGroup = new(string)
				*fag.UniqEnabledGroup = value.String
			}
		case fmalertgroup.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				fag.CreatedTime = new(time.Time)
				*fag.CreatedTime = value.Time
			}
		case fmalertgroup.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				fag.UpdatedTime = new(time.Time)
				*fag.UpdatedTime = value.Time
			}
		default:
			fag.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FmAlertGroup.
// This includes values selected through modifiers, order, etc.
func (fag *FmAlertGroup) Value(name string) (ent.Value, error) {
	return fag.selectValues.Get(name)
}

// Update returns a builder for updating this FmAlertGroup.
// Note that you need to call FmAlertGroup.Unwrap() before calling this method if this FmAlertGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (fag *FmAlertGroup) Update() *FmAlertGroupUpdateOne {
	return NewFmAlertGroupClient(fag.config).UpdateOne(fag)
}

// Unwrap unwraps the FmAlertGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fag *FmAlertGroup) Unwrap() *FmAlertGroup {
	_tx, ok := fag.config.driver.(*txDriver)
	if !ok {
		panic("genclients: FmAlertGroup is not a transactional entity")
	}
	fag.config.driver = _tx.drv
	return fag
}

// String implements the fmt.Stringer.
func (fag *FmAlertGroup) String() string {
	var builder strings.Builder
	builder.WriteString("FmAlertGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fag.ID))
	builder.WriteString("group_name=")
	builder.WriteString(fag.GroupName)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", fag.TenantID))
	builder.WriteString(", ")
	builder.WriteString("group_type=")
	builder.WriteString(fmt.Sprintf("%v", fag.GroupType))
	builder.WriteString(", ")
	if v := fag.Enabled; v != nil {
		builder.WriteString("enabled=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("customization=")
	builder.WriteString(fag.Customization)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fag.Description)
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fag.Creator)
	builder.WriteString(", ")
	if v := fag.UniqEnabledGroup; v != nil {
		builder.WriteString("uniq_enabled_group=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fag.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := fag.UpdatedTime; v != nil {
		builder.WriteString("updated_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// FmAlertGroups is a parsable slice of FmAlertGroup.
type FmAlertGroups []*FmAlertGroup
