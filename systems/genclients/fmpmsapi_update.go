// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/fmpmsapi"
	"fmcam/systems/genclients/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FMPMSApiUpdate is the builder for updating FMPMSApi entities.
type FMPMSApiUpdate struct {
	config
	hooks    []Hook
	mutation *FMPMSApiMutation
}

// Where appends a list predicates to the FMPMSApiUpdate builder.
func (fau *FMPMSApiUpdate) Where(ps ...predicate.FMPMSApi) *FMPMSApiUpdate {
	fau.mutation.Where(ps...)
	return fau
}

// SetPmsName sets the "pms_name" field.
func (fau *FMPMSApiUpdate) SetPmsName(s string) *FMPMSApiUpdate {
	fau.mutation.SetPmsName(s)
	return fau
}

// SetNillablePmsName sets the "pms_name" field if the given value is not nil.
func (fau *FMPMSApiUpdate) SetNillablePmsName(s *string) *FMPMSApiUpdate {
	if s != nil {
		fau.SetPmsName(*s)
	}
	return fau
}

// SetPmsAPI sets the "pms_api" field.
func (fau *FMPMSApiUpdate) SetPmsAPI(s string) *FMPMSApiUpdate {
	fau.mutation.SetPmsAPI(s)
	return fau
}

// SetNillablePmsAPI sets the "pms_api" field if the given value is not nil.
func (fau *FMPMSApiUpdate) SetNillablePmsAPI(s *string) *FMPMSApiUpdate {
	if s != nil {
		fau.SetPmsAPI(*s)
	}
	return fau
}

// SetEnabled sets the "enabled" field.
func (fau *FMPMSApiUpdate) SetEnabled(b bool) *FMPMSApiUpdate {
	fau.mutation.SetEnabled(b)
	return fau
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (fau *FMPMSApiUpdate) SetNillableEnabled(b *bool) *FMPMSApiUpdate {
	if b != nil {
		fau.SetEnabled(*b)
	}
	return fau
}

// ClearEnabled clears the value of the "enabled" field.
func (fau *FMPMSApiUpdate) ClearEnabled() *FMPMSApiUpdate {
	fau.mutation.ClearEnabled()
	return fau
}

// SetContact sets the "contact" field.
func (fau *FMPMSApiUpdate) SetContact(s string) *FMPMSApiUpdate {
	fau.mutation.SetContact(s)
	return fau
}

// SetNillableContact sets the "contact" field if the given value is not nil.
func (fau *FMPMSApiUpdate) SetNillableContact(s *string) *FMPMSApiUpdate {
	if s != nil {
		fau.SetContact(*s)
	}
	return fau
}

// SetPhonenum sets the "phonenum" field.
func (fau *FMPMSApiUpdate) SetPhonenum(s string) *FMPMSApiUpdate {
	fau.mutation.SetPhonenum(s)
	return fau
}

// SetNillablePhonenum sets the "phonenum" field if the given value is not nil.
func (fau *FMPMSApiUpdate) SetNillablePhonenum(s *string) *FMPMSApiUpdate {
	if s != nil {
		fau.SetPhonenum(*s)
	}
	return fau
}

// ClearPhonenum clears the value of the "phonenum" field.
func (fau *FMPMSApiUpdate) ClearPhonenum() *FMPMSApiUpdate {
	fau.mutation.ClearPhonenum()
	return fau
}

// SetDescription sets the "description" field.
func (fau *FMPMSApiUpdate) SetDescription(s string) *FMPMSApiUpdate {
	fau.mutation.SetDescription(s)
	return fau
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fau *FMPMSApiUpdate) SetNillableDescription(s *string) *FMPMSApiUpdate {
	if s != nil {
		fau.SetDescription(*s)
	}
	return fau
}

// ClearDescription clears the value of the "description" field.
func (fau *FMPMSApiUpdate) ClearDescription() *FMPMSApiUpdate {
	fau.mutation.ClearDescription()
	return fau
}

// SetDeleteFlag sets the "delete_flag" field.
func (fau *FMPMSApiUpdate) SetDeleteFlag(s string) *FMPMSApiUpdate {
	fau.mutation.SetDeleteFlag(s)
	return fau
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (fau *FMPMSApiUpdate) SetNillableDeleteFlag(s *string) *FMPMSApiUpdate {
	if s != nil {
		fau.SetDeleteFlag(*s)
	}
	return fau
}

// ClearDeleteFlag clears the value of the "delete_flag" field.
func (fau *FMPMSApiUpdate) ClearDeleteFlag() *FMPMSApiUpdate {
	fau.mutation.ClearDeleteFlag()
	return fau
}

// SetCreator sets the "creator" field.
func (fau *FMPMSApiUpdate) SetCreator(s string) *FMPMSApiUpdate {
	fau.mutation.SetCreator(s)
	return fau
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (fau *FMPMSApiUpdate) SetNillableCreator(s *string) *FMPMSApiUpdate {
	if s != nil {
		fau.SetCreator(*s)
	}
	return fau
}

// ClearCreator clears the value of the "creator" field.
func (fau *FMPMSApiUpdate) ClearCreator() *FMPMSApiUpdate {
	fau.mutation.ClearCreator()
	return fau
}

// SetCreatedTime sets the "created_time" field.
func (fau *FMPMSApiUpdate) SetCreatedTime(t time.Time) *FMPMSApiUpdate {
	fau.mutation.SetCreatedTime(t)
	return fau
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fau *FMPMSApiUpdate) SetNillableCreatedTime(t *time.Time) *FMPMSApiUpdate {
	if t != nil {
		fau.SetCreatedTime(*t)
	}
	return fau
}

// ClearCreatedTime clears the value of the "created_time" field.
func (fau *FMPMSApiUpdate) ClearCreatedTime() *FMPMSApiUpdate {
	fau.mutation.ClearCreatedTime()
	return fau
}

// SetUpdatedTime sets the "updated_time" field.
func (fau *FMPMSApiUpdate) SetUpdatedTime(t time.Time) *FMPMSApiUpdate {
	fau.mutation.SetUpdatedTime(t)
	return fau
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (fau *FMPMSApiUpdate) SetNillableUpdatedTime(t *time.Time) *FMPMSApiUpdate {
	if t != nil {
		fau.SetUpdatedTime(*t)
	}
	return fau
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (fau *FMPMSApiUpdate) ClearUpdatedTime() *FMPMSApiUpdate {
	fau.mutation.ClearUpdatedTime()
	return fau
}

// Mutation returns the FMPMSApiMutation object of the builder.
func (fau *FMPMSApiUpdate) Mutation() *FMPMSApiMutation {
	return fau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fau *FMPMSApiUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fau.sqlSave, fau.mutation, fau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fau *FMPMSApiUpdate) SaveX(ctx context.Context) int {
	affected, err := fau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fau *FMPMSApiUpdate) Exec(ctx context.Context) error {
	_, err := fau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fau *FMPMSApiUpdate) ExecX(ctx context.Context) {
	if err := fau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fau *FMPMSApiUpdate) check() error {
	if v, ok := fau.mutation.PmsName(); ok {
		if err := fmpmsapi.PmsNameValidator(v); err != nil {
			return &ValidationError{Name: "pms_name", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.pms_name": %w`, err)}
		}
	}
	if v, ok := fau.mutation.PmsAPI(); ok {
		if err := fmpmsapi.PmsAPIValidator(v); err != nil {
			return &ValidationError{Name: "pms_api", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.pms_api": %w`, err)}
		}
	}
	if v, ok := fau.mutation.Contact(); ok {
		if err := fmpmsapi.ContactValidator(v); err != nil {
			return &ValidationError{Name: "contact", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.contact": %w`, err)}
		}
	}
	if v, ok := fau.mutation.Phonenum(); ok {
		if err := fmpmsapi.PhonenumValidator(v); err != nil {
			return &ValidationError{Name: "phonenum", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.phonenum": %w`, err)}
		}
	}
	if v, ok := fau.mutation.Description(); ok {
		if err := fmpmsapi.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.description": %w`, err)}
		}
	}
	if v, ok := fau.mutation.DeleteFlag(); ok {
		if err := fmpmsapi.DeleteFlagValidator(v); err != nil {
			return &ValidationError{Name: "delete_flag", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.delete_flag": %w`, err)}
		}
	}
	if v, ok := fau.mutation.Creator(); ok {
		if err := fmpmsapi.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.creator": %w`, err)}
		}
	}
	return nil
}

func (fau *FMPMSApiUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fmpmsapi.Table, fmpmsapi.Columns, sqlgraph.NewFieldSpec(fmpmsapi.FieldID, field.TypeInt64))
	if ps := fau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fau.mutation.PmsName(); ok {
		_spec.SetField(fmpmsapi.FieldPmsName, field.TypeString, value)
	}
	if value, ok := fau.mutation.PmsAPI(); ok {
		_spec.SetField(fmpmsapi.FieldPmsAPI, field.TypeString, value)
	}
	if value, ok := fau.mutation.Enabled(); ok {
		_spec.SetField(fmpmsapi.FieldEnabled, field.TypeBool, value)
	}
	if fau.mutation.EnabledCleared() {
		_spec.ClearField(fmpmsapi.FieldEnabled, field.TypeBool)
	}
	if value, ok := fau.mutation.Contact(); ok {
		_spec.SetField(fmpmsapi.FieldContact, field.TypeString, value)
	}
	if value, ok := fau.mutation.Phonenum(); ok {
		_spec.SetField(fmpmsapi.FieldPhonenum, field.TypeString, value)
	}
	if fau.mutation.PhonenumCleared() {
		_spec.ClearField(fmpmsapi.FieldPhonenum, field.TypeString)
	}
	if value, ok := fau.mutation.Description(); ok {
		_spec.SetField(fmpmsapi.FieldDescription, field.TypeString, value)
	}
	if fau.mutation.DescriptionCleared() {
		_spec.ClearField(fmpmsapi.FieldDescription, field.TypeString)
	}
	if value, ok := fau.mutation.DeleteFlag(); ok {
		_spec.SetField(fmpmsapi.FieldDeleteFlag, field.TypeString, value)
	}
	if fau.mutation.DeleteFlagCleared() {
		_spec.ClearField(fmpmsapi.FieldDeleteFlag, field.TypeString)
	}
	if value, ok := fau.mutation.Creator(); ok {
		_spec.SetField(fmpmsapi.FieldCreator, field.TypeString, value)
	}
	if fau.mutation.CreatorCleared() {
		_spec.ClearField(fmpmsapi.FieldCreator, field.TypeString)
	}
	if value, ok := fau.mutation.CreatedTime(); ok {
		_spec.SetField(fmpmsapi.FieldCreatedTime, field.TypeTime, value)
	}
	if fau.mutation.CreatedTimeCleared() {
		_spec.ClearField(fmpmsapi.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := fau.mutation.UpdatedTime(); ok {
		_spec.SetField(fmpmsapi.FieldUpdatedTime, field.TypeTime, value)
	}
	if fau.mutation.UpdatedTimeCleared() {
		_spec.ClearField(fmpmsapi.FieldUpdatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fmpmsapi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fau.mutation.done = true
	return n, nil
}

// FMPMSApiUpdateOne is the builder for updating a single FMPMSApi entity.
type FMPMSApiUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FMPMSApiMutation
}

// SetPmsName sets the "pms_name" field.
func (fauo *FMPMSApiUpdateOne) SetPmsName(s string) *FMPMSApiUpdateOne {
	fauo.mutation.SetPmsName(s)
	return fauo
}

// SetNillablePmsName sets the "pms_name" field if the given value is not nil.
func (fauo *FMPMSApiUpdateOne) SetNillablePmsName(s *string) *FMPMSApiUpdateOne {
	if s != nil {
		fauo.SetPmsName(*s)
	}
	return fauo
}

// SetPmsAPI sets the "pms_api" field.
func (fauo *FMPMSApiUpdateOne) SetPmsAPI(s string) *FMPMSApiUpdateOne {
	fauo.mutation.SetPmsAPI(s)
	return fauo
}

// SetNillablePmsAPI sets the "pms_api" field if the given value is not nil.
func (fauo *FMPMSApiUpdateOne) SetNillablePmsAPI(s *string) *FMPMSApiUpdateOne {
	if s != nil {
		fauo.SetPmsAPI(*s)
	}
	return fauo
}

// SetEnabled sets the "enabled" field.
func (fauo *FMPMSApiUpdateOne) SetEnabled(b bool) *FMPMSApiUpdateOne {
	fauo.mutation.SetEnabled(b)
	return fauo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (fauo *FMPMSApiUpdateOne) SetNillableEnabled(b *bool) *FMPMSApiUpdateOne {
	if b != nil {
		fauo.SetEnabled(*b)
	}
	return fauo
}

// ClearEnabled clears the value of the "enabled" field.
func (fauo *FMPMSApiUpdateOne) ClearEnabled() *FMPMSApiUpdateOne {
	fauo.mutation.ClearEnabled()
	return fauo
}

// SetContact sets the "contact" field.
func (fauo *FMPMSApiUpdateOne) SetContact(s string) *FMPMSApiUpdateOne {
	fauo.mutation.SetContact(s)
	return fauo
}

// SetNillableContact sets the "contact" field if the given value is not nil.
func (fauo *FMPMSApiUpdateOne) SetNillableContact(s *string) *FMPMSApiUpdateOne {
	if s != nil {
		fauo.SetContact(*s)
	}
	return fauo
}

// SetPhonenum sets the "phonenum" field.
func (fauo *FMPMSApiUpdateOne) SetPhonenum(s string) *FMPMSApiUpdateOne {
	fauo.mutation.SetPhonenum(s)
	return fauo
}

// SetNillablePhonenum sets the "phonenum" field if the given value is not nil.
func (fauo *FMPMSApiUpdateOne) SetNillablePhonenum(s *string) *FMPMSApiUpdateOne {
	if s != nil {
		fauo.SetPhonenum(*s)
	}
	return fauo
}

// ClearPhonenum clears the value of the "phonenum" field.
func (fauo *FMPMSApiUpdateOne) ClearPhonenum() *FMPMSApiUpdateOne {
	fauo.mutation.ClearPhonenum()
	return fauo
}

// SetDescription sets the "description" field.
func (fauo *FMPMSApiUpdateOne) SetDescription(s string) *FMPMSApiUpdateOne {
	fauo.mutation.SetDescription(s)
	return fauo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fauo *FMPMSApiUpdateOne) SetNillableDescription(s *string) *FMPMSApiUpdateOne {
	if s != nil {
		fauo.SetDescription(*s)
	}
	return fauo
}

// ClearDescription clears the value of the "description" field.
func (fauo *FMPMSApiUpdateOne) ClearDescription() *FMPMSApiUpdateOne {
	fauo.mutation.ClearDescription()
	return fauo
}

// SetDeleteFlag sets the "delete_flag" field.
func (fauo *FMPMSApiUpdateOne) SetDeleteFlag(s string) *FMPMSApiUpdateOne {
	fauo.mutation.SetDeleteFlag(s)
	return fauo
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (fauo *FMPMSApiUpdateOne) SetNillableDeleteFlag(s *string) *FMPMSApiUpdateOne {
	if s != nil {
		fauo.SetDeleteFlag(*s)
	}
	return fauo
}

// ClearDeleteFlag clears the value of the "delete_flag" field.
func (fauo *FMPMSApiUpdateOne) ClearDeleteFlag() *FMPMSApiUpdateOne {
	fauo.mutation.ClearDeleteFlag()
	return fauo
}

// SetCreator sets the "creator" field.
func (fauo *FMPMSApiUpdateOne) SetCreator(s string) *FMPMSApiUpdateOne {
	fauo.mutation.SetCreator(s)
	return fauo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (fauo *FMPMSApiUpdateOne) SetNillableCreator(s *string) *FMPMSApiUpdateOne {
	if s != nil {
		fauo.SetCreator(*s)
	}
	return fauo
}

// ClearCreator clears the value of the "creator" field.
func (fauo *FMPMSApiUpdateOne) ClearCreator() *FMPMSApiUpdateOne {
	fauo.mutation.ClearCreator()
	return fauo
}

// SetCreatedTime sets the "created_time" field.
func (fauo *FMPMSApiUpdateOne) SetCreatedTime(t time.Time) *FMPMSApiUpdateOne {
	fauo.mutation.SetCreatedTime(t)
	return fauo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fauo *FMPMSApiUpdateOne) SetNillableCreatedTime(t *time.Time) *FMPMSApiUpdateOne {
	if t != nil {
		fauo.SetCreatedTime(*t)
	}
	return fauo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (fauo *FMPMSApiUpdateOne) ClearCreatedTime() *FMPMSApiUpdateOne {
	fauo.mutation.ClearCreatedTime()
	return fauo
}

// SetUpdatedTime sets the "updated_time" field.
func (fauo *FMPMSApiUpdateOne) SetUpdatedTime(t time.Time) *FMPMSApiUpdateOne {
	fauo.mutation.SetUpdatedTime(t)
	return fauo
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (fauo *FMPMSApiUpdateOne) SetNillableUpdatedTime(t *time.Time) *FMPMSApiUpdateOne {
	if t != nil {
		fauo.SetUpdatedTime(*t)
	}
	return fauo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (fauo *FMPMSApiUpdateOne) ClearUpdatedTime() *FMPMSApiUpdateOne {
	fauo.mutation.ClearUpdatedTime()
	return fauo
}

// Mutation returns the FMPMSApiMutation object of the builder.
func (fauo *FMPMSApiUpdateOne) Mutation() *FMPMSApiMutation {
	return fauo.mutation
}

// Where appends a list predicates to the FMPMSApiUpdate builder.
func (fauo *FMPMSApiUpdateOne) Where(ps ...predicate.FMPMSApi) *FMPMSApiUpdateOne {
	fauo.mutation.Where(ps...)
	return fauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fauo *FMPMSApiUpdateOne) Select(field string, fields ...string) *FMPMSApiUpdateOne {
	fauo.fields = append([]string{field}, fields...)
	return fauo
}

// Save executes the query and returns the updated FMPMSApi entity.
func (fauo *FMPMSApiUpdateOne) Save(ctx context.Context) (*FMPMSApi, error) {
	return withHooks(ctx, fauo.sqlSave, fauo.mutation, fauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fauo *FMPMSApiUpdateOne) SaveX(ctx context.Context) *FMPMSApi {
	node, err := fauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fauo *FMPMSApiUpdateOne) Exec(ctx context.Context) error {
	_, err := fauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fauo *FMPMSApiUpdateOne) ExecX(ctx context.Context) {
	if err := fauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fauo *FMPMSApiUpdateOne) check() error {
	if v, ok := fauo.mutation.PmsName(); ok {
		if err := fmpmsapi.PmsNameValidator(v); err != nil {
			return &ValidationError{Name: "pms_name", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.pms_name": %w`, err)}
		}
	}
	if v, ok := fauo.mutation.PmsAPI(); ok {
		if err := fmpmsapi.PmsAPIValidator(v); err != nil {
			return &ValidationError{Name: "pms_api", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.pms_api": %w`, err)}
		}
	}
	if v, ok := fauo.mutation.Contact(); ok {
		if err := fmpmsapi.ContactValidator(v); err != nil {
			return &ValidationError{Name: "contact", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.contact": %w`, err)}
		}
	}
	if v, ok := fauo.mutation.Phonenum(); ok {
		if err := fmpmsapi.PhonenumValidator(v); err != nil {
			return &ValidationError{Name: "phonenum", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.phonenum": %w`, err)}
		}
	}
	if v, ok := fauo.mutation.Description(); ok {
		if err := fmpmsapi.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.description": %w`, err)}
		}
	}
	if v, ok := fauo.mutation.DeleteFlag(); ok {
		if err := fmpmsapi.DeleteFlagValidator(v); err != nil {
			return &ValidationError{Name: "delete_flag", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.delete_flag": %w`, err)}
		}
	}
	if v, ok := fauo.mutation.Creator(); ok {
		if err := fmpmsapi.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "FMPMSApi.creator": %w`, err)}
		}
	}
	return nil
}

func (fauo *FMPMSApiUpdateOne) sqlSave(ctx context.Context) (_node *FMPMSApi, err error) {
	if err := fauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fmpmsapi.Table, fmpmsapi.Columns, sqlgraph.NewFieldSpec(fmpmsapi.FieldID, field.TypeInt64))
	id, ok := fauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "FMPMSApi.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fmpmsapi.FieldID)
		for _, f := range fields {
			if !fmpmsapi.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != fmpmsapi.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fauo.mutation.PmsName(); ok {
		_spec.SetField(fmpmsapi.FieldPmsName, field.TypeString, value)
	}
	if value, ok := fauo.mutation.PmsAPI(); ok {
		_spec.SetField(fmpmsapi.FieldPmsAPI, field.TypeString, value)
	}
	if value, ok := fauo.mutation.Enabled(); ok {
		_spec.SetField(fmpmsapi.FieldEnabled, field.TypeBool, value)
	}
	if fauo.mutation.EnabledCleared() {
		_spec.ClearField(fmpmsapi.FieldEnabled, field.TypeBool)
	}
	if value, ok := fauo.mutation.Contact(); ok {
		_spec.SetField(fmpmsapi.FieldContact, field.TypeString, value)
	}
	if value, ok := fauo.mutation.Phonenum(); ok {
		_spec.SetField(fmpmsapi.FieldPhonenum, field.TypeString, value)
	}
	if fauo.mutation.PhonenumCleared() {
		_spec.ClearField(fmpmsapi.FieldPhonenum, field.TypeString)
	}
	if value, ok := fauo.mutation.Description(); ok {
		_spec.SetField(fmpmsapi.FieldDescription, field.TypeString, value)
	}
	if fauo.mutation.DescriptionCleared() {
		_spec.ClearField(fmpmsapi.FieldDescription, field.TypeString)
	}
	if value, ok := fauo.mutation.DeleteFlag(); ok {
		_spec.SetField(fmpmsapi.FieldDeleteFlag, field.TypeString, value)
	}
	if fauo.mutation.DeleteFlagCleared() {
		_spec.ClearField(fmpmsapi.FieldDeleteFlag, field.TypeString)
	}
	if value, ok := fauo.mutation.Creator(); ok {
		_spec.SetField(fmpmsapi.FieldCreator, field.TypeString, value)
	}
	if fauo.mutation.CreatorCleared() {
		_spec.ClearField(fmpmsapi.FieldCreator, field.TypeString)
	}
	if value, ok := fauo.mutation.CreatedTime(); ok {
		_spec.SetField(fmpmsapi.FieldCreatedTime, field.TypeTime, value)
	}
	if fauo.mutation.CreatedTimeCleared() {
		_spec.ClearField(fmpmsapi.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := fauo.mutation.UpdatedTime(); ok {
		_spec.SetField(fmpmsapi.FieldUpdatedTime, field.TypeTime, value)
	}
	if fauo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(fmpmsapi.FieldUpdatedTime, field.TypeTime)
	}
	_node = &FMPMSApi{config: fauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fmpmsapi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fauo.mutation.done = true
	return _node, nil
}
