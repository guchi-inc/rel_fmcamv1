// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/models/schema"
	"fmcam/systems/genclients/predicate"
	"fmcam/systems/genclients/tenants"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantsUpdate is the builder for updating Tenants entities.
type TenantsUpdate struct {
	config
	hooks    []Hook
	mutation *TenantsMutation
}

// Where appends a list predicates to the TenantsUpdate builder.
func (tu *TenantsUpdate) Where(ps ...predicate.Tenants) *TenantsUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetSupplier sets the "supplier" field.
func (tu *TenantsUpdate) SetSupplier(s string) *TenantsUpdate {
	tu.mutation.SetSupplier(s)
	return tu
}

// SetNillableSupplier sets the "supplier" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableSupplier(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetSupplier(*s)
	}
	return tu
}

// SetContacts sets the "contacts" field.
func (tu *TenantsUpdate) SetContacts(s string) *TenantsUpdate {
	tu.mutation.SetContacts(s)
	return tu
}

// SetNillableContacts sets the "contacts" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableContacts(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetContacts(*s)
	}
	return tu
}

// SetEmail sets the "email" field.
func (tu *TenantsUpdate) SetEmail(s string) *TenantsUpdate {
	tu.mutation.SetEmail(s)
	return tu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableEmail(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetEmail(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TenantsUpdate) SetDescription(s string) *TenantsUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableDescription(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetType sets the "type" field.
func (tu *TenantsUpdate) SetType(s string) *TenantsUpdate {
	tu.mutation.SetType(s)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableType(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetType(*s)
	}
	return tu
}

// SetProvince sets the "province" field.
func (tu *TenantsUpdate) SetProvince(s string) *TenantsUpdate {
	tu.mutation.SetProvince(s)
	return tu
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableProvince(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetProvince(*s)
	}
	return tu
}

// SetCity sets the "city" field.
func (tu *TenantsUpdate) SetCity(s string) *TenantsUpdate {
	tu.mutation.SetCity(s)
	return tu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableCity(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetCity(*s)
	}
	return tu
}

// SetArea sets the "area" field.
func (tu *TenantsUpdate) SetArea(s string) *TenantsUpdate {
	tu.mutation.SetArea(s)
	return tu
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableArea(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetArea(*s)
	}
	return tu
}

// SetStreet sets the "street" field.
func (tu *TenantsUpdate) SetStreet(s string) *TenantsUpdate {
	tu.mutation.SetStreet(s)
	return tu
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableStreet(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetStreet(*s)
	}
	return tu
}

// SetAddress sets the "address" field.
func (tu *TenantsUpdate) SetAddress(s string) *TenantsUpdate {
	tu.mutation.SetAddress(s)
	return tu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableAddress(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetAddress(*s)
	}
	return tu
}

// SetAddrCode sets the "addr_code" field.
func (tu *TenantsUpdate) SetAddrCode(s string) *TenantsUpdate {
	tu.mutation.SetAddrCode(s)
	return tu
}

// SetNillableAddrCode sets the "addr_code" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableAddrCode(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetAddrCode(*s)
	}
	return tu
}

// SetFax sets the "fax" field.
func (tu *TenantsUpdate) SetFax(s string) *TenantsUpdate {
	tu.mutation.SetFax(s)
	return tu
}

// SetNillableFax sets the "fax" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableFax(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetFax(*s)
	}
	return tu
}

// SetPhoneNum sets the "phone_num" field.
func (tu *TenantsUpdate) SetPhoneNum(s string) *TenantsUpdate {
	tu.mutation.SetPhoneNum(s)
	return tu
}

// SetNillablePhoneNum sets the "phone_num" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillablePhoneNum(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetPhoneNum(*s)
	}
	return tu
}

// SetTelephone sets the "telephone" field.
func (tu *TenantsUpdate) SetTelephone(s string) *TenantsUpdate {
	tu.mutation.SetTelephone(s)
	return tu
}

// SetNillableTelephone sets the "telephone" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableTelephone(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetTelephone(*s)
	}
	return tu
}

// SetTaxNum sets the "tax_num" field.
func (tu *TenantsUpdate) SetTaxNum(s string) *TenantsUpdate {
	tu.mutation.SetTaxNum(s)
	return tu
}

// SetNillableTaxNum sets the "tax_num" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableTaxNum(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetTaxNum(*s)
	}
	return tu
}

// SetBankName sets the "bank_name" field.
func (tu *TenantsUpdate) SetBankName(s string) *TenantsUpdate {
	tu.mutation.SetBankName(s)
	return tu
}

// SetNillableBankName sets the "bank_name" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableBankName(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetBankName(*s)
	}
	return tu
}

// SetAccountNumber sets the "account_number" field.
func (tu *TenantsUpdate) SetAccountNumber(s string) *TenantsUpdate {
	tu.mutation.SetAccountNumber(s)
	return tu
}

// SetNillableAccountNumber sets the "account_number" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableAccountNumber(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetAccountNumber(*s)
	}
	return tu
}

// SetSort sets the "sort" field.
func (tu *TenantsUpdate) SetSort(s string) *TenantsUpdate {
	tu.mutation.SetSort(s)
	return tu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableSort(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetSort(*s)
	}
	return tu
}

// SetEnabled sets the "enabled" field.
func (tu *TenantsUpdate) SetEnabled(b bool) *TenantsUpdate {
	tu.mutation.SetEnabled(b)
	return tu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableEnabled(b *bool) *TenantsUpdate {
	if b != nil {
		tu.SetEnabled(*b)
	}
	return tu
}

// ClearEnabled clears the value of the "enabled" field.
func (tu *TenantsUpdate) ClearEnabled() *TenantsUpdate {
	tu.mutation.ClearEnabled()
	return tu
}

// SetDeleteFlag sets the "delete_flag" field.
func (tu *TenantsUpdate) SetDeleteFlag(s string) *TenantsUpdate {
	tu.mutation.SetDeleteFlag(s)
	return tu
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableDeleteFlag(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetDeleteFlag(*s)
	}
	return tu
}

// SetIsystem sets the "isystem" field.
func (tu *TenantsUpdate) SetIsystem(b bool) *TenantsUpdate {
	tu.mutation.SetIsystem(b)
	return tu
}

// SetNillableIsystem sets the "isystem" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableIsystem(b *bool) *TenantsUpdate {
	if b != nil {
		tu.SetIsystem(*b)
	}
	return tu
}

// SetTaxRate sets the "tax_rate" field.
func (tu *TenantsUpdate) SetTaxRate(s schema.Decimal) *TenantsUpdate {
	tu.mutation.SetTaxRate(s)
	return tu
}

// SetNillableTaxRate sets the "tax_rate" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableTaxRate(s *schema.Decimal) *TenantsUpdate {
	if s != nil {
		tu.SetTaxRate(*s)
	}
	return tu
}

// SetAdvanceIn sets the "advance_in" field.
func (tu *TenantsUpdate) SetAdvanceIn(s schema.Decimal) *TenantsUpdate {
	tu.mutation.SetAdvanceIn(s)
	return tu
}

// SetNillableAdvanceIn sets the "advance_in" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableAdvanceIn(s *schema.Decimal) *TenantsUpdate {
	if s != nil {
		tu.SetAdvanceIn(*s)
	}
	return tu
}

// SetBeginNeedGet sets the "begin_need_get" field.
func (tu *TenantsUpdate) SetBeginNeedGet(s schema.Decimal) *TenantsUpdate {
	tu.mutation.SetBeginNeedGet(s)
	return tu
}

// SetNillableBeginNeedGet sets the "begin_need_get" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableBeginNeedGet(s *schema.Decimal) *TenantsUpdate {
	if s != nil {
		tu.SetBeginNeedGet(*s)
	}
	return tu
}

// SetBeginNeedPay sets the "begin_need_pay" field.
func (tu *TenantsUpdate) SetBeginNeedPay(s schema.Decimal) *TenantsUpdate {
	tu.mutation.SetBeginNeedPay(s)
	return tu
}

// SetNillableBeginNeedPay sets the "begin_need_pay" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableBeginNeedPay(s *schema.Decimal) *TenantsUpdate {
	if s != nil {
		tu.SetBeginNeedPay(*s)
	}
	return tu
}

// SetAllNeedGet sets the "all_need_get" field.
func (tu *TenantsUpdate) SetAllNeedGet(s schema.Decimal) *TenantsUpdate {
	tu.mutation.SetAllNeedGet(s)
	return tu
}

// SetNillableAllNeedGet sets the "all_need_get" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableAllNeedGet(s *schema.Decimal) *TenantsUpdate {
	if s != nil {
		tu.SetAllNeedGet(*s)
	}
	return tu
}

// SetAllNeedPay sets the "all_need_pay" field.
func (tu *TenantsUpdate) SetAllNeedPay(s schema.Decimal) *TenantsUpdate {
	tu.mutation.SetAllNeedPay(s)
	return tu
}

// SetNillableAllNeedPay sets the "all_need_pay" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableAllNeedPay(s *schema.Decimal) *TenantsUpdate {
	if s != nil {
		tu.SetAllNeedPay(*s)
	}
	return tu
}

// SetCreator sets the "creator" field.
func (tu *TenantsUpdate) SetCreator(s string) *TenantsUpdate {
	tu.mutation.SetCreator(s)
	return tu
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableCreator(s *string) *TenantsUpdate {
	if s != nil {
		tu.SetCreator(*s)
	}
	return tu
}

// SetCreatedTime sets the "created_time" field.
func (tu *TenantsUpdate) SetCreatedTime(t time.Time) *TenantsUpdate {
	tu.mutation.SetCreatedTime(t)
	return tu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (tu *TenantsUpdate) SetNillableCreatedTime(t *time.Time) *TenantsUpdate {
	if t != nil {
		tu.SetCreatedTime(*t)
	}
	return tu
}

// ClearCreatedTime clears the value of the "created_time" field.
func (tu *TenantsUpdate) ClearCreatedTime() *TenantsUpdate {
	tu.mutation.ClearCreatedTime()
	return tu
}

// SetUpdatedTime sets the "updated_time" field.
func (tu *TenantsUpdate) SetUpdatedTime(t time.Time) *TenantsUpdate {
	tu.mutation.SetUpdatedTime(t)
	return tu
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (tu *TenantsUpdate) ClearUpdatedTime() *TenantsUpdate {
	tu.mutation.ClearUpdatedTime()
	return tu
}

// Mutation returns the TenantsMutation object of the builder.
func (tu *TenantsUpdate) Mutation() *TenantsMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TenantsUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TenantsUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TenantsUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TenantsUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TenantsUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedTime(); !ok && !tu.mutation.UpdatedTimeCleared() {
		v := tenants.UpdateDefaultUpdatedTime()
		tu.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TenantsUpdate) check() error {
	if v, ok := tu.mutation.Supplier(); ok {
		if err := tenants.SupplierValidator(v); err != nil {
			return &ValidationError{Name: "supplier", err: fmt.Errorf(`genclients: validator failed for field "Tenants.supplier": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Contacts(); ok {
		if err := tenants.ContactsValidator(v); err != nil {
			return &ValidationError{Name: "contacts", err: fmt.Errorf(`genclients: validator failed for field "Tenants.contacts": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Email(); ok {
		if err := tenants.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`genclients: validator failed for field "Tenants.email": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Description(); ok {
		if err := tenants.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "Tenants.description": %w`, err)}
		}
	}
	if v, ok := tu.mutation.GetType(); ok {
		if err := tenants.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`genclients: validator failed for field "Tenants.type": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Province(); ok {
		if err := tenants.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "province", err: fmt.Errorf(`genclients: validator failed for field "Tenants.province": %w`, err)}
		}
	}
	if v, ok := tu.mutation.City(); ok {
		if err := tenants.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`genclients: validator failed for field "Tenants.city": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Area(); ok {
		if err := tenants.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf(`genclients: validator failed for field "Tenants.area": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Street(); ok {
		if err := tenants.StreetValidator(v); err != nil {
			return &ValidationError{Name: "street", err: fmt.Errorf(`genclients: validator failed for field "Tenants.street": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Address(); ok {
		if err := tenants.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`genclients: validator failed for field "Tenants.address": %w`, err)}
		}
	}
	if v, ok := tu.mutation.AddrCode(); ok {
		if err := tenants.AddrCodeValidator(v); err != nil {
			return &ValidationError{Name: "addr_code", err: fmt.Errorf(`genclients: validator failed for field "Tenants.addr_code": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Fax(); ok {
		if err := tenants.FaxValidator(v); err != nil {
			return &ValidationError{Name: "fax", err: fmt.Errorf(`genclients: validator failed for field "Tenants.fax": %w`, err)}
		}
	}
	if v, ok := tu.mutation.PhoneNum(); ok {
		if err := tenants.PhoneNumValidator(v); err != nil {
			return &ValidationError{Name: "phone_num", err: fmt.Errorf(`genclients: validator failed for field "Tenants.phone_num": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Telephone(); ok {
		if err := tenants.TelephoneValidator(v); err != nil {
			return &ValidationError{Name: "telephone", err: fmt.Errorf(`genclients: validator failed for field "Tenants.telephone": %w`, err)}
		}
	}
	if v, ok := tu.mutation.TaxNum(); ok {
		if err := tenants.TaxNumValidator(v); err != nil {
			return &ValidationError{Name: "tax_num", err: fmt.Errorf(`genclients: validator failed for field "Tenants.tax_num": %w`, err)}
		}
	}
	if v, ok := tu.mutation.BankName(); ok {
		if err := tenants.BankNameValidator(v); err != nil {
			return &ValidationError{Name: "bank_name", err: fmt.Errorf(`genclients: validator failed for field "Tenants.bank_name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.AccountNumber(); ok {
		if err := tenants.AccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "account_number", err: fmt.Errorf(`genclients: validator failed for field "Tenants.account_number": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Sort(); ok {
		if err := tenants.SortValidator(v); err != nil {
			return &ValidationError{Name: "sort", err: fmt.Errorf(`genclients: validator failed for field "Tenants.sort": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Creator(); ok {
		if err := tenants.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "Tenants.creator": %w`, err)}
		}
	}
	return nil
}

func (tu *TenantsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenants.Table, tenants.Columns, sqlgraph.NewFieldSpec(tenants.FieldID, field.TypeInt64))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Supplier(); ok {
		_spec.SetField(tenants.FieldSupplier, field.TypeString, value)
	}
	if value, ok := tu.mutation.Contacts(); ok {
		_spec.SetField(tenants.FieldContacts, field.TypeString, value)
	}
	if value, ok := tu.mutation.Email(); ok {
		_spec.SetField(tenants.FieldEmail, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(tenants.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(tenants.FieldType, field.TypeString, value)
	}
	if value, ok := tu.mutation.Province(); ok {
		_spec.SetField(tenants.FieldProvince, field.TypeString, value)
	}
	if value, ok := tu.mutation.City(); ok {
		_spec.SetField(tenants.FieldCity, field.TypeString, value)
	}
	if value, ok := tu.mutation.Area(); ok {
		_spec.SetField(tenants.FieldArea, field.TypeString, value)
	}
	if value, ok := tu.mutation.Street(); ok {
		_spec.SetField(tenants.FieldStreet, field.TypeString, value)
	}
	if value, ok := tu.mutation.Address(); ok {
		_spec.SetField(tenants.FieldAddress, field.TypeString, value)
	}
	if value, ok := tu.mutation.AddrCode(); ok {
		_spec.SetField(tenants.FieldAddrCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.Fax(); ok {
		_spec.SetField(tenants.FieldFax, field.TypeString, value)
	}
	if value, ok := tu.mutation.PhoneNum(); ok {
		_spec.SetField(tenants.FieldPhoneNum, field.TypeString, value)
	}
	if value, ok := tu.mutation.Telephone(); ok {
		_spec.SetField(tenants.FieldTelephone, field.TypeString, value)
	}
	if value, ok := tu.mutation.TaxNum(); ok {
		_spec.SetField(tenants.FieldTaxNum, field.TypeString, value)
	}
	if value, ok := tu.mutation.BankName(); ok {
		_spec.SetField(tenants.FieldBankName, field.TypeString, value)
	}
	if value, ok := tu.mutation.AccountNumber(); ok {
		_spec.SetField(tenants.FieldAccountNumber, field.TypeString, value)
	}
	if value, ok := tu.mutation.Sort(); ok {
		_spec.SetField(tenants.FieldSort, field.TypeString, value)
	}
	if value, ok := tu.mutation.Enabled(); ok {
		_spec.SetField(tenants.FieldEnabled, field.TypeBool, value)
	}
	if tu.mutation.EnabledCleared() {
		_spec.ClearField(tenants.FieldEnabled, field.TypeBool)
	}
	if value, ok := tu.mutation.DeleteFlag(); ok {
		_spec.SetField(tenants.FieldDeleteFlag, field.TypeString, value)
	}
	if value, ok := tu.mutation.Isystem(); ok {
		_spec.SetField(tenants.FieldIsystem, field.TypeBool, value)
	}
	if value, ok := tu.mutation.TaxRate(); ok {
		_spec.SetField(tenants.FieldTaxRate, field.TypeOther, value)
	}
	if value, ok := tu.mutation.AdvanceIn(); ok {
		_spec.SetField(tenants.FieldAdvanceIn, field.TypeOther, value)
	}
	if value, ok := tu.mutation.BeginNeedGet(); ok {
		_spec.SetField(tenants.FieldBeginNeedGet, field.TypeOther, value)
	}
	if value, ok := tu.mutation.BeginNeedPay(); ok {
		_spec.SetField(tenants.FieldBeginNeedPay, field.TypeOther, value)
	}
	if value, ok := tu.mutation.AllNeedGet(); ok {
		_spec.SetField(tenants.FieldAllNeedGet, field.TypeOther, value)
	}
	if value, ok := tu.mutation.AllNeedPay(); ok {
		_spec.SetField(tenants.FieldAllNeedPay, field.TypeOther, value)
	}
	if value, ok := tu.mutation.Creator(); ok {
		_spec.SetField(tenants.FieldCreator, field.TypeString, value)
	}
	if value, ok := tu.mutation.CreatedTime(); ok {
		_spec.SetField(tenants.FieldCreatedTime, field.TypeTime, value)
	}
	if tu.mutation.CreatedTimeCleared() {
		_spec.ClearField(tenants.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := tu.mutation.UpdatedTime(); ok {
		_spec.SetField(tenants.FieldUpdatedTime, field.TypeTime, value)
	}
	if tu.mutation.UpdatedTimeCleared() {
		_spec.ClearField(tenants.FieldUpdatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenants.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TenantsUpdateOne is the builder for updating a single Tenants entity.
type TenantsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantsMutation
}

// SetSupplier sets the "supplier" field.
func (tuo *TenantsUpdateOne) SetSupplier(s string) *TenantsUpdateOne {
	tuo.mutation.SetSupplier(s)
	return tuo
}

// SetNillableSupplier sets the "supplier" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableSupplier(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetSupplier(*s)
	}
	return tuo
}

// SetContacts sets the "contacts" field.
func (tuo *TenantsUpdateOne) SetContacts(s string) *TenantsUpdateOne {
	tuo.mutation.SetContacts(s)
	return tuo
}

// SetNillableContacts sets the "contacts" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableContacts(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetContacts(*s)
	}
	return tuo
}

// SetEmail sets the "email" field.
func (tuo *TenantsUpdateOne) SetEmail(s string) *TenantsUpdateOne {
	tuo.mutation.SetEmail(s)
	return tuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableEmail(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetEmail(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TenantsUpdateOne) SetDescription(s string) *TenantsUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableDescription(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetType sets the "type" field.
func (tuo *TenantsUpdateOne) SetType(s string) *TenantsUpdateOne {
	tuo.mutation.SetType(s)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableType(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetType(*s)
	}
	return tuo
}

// SetProvince sets the "province" field.
func (tuo *TenantsUpdateOne) SetProvince(s string) *TenantsUpdateOne {
	tuo.mutation.SetProvince(s)
	return tuo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableProvince(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetProvince(*s)
	}
	return tuo
}

// SetCity sets the "city" field.
func (tuo *TenantsUpdateOne) SetCity(s string) *TenantsUpdateOne {
	tuo.mutation.SetCity(s)
	return tuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableCity(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetCity(*s)
	}
	return tuo
}

// SetArea sets the "area" field.
func (tuo *TenantsUpdateOne) SetArea(s string) *TenantsUpdateOne {
	tuo.mutation.SetArea(s)
	return tuo
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableArea(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetArea(*s)
	}
	return tuo
}

// SetStreet sets the "street" field.
func (tuo *TenantsUpdateOne) SetStreet(s string) *TenantsUpdateOne {
	tuo.mutation.SetStreet(s)
	return tuo
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableStreet(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetStreet(*s)
	}
	return tuo
}

// SetAddress sets the "address" field.
func (tuo *TenantsUpdateOne) SetAddress(s string) *TenantsUpdateOne {
	tuo.mutation.SetAddress(s)
	return tuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableAddress(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetAddress(*s)
	}
	return tuo
}

// SetAddrCode sets the "addr_code" field.
func (tuo *TenantsUpdateOne) SetAddrCode(s string) *TenantsUpdateOne {
	tuo.mutation.SetAddrCode(s)
	return tuo
}

// SetNillableAddrCode sets the "addr_code" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableAddrCode(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetAddrCode(*s)
	}
	return tuo
}

// SetFax sets the "fax" field.
func (tuo *TenantsUpdateOne) SetFax(s string) *TenantsUpdateOne {
	tuo.mutation.SetFax(s)
	return tuo
}

// SetNillableFax sets the "fax" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableFax(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetFax(*s)
	}
	return tuo
}

// SetPhoneNum sets the "phone_num" field.
func (tuo *TenantsUpdateOne) SetPhoneNum(s string) *TenantsUpdateOne {
	tuo.mutation.SetPhoneNum(s)
	return tuo
}

// SetNillablePhoneNum sets the "phone_num" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillablePhoneNum(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetPhoneNum(*s)
	}
	return tuo
}

// SetTelephone sets the "telephone" field.
func (tuo *TenantsUpdateOne) SetTelephone(s string) *TenantsUpdateOne {
	tuo.mutation.SetTelephone(s)
	return tuo
}

// SetNillableTelephone sets the "telephone" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableTelephone(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetTelephone(*s)
	}
	return tuo
}

// SetTaxNum sets the "tax_num" field.
func (tuo *TenantsUpdateOne) SetTaxNum(s string) *TenantsUpdateOne {
	tuo.mutation.SetTaxNum(s)
	return tuo
}

// SetNillableTaxNum sets the "tax_num" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableTaxNum(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetTaxNum(*s)
	}
	return tuo
}

// SetBankName sets the "bank_name" field.
func (tuo *TenantsUpdateOne) SetBankName(s string) *TenantsUpdateOne {
	tuo.mutation.SetBankName(s)
	return tuo
}

// SetNillableBankName sets the "bank_name" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableBankName(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetBankName(*s)
	}
	return tuo
}

// SetAccountNumber sets the "account_number" field.
func (tuo *TenantsUpdateOne) SetAccountNumber(s string) *TenantsUpdateOne {
	tuo.mutation.SetAccountNumber(s)
	return tuo
}

// SetNillableAccountNumber sets the "account_number" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableAccountNumber(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetAccountNumber(*s)
	}
	return tuo
}

// SetSort sets the "sort" field.
func (tuo *TenantsUpdateOne) SetSort(s string) *TenantsUpdateOne {
	tuo.mutation.SetSort(s)
	return tuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableSort(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetSort(*s)
	}
	return tuo
}

// SetEnabled sets the "enabled" field.
func (tuo *TenantsUpdateOne) SetEnabled(b bool) *TenantsUpdateOne {
	tuo.mutation.SetEnabled(b)
	return tuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableEnabled(b *bool) *TenantsUpdateOne {
	if b != nil {
		tuo.SetEnabled(*b)
	}
	return tuo
}

// ClearEnabled clears the value of the "enabled" field.
func (tuo *TenantsUpdateOne) ClearEnabled() *TenantsUpdateOne {
	tuo.mutation.ClearEnabled()
	return tuo
}

// SetDeleteFlag sets the "delete_flag" field.
func (tuo *TenantsUpdateOne) SetDeleteFlag(s string) *TenantsUpdateOne {
	tuo.mutation.SetDeleteFlag(s)
	return tuo
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableDeleteFlag(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetDeleteFlag(*s)
	}
	return tuo
}

// SetIsystem sets the "isystem" field.
func (tuo *TenantsUpdateOne) SetIsystem(b bool) *TenantsUpdateOne {
	tuo.mutation.SetIsystem(b)
	return tuo
}

// SetNillableIsystem sets the "isystem" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableIsystem(b *bool) *TenantsUpdateOne {
	if b != nil {
		tuo.SetIsystem(*b)
	}
	return tuo
}

// SetTaxRate sets the "tax_rate" field.
func (tuo *TenantsUpdateOne) SetTaxRate(s schema.Decimal) *TenantsUpdateOne {
	tuo.mutation.SetTaxRate(s)
	return tuo
}

// SetNillableTaxRate sets the "tax_rate" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableTaxRate(s *schema.Decimal) *TenantsUpdateOne {
	if s != nil {
		tuo.SetTaxRate(*s)
	}
	return tuo
}

// SetAdvanceIn sets the "advance_in" field.
func (tuo *TenantsUpdateOne) SetAdvanceIn(s schema.Decimal) *TenantsUpdateOne {
	tuo.mutation.SetAdvanceIn(s)
	return tuo
}

// SetNillableAdvanceIn sets the "advance_in" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableAdvanceIn(s *schema.Decimal) *TenantsUpdateOne {
	if s != nil {
		tuo.SetAdvanceIn(*s)
	}
	return tuo
}

// SetBeginNeedGet sets the "begin_need_get" field.
func (tuo *TenantsUpdateOne) SetBeginNeedGet(s schema.Decimal) *TenantsUpdateOne {
	tuo.mutation.SetBeginNeedGet(s)
	return tuo
}

// SetNillableBeginNeedGet sets the "begin_need_get" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableBeginNeedGet(s *schema.Decimal) *TenantsUpdateOne {
	if s != nil {
		tuo.SetBeginNeedGet(*s)
	}
	return tuo
}

// SetBeginNeedPay sets the "begin_need_pay" field.
func (tuo *TenantsUpdateOne) SetBeginNeedPay(s schema.Decimal) *TenantsUpdateOne {
	tuo.mutation.SetBeginNeedPay(s)
	return tuo
}

// SetNillableBeginNeedPay sets the "begin_need_pay" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableBeginNeedPay(s *schema.Decimal) *TenantsUpdateOne {
	if s != nil {
		tuo.SetBeginNeedPay(*s)
	}
	return tuo
}

// SetAllNeedGet sets the "all_need_get" field.
func (tuo *TenantsUpdateOne) SetAllNeedGet(s schema.Decimal) *TenantsUpdateOne {
	tuo.mutation.SetAllNeedGet(s)
	return tuo
}

// SetNillableAllNeedGet sets the "all_need_get" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableAllNeedGet(s *schema.Decimal) *TenantsUpdateOne {
	if s != nil {
		tuo.SetAllNeedGet(*s)
	}
	return tuo
}

// SetAllNeedPay sets the "all_need_pay" field.
func (tuo *TenantsUpdateOne) SetAllNeedPay(s schema.Decimal) *TenantsUpdateOne {
	tuo.mutation.SetAllNeedPay(s)
	return tuo
}

// SetNillableAllNeedPay sets the "all_need_pay" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableAllNeedPay(s *schema.Decimal) *TenantsUpdateOne {
	if s != nil {
		tuo.SetAllNeedPay(*s)
	}
	return tuo
}

// SetCreator sets the "creator" field.
func (tuo *TenantsUpdateOne) SetCreator(s string) *TenantsUpdateOne {
	tuo.mutation.SetCreator(s)
	return tuo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableCreator(s *string) *TenantsUpdateOne {
	if s != nil {
		tuo.SetCreator(*s)
	}
	return tuo
}

// SetCreatedTime sets the "created_time" field.
func (tuo *TenantsUpdateOne) SetCreatedTime(t time.Time) *TenantsUpdateOne {
	tuo.mutation.SetCreatedTime(t)
	return tuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (tuo *TenantsUpdateOne) SetNillableCreatedTime(t *time.Time) *TenantsUpdateOne {
	if t != nil {
		tuo.SetCreatedTime(*t)
	}
	return tuo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (tuo *TenantsUpdateOne) ClearCreatedTime() *TenantsUpdateOne {
	tuo.mutation.ClearCreatedTime()
	return tuo
}

// SetUpdatedTime sets the "updated_time" field.
func (tuo *TenantsUpdateOne) SetUpdatedTime(t time.Time) *TenantsUpdateOne {
	tuo.mutation.SetUpdatedTime(t)
	return tuo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (tuo *TenantsUpdateOne) ClearUpdatedTime() *TenantsUpdateOne {
	tuo.mutation.ClearUpdatedTime()
	return tuo
}

// Mutation returns the TenantsMutation object of the builder.
func (tuo *TenantsUpdateOne) Mutation() *TenantsMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TenantsUpdate builder.
func (tuo *TenantsUpdateOne) Where(ps ...predicate.Tenants) *TenantsUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TenantsUpdateOne) Select(field string, fields ...string) *TenantsUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tenants entity.
func (tuo *TenantsUpdateOne) Save(ctx context.Context) (*Tenants, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TenantsUpdateOne) SaveX(ctx context.Context) *Tenants {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TenantsUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TenantsUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TenantsUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedTime(); !ok && !tuo.mutation.UpdatedTimeCleared() {
		v := tenants.UpdateDefaultUpdatedTime()
		tuo.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TenantsUpdateOne) check() error {
	if v, ok := tuo.mutation.Supplier(); ok {
		if err := tenants.SupplierValidator(v); err != nil {
			return &ValidationError{Name: "supplier", err: fmt.Errorf(`genclients: validator failed for field "Tenants.supplier": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Contacts(); ok {
		if err := tenants.ContactsValidator(v); err != nil {
			return &ValidationError{Name: "contacts", err: fmt.Errorf(`genclients: validator failed for field "Tenants.contacts": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Email(); ok {
		if err := tenants.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`genclients: validator failed for field "Tenants.email": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Description(); ok {
		if err := tenants.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "Tenants.description": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.GetType(); ok {
		if err := tenants.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`genclients: validator failed for field "Tenants.type": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Province(); ok {
		if err := tenants.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "province", err: fmt.Errorf(`genclients: validator failed for field "Tenants.province": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.City(); ok {
		if err := tenants.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`genclients: validator failed for field "Tenants.city": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Area(); ok {
		if err := tenants.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf(`genclients: validator failed for field "Tenants.area": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Street(); ok {
		if err := tenants.StreetValidator(v); err != nil {
			return &ValidationError{Name: "street", err: fmt.Errorf(`genclients: validator failed for field "Tenants.street": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Address(); ok {
		if err := tenants.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`genclients: validator failed for field "Tenants.address": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.AddrCode(); ok {
		if err := tenants.AddrCodeValidator(v); err != nil {
			return &ValidationError{Name: "addr_code", err: fmt.Errorf(`genclients: validator failed for field "Tenants.addr_code": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Fax(); ok {
		if err := tenants.FaxValidator(v); err != nil {
			return &ValidationError{Name: "fax", err: fmt.Errorf(`genclients: validator failed for field "Tenants.fax": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.PhoneNum(); ok {
		if err := tenants.PhoneNumValidator(v); err != nil {
			return &ValidationError{Name: "phone_num", err: fmt.Errorf(`genclients: validator failed for field "Tenants.phone_num": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Telephone(); ok {
		if err := tenants.TelephoneValidator(v); err != nil {
			return &ValidationError{Name: "telephone", err: fmt.Errorf(`genclients: validator failed for field "Tenants.telephone": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.TaxNum(); ok {
		if err := tenants.TaxNumValidator(v); err != nil {
			return &ValidationError{Name: "tax_num", err: fmt.Errorf(`genclients: validator failed for field "Tenants.tax_num": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.BankName(); ok {
		if err := tenants.BankNameValidator(v); err != nil {
			return &ValidationError{Name: "bank_name", err: fmt.Errorf(`genclients: validator failed for field "Tenants.bank_name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.AccountNumber(); ok {
		if err := tenants.AccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "account_number", err: fmt.Errorf(`genclients: validator failed for field "Tenants.account_number": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Sort(); ok {
		if err := tenants.SortValidator(v); err != nil {
			return &ValidationError{Name: "sort", err: fmt.Errorf(`genclients: validator failed for field "Tenants.sort": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Creator(); ok {
		if err := tenants.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "Tenants.creator": %w`, err)}
		}
	}
	return nil
}

func (tuo *TenantsUpdateOne) sqlSave(ctx context.Context) (_node *Tenants, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenants.Table, tenants.Columns, sqlgraph.NewFieldSpec(tenants.FieldID, field.TypeInt64))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "Tenants.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenants.FieldID)
		for _, f := range fields {
			if !tenants.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != tenants.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Supplier(); ok {
		_spec.SetField(tenants.FieldSupplier, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Contacts(); ok {
		_spec.SetField(tenants.FieldContacts, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Email(); ok {
		_spec.SetField(tenants.FieldEmail, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(tenants.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(tenants.FieldType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Province(); ok {
		_spec.SetField(tenants.FieldProvince, field.TypeString, value)
	}
	if value, ok := tuo.mutation.City(); ok {
		_spec.SetField(tenants.FieldCity, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Area(); ok {
		_spec.SetField(tenants.FieldArea, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Street(); ok {
		_spec.SetField(tenants.FieldStreet, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Address(); ok {
		_spec.SetField(tenants.FieldAddress, field.TypeString, value)
	}
	if value, ok := tuo.mutation.AddrCode(); ok {
		_spec.SetField(tenants.FieldAddrCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Fax(); ok {
		_spec.SetField(tenants.FieldFax, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PhoneNum(); ok {
		_spec.SetField(tenants.FieldPhoneNum, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Telephone(); ok {
		_spec.SetField(tenants.FieldTelephone, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TaxNum(); ok {
		_spec.SetField(tenants.FieldTaxNum, field.TypeString, value)
	}
	if value, ok := tuo.mutation.BankName(); ok {
		_spec.SetField(tenants.FieldBankName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.AccountNumber(); ok {
		_spec.SetField(tenants.FieldAccountNumber, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Sort(); ok {
		_spec.SetField(tenants.FieldSort, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Enabled(); ok {
		_spec.SetField(tenants.FieldEnabled, field.TypeBool, value)
	}
	if tuo.mutation.EnabledCleared() {
		_spec.ClearField(tenants.FieldEnabled, field.TypeBool)
	}
	if value, ok := tuo.mutation.DeleteFlag(); ok {
		_spec.SetField(tenants.FieldDeleteFlag, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Isystem(); ok {
		_spec.SetField(tenants.FieldIsystem, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.TaxRate(); ok {
		_spec.SetField(tenants.FieldTaxRate, field.TypeOther, value)
	}
	if value, ok := tuo.mutation.AdvanceIn(); ok {
		_spec.SetField(tenants.FieldAdvanceIn, field.TypeOther, value)
	}
	if value, ok := tuo.mutation.BeginNeedGet(); ok {
		_spec.SetField(tenants.FieldBeginNeedGet, field.TypeOther, value)
	}
	if value, ok := tuo.mutation.BeginNeedPay(); ok {
		_spec.SetField(tenants.FieldBeginNeedPay, field.TypeOther, value)
	}
	if value, ok := tuo.mutation.AllNeedGet(); ok {
		_spec.SetField(tenants.FieldAllNeedGet, field.TypeOther, value)
	}
	if value, ok := tuo.mutation.AllNeedPay(); ok {
		_spec.SetField(tenants.FieldAllNeedPay, field.TypeOther, value)
	}
	if value, ok := tuo.mutation.Creator(); ok {
		_spec.SetField(tenants.FieldCreator, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CreatedTime(); ok {
		_spec.SetField(tenants.FieldCreatedTime, field.TypeTime, value)
	}
	if tuo.mutation.CreatedTimeCleared() {
		_spec.ClearField(tenants.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := tuo.mutation.UpdatedTime(); ok {
		_spec.SetField(tenants.FieldUpdatedTime, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(tenants.FieldUpdatedTime, field.TypeTime)
	}
	_node = &Tenants{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenants.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
