// Code generated by ent, DO NOT EDIT.

package devices

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the devices type in the database.
	Label = "devices"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldFuncType holds the string denoting the func_type field in the database.
	FieldFuncType = "func_type"
	// FieldDisplayWidth holds the string denoting the display_width field in the database.
	FieldDisplayWidth = "display_width"
	// FieldDisplayHeight holds the string denoting the display_height field in the database.
	FieldDisplayHeight = "display_height"
	// FieldRoiX holds the string denoting the roi_x field in the database.
	FieldRoiX = "roi_x"
	// FieldRoiY holds the string denoting the roi_y field in the database.
	FieldRoiY = "roi_y"
	// FieldRoiWidth holds the string denoting the roi_width field in the database.
	FieldRoiWidth = "roi_width"
	// FieldRoiHeight holds the string denoting the roi_height field in the database.
	FieldRoiHeight = "roi_height"
	// FieldRoiRotationAngle holds the string denoting the roi_rotation_angle field in the database.
	FieldRoiRotationAngle = "roi_rotation_angle"
	// FieldRoiEnabled holds the string denoting the roi_enabled field in the database.
	FieldRoiEnabled = "roi_enabled"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldTargetFps holds the string denoting the target_fps field in the database.
	FieldTargetFps = "target_fps"
	// FieldDwellDuration holds the string denoting the dwell_duration field in the database.
	FieldDwellDuration = "dwell_duration"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// Table holds the table name of the devices in the database.
	Table = "Device"
)

// Columns holds all SQL columns for devices fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldName,
	FieldURL,
	FieldLocation,
	FieldFuncType,
	FieldDisplayWidth,
	FieldDisplayHeight,
	FieldRoiX,
	FieldRoiY,
	FieldRoiWidth,
	FieldRoiHeight,
	FieldRoiRotationAngle,
	FieldRoiEnabled,
	FieldEnabled,
	FieldTargetFps,
	FieldDwellDuration,
	FieldCreatedTime,
	FieldUpdatedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultURL holds the default value on creation for the "url" field.
	DefaultURL string
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// DefaultLocation holds the default value on creation for the "location" field.
	DefaultLocation string
	// LocationValidator is a validator for the "location" field. It is called by the builders before save.
	LocationValidator func(string) error
	// DefaultFuncType holds the default value on creation for the "func_type" field.
	DefaultFuncType int
	// DefaultRoiEnabled holds the default value on creation for the "roi_enabled" field.
	DefaultRoiEnabled bool
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultTargetFps holds the default value on creation for the "target_fps" field.
	DefaultTargetFps int64
	// UpdateDefaultUpdatedTime holds the default value on update for the "updated_time" field.
	UpdateDefaultUpdatedTime func() time.Time
)

// OrderOption defines the ordering options for the Devices queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByFuncType orders the results by the func_type field.
func ByFuncType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFuncType, opts...).ToFunc()
}

// ByDisplayWidth orders the results by the display_width field.
func ByDisplayWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayWidth, opts...).ToFunc()
}

// ByDisplayHeight orders the results by the display_height field.
func ByDisplayHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayHeight, opts...).ToFunc()
}

// ByRoiX orders the results by the roi_x field.
func ByRoiX(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoiX, opts...).ToFunc()
}

// ByRoiY orders the results by the roi_y field.
func ByRoiY(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoiY, opts...).ToFunc()
}

// ByRoiWidth orders the results by the roi_width field.
func ByRoiWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoiWidth, opts...).ToFunc()
}

// ByRoiHeight orders the results by the roi_height field.
func ByRoiHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoiHeight, opts...).ToFunc()
}

// ByRoiRotationAngle orders the results by the roi_rotation_angle field.
func ByRoiRotationAngle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoiRotationAngle, opts...).ToFunc()
}

// ByRoiEnabled orders the results by the roi_enabled field.
func ByRoiEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoiEnabled, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByTargetFps orders the results by the target_fps field.
func ByTargetFps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetFps, opts...).ToFunc()
}

// ByDwellDuration orders the results by the dwell_duration field.
func ByDwellDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDwellDuration, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}
