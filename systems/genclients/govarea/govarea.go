// Code generated by ent, DO NOT EDIT.

package govarea

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the govarea type in the database.
	Label = "gov_area"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldProvinceCode holds the string denoting the province_code field in the database.
	FieldProvinceCode = "province_code"
	// FieldCityCode holds the string denoting the city_code field in the database.
	FieldCityCode = "city_code"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldDeleteFlag holds the string denoting the delete_flag field in the database.
	FieldDeleteFlag = "delete_flag"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// Table holds the table name of the govarea in the database.
	Table = "fm_gov_area"
)

// Columns holds all SQL columns for govarea fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldName,
	FieldProvinceCode,
	FieldCityCode,
	FieldCreator,
	FieldDeleteFlag,
	FieldCreatedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultProvinceCode holds the default value on creation for the "province_code" field.
	DefaultProvinceCode string
	// ProvinceCodeValidator is a validator for the "province_code" field. It is called by the builders before save.
	ProvinceCodeValidator func(string) error
	// DefaultCityCode holds the default value on creation for the "city_code" field.
	DefaultCityCode string
	// CityCodeValidator is a validator for the "city_code" field. It is called by the builders before save.
	CityCodeValidator func(string) error
	// DefaultCreator holds the default value on creation for the "creator" field.
	DefaultCreator string
	// CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	CreatorValidator func(string) error
	// DefaultDeleteFlag holds the default value on creation for the "delete_flag" field.
	DefaultDeleteFlag string
	// DeleteFlagValidator is a validator for the "delete_flag" field. It is called by the builders before save.
	DeleteFlagValidator func(string) error
)

// OrderOption defines the ordering options for the GovArea queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByProvinceCode orders the results by the province_code field.
func ByProvinceCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvinceCode, opts...).ToFunc()
}

// ByCityCode orders the results by the city_code field.
func ByCityCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityCode, opts...).ToFunc()
}

// ByCreator orders the results by the creator field.
func ByCreator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreator, opts...).ToFunc()
}

// ByDeleteFlag orders the results by the delete_flag field.
func ByDeleteFlag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteFlag, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}
