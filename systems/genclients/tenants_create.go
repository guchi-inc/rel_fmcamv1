// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/models/schema"
	"fmcam/systems/genclients/tenants"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TenantsCreate is the builder for creating a Tenants entity.
type TenantsCreate struct {
	config
	mutation *TenantsMutation
	hooks    []Hook
}

// SetSupplier sets the "supplier" field.
func (tc *TenantsCreate) SetSupplier(s string) *TenantsCreate {
	tc.mutation.SetSupplier(s)
	return tc
}

// SetTenantID sets the "tenant_id" field.
func (tc *TenantsCreate) SetTenantID(u uuid.UUID) *TenantsCreate {
	tc.mutation.SetTenantID(u)
	return tc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableTenantID(u *uuid.UUID) *TenantsCreate {
	if u != nil {
		tc.SetTenantID(*u)
	}
	return tc
}

// SetContacts sets the "contacts" field.
func (tc *TenantsCreate) SetContacts(s string) *TenantsCreate {
	tc.mutation.SetContacts(s)
	return tc
}

// SetNillableContacts sets the "contacts" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableContacts(s *string) *TenantsCreate {
	if s != nil {
		tc.SetContacts(*s)
	}
	return tc
}

// SetEmail sets the "email" field.
func (tc *TenantsCreate) SetEmail(s string) *TenantsCreate {
	tc.mutation.SetEmail(s)
	return tc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableEmail(s *string) *TenantsCreate {
	if s != nil {
		tc.SetEmail(*s)
	}
	return tc
}

// SetDescription sets the "description" field.
func (tc *TenantsCreate) SetDescription(s string) *TenantsCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableDescription(s *string) *TenantsCreate {
	if s != nil {
		tc.SetDescription(*s)
	}
	return tc
}

// SetType sets the "type" field.
func (tc *TenantsCreate) SetType(s string) *TenantsCreate {
	tc.mutation.SetType(s)
	return tc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableType(s *string) *TenantsCreate {
	if s != nil {
		tc.SetType(*s)
	}
	return tc
}

// SetProvince sets the "province" field.
func (tc *TenantsCreate) SetProvince(s string) *TenantsCreate {
	tc.mutation.SetProvince(s)
	return tc
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableProvince(s *string) *TenantsCreate {
	if s != nil {
		tc.SetProvince(*s)
	}
	return tc
}

// SetCity sets the "city" field.
func (tc *TenantsCreate) SetCity(s string) *TenantsCreate {
	tc.mutation.SetCity(s)
	return tc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableCity(s *string) *TenantsCreate {
	if s != nil {
		tc.SetCity(*s)
	}
	return tc
}

// SetArea sets the "area" field.
func (tc *TenantsCreate) SetArea(s string) *TenantsCreate {
	tc.mutation.SetArea(s)
	return tc
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableArea(s *string) *TenantsCreate {
	if s != nil {
		tc.SetArea(*s)
	}
	return tc
}

// SetStreet sets the "street" field.
func (tc *TenantsCreate) SetStreet(s string) *TenantsCreate {
	tc.mutation.SetStreet(s)
	return tc
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableStreet(s *string) *TenantsCreate {
	if s != nil {
		tc.SetStreet(*s)
	}
	return tc
}

// SetAddress sets the "address" field.
func (tc *TenantsCreate) SetAddress(s string) *TenantsCreate {
	tc.mutation.SetAddress(s)
	return tc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableAddress(s *string) *TenantsCreate {
	if s != nil {
		tc.SetAddress(*s)
	}
	return tc
}

// SetAddrCode sets the "addr_code" field.
func (tc *TenantsCreate) SetAddrCode(s string) *TenantsCreate {
	tc.mutation.SetAddrCode(s)
	return tc
}

// SetNillableAddrCode sets the "addr_code" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableAddrCode(s *string) *TenantsCreate {
	if s != nil {
		tc.SetAddrCode(*s)
	}
	return tc
}

// SetFax sets the "fax" field.
func (tc *TenantsCreate) SetFax(s string) *TenantsCreate {
	tc.mutation.SetFax(s)
	return tc
}

// SetNillableFax sets the "fax" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableFax(s *string) *TenantsCreate {
	if s != nil {
		tc.SetFax(*s)
	}
	return tc
}

// SetPhoneNum sets the "phone_num" field.
func (tc *TenantsCreate) SetPhoneNum(s string) *TenantsCreate {
	tc.mutation.SetPhoneNum(s)
	return tc
}

// SetNillablePhoneNum sets the "phone_num" field if the given value is not nil.
func (tc *TenantsCreate) SetNillablePhoneNum(s *string) *TenantsCreate {
	if s != nil {
		tc.SetPhoneNum(*s)
	}
	return tc
}

// SetTelephone sets the "telephone" field.
func (tc *TenantsCreate) SetTelephone(s string) *TenantsCreate {
	tc.mutation.SetTelephone(s)
	return tc
}

// SetNillableTelephone sets the "telephone" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableTelephone(s *string) *TenantsCreate {
	if s != nil {
		tc.SetTelephone(*s)
	}
	return tc
}

// SetTaxNum sets the "tax_num" field.
func (tc *TenantsCreate) SetTaxNum(s string) *TenantsCreate {
	tc.mutation.SetTaxNum(s)
	return tc
}

// SetNillableTaxNum sets the "tax_num" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableTaxNum(s *string) *TenantsCreate {
	if s != nil {
		tc.SetTaxNum(*s)
	}
	return tc
}

// SetBankName sets the "bank_name" field.
func (tc *TenantsCreate) SetBankName(s string) *TenantsCreate {
	tc.mutation.SetBankName(s)
	return tc
}

// SetNillableBankName sets the "bank_name" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableBankName(s *string) *TenantsCreate {
	if s != nil {
		tc.SetBankName(*s)
	}
	return tc
}

// SetAccountNumber sets the "account_number" field.
func (tc *TenantsCreate) SetAccountNumber(s string) *TenantsCreate {
	tc.mutation.SetAccountNumber(s)
	return tc
}

// SetNillableAccountNumber sets the "account_number" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableAccountNumber(s *string) *TenantsCreate {
	if s != nil {
		tc.SetAccountNumber(*s)
	}
	return tc
}

// SetSort sets the "sort" field.
func (tc *TenantsCreate) SetSort(s string) *TenantsCreate {
	tc.mutation.SetSort(s)
	return tc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableSort(s *string) *TenantsCreate {
	if s != nil {
		tc.SetSort(*s)
	}
	return tc
}

// SetEnabled sets the "enabled" field.
func (tc *TenantsCreate) SetEnabled(b bool) *TenantsCreate {
	tc.mutation.SetEnabled(b)
	return tc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableEnabled(b *bool) *TenantsCreate {
	if b != nil {
		tc.SetEnabled(*b)
	}
	return tc
}

// SetDeleteFlag sets the "delete_flag" field.
func (tc *TenantsCreate) SetDeleteFlag(s string) *TenantsCreate {
	tc.mutation.SetDeleteFlag(s)
	return tc
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableDeleteFlag(s *string) *TenantsCreate {
	if s != nil {
		tc.SetDeleteFlag(*s)
	}
	return tc
}

// SetIsystem sets the "isystem" field.
func (tc *TenantsCreate) SetIsystem(b bool) *TenantsCreate {
	tc.mutation.SetIsystem(b)
	return tc
}

// SetNillableIsystem sets the "isystem" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableIsystem(b *bool) *TenantsCreate {
	if b != nil {
		tc.SetIsystem(*b)
	}
	return tc
}

// SetTaxRate sets the "tax_rate" field.
func (tc *TenantsCreate) SetTaxRate(s schema.Decimal) *TenantsCreate {
	tc.mutation.SetTaxRate(s)
	return tc
}

// SetNillableTaxRate sets the "tax_rate" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableTaxRate(s *schema.Decimal) *TenantsCreate {
	if s != nil {
		tc.SetTaxRate(*s)
	}
	return tc
}

// SetAdvanceIn sets the "advance_in" field.
func (tc *TenantsCreate) SetAdvanceIn(s schema.Decimal) *TenantsCreate {
	tc.mutation.SetAdvanceIn(s)
	return tc
}

// SetNillableAdvanceIn sets the "advance_in" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableAdvanceIn(s *schema.Decimal) *TenantsCreate {
	if s != nil {
		tc.SetAdvanceIn(*s)
	}
	return tc
}

// SetBeginNeedGet sets the "begin_need_get" field.
func (tc *TenantsCreate) SetBeginNeedGet(s schema.Decimal) *TenantsCreate {
	tc.mutation.SetBeginNeedGet(s)
	return tc
}

// SetNillableBeginNeedGet sets the "begin_need_get" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableBeginNeedGet(s *schema.Decimal) *TenantsCreate {
	if s != nil {
		tc.SetBeginNeedGet(*s)
	}
	return tc
}

// SetBeginNeedPay sets the "begin_need_pay" field.
func (tc *TenantsCreate) SetBeginNeedPay(s schema.Decimal) *TenantsCreate {
	tc.mutation.SetBeginNeedPay(s)
	return tc
}

// SetNillableBeginNeedPay sets the "begin_need_pay" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableBeginNeedPay(s *schema.Decimal) *TenantsCreate {
	if s != nil {
		tc.SetBeginNeedPay(*s)
	}
	return tc
}

// SetAllNeedGet sets the "all_need_get" field.
func (tc *TenantsCreate) SetAllNeedGet(s schema.Decimal) *TenantsCreate {
	tc.mutation.SetAllNeedGet(s)
	return tc
}

// SetNillableAllNeedGet sets the "all_need_get" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableAllNeedGet(s *schema.Decimal) *TenantsCreate {
	if s != nil {
		tc.SetAllNeedGet(*s)
	}
	return tc
}

// SetAllNeedPay sets the "all_need_pay" field.
func (tc *TenantsCreate) SetAllNeedPay(s schema.Decimal) *TenantsCreate {
	tc.mutation.SetAllNeedPay(s)
	return tc
}

// SetNillableAllNeedPay sets the "all_need_pay" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableAllNeedPay(s *schema.Decimal) *TenantsCreate {
	if s != nil {
		tc.SetAllNeedPay(*s)
	}
	return tc
}

// SetCreator sets the "creator" field.
func (tc *TenantsCreate) SetCreator(s string) *TenantsCreate {
	tc.mutation.SetCreator(s)
	return tc
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableCreator(s *string) *TenantsCreate {
	if s != nil {
		tc.SetCreator(*s)
	}
	return tc
}

// SetCreatedTime sets the "created_time" field.
func (tc *TenantsCreate) SetCreatedTime(t time.Time) *TenantsCreate {
	tc.mutation.SetCreatedTime(t)
	return tc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableCreatedTime(t *time.Time) *TenantsCreate {
	if t != nil {
		tc.SetCreatedTime(*t)
	}
	return tc
}

// SetUpdatedTime sets the "updated_time" field.
func (tc *TenantsCreate) SetUpdatedTime(t time.Time) *TenantsCreate {
	tc.mutation.SetUpdatedTime(t)
	return tc
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (tc *TenantsCreate) SetNillableUpdatedTime(t *time.Time) *TenantsCreate {
	if t != nil {
		tc.SetUpdatedTime(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TenantsCreate) SetID(i int64) *TenantsCreate {
	tc.mutation.SetID(i)
	return tc
}

// Mutation returns the TenantsMutation object of the builder.
func (tc *TenantsCreate) Mutation() *TenantsMutation {
	return tc.mutation
}

// Save creates the Tenants in the database.
func (tc *TenantsCreate) Save(ctx context.Context) (*Tenants, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TenantsCreate) SaveX(ctx context.Context) *Tenants {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TenantsCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TenantsCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TenantsCreate) defaults() {
	if _, ok := tc.mutation.TenantID(); !ok {
		v := tenants.DefaultTenantID()
		tc.mutation.SetTenantID(v)
	}
	if _, ok := tc.mutation.Contacts(); !ok {
		v := tenants.DefaultContacts
		tc.mutation.SetContacts(v)
	}
	if _, ok := tc.mutation.Email(); !ok {
		v := tenants.DefaultEmail
		tc.mutation.SetEmail(v)
	}
	if _, ok := tc.mutation.Description(); !ok {
		v := tenants.DefaultDescription
		tc.mutation.SetDescription(v)
	}
	if _, ok := tc.mutation.GetType(); !ok {
		v := tenants.DefaultType
		tc.mutation.SetType(v)
	}
	if _, ok := tc.mutation.Province(); !ok {
		v := tenants.DefaultProvince
		tc.mutation.SetProvince(v)
	}
	if _, ok := tc.mutation.City(); !ok {
		v := tenants.DefaultCity
		tc.mutation.SetCity(v)
	}
	if _, ok := tc.mutation.Area(); !ok {
		v := tenants.DefaultArea
		tc.mutation.SetArea(v)
	}
	if _, ok := tc.mutation.Street(); !ok {
		v := tenants.DefaultStreet
		tc.mutation.SetStreet(v)
	}
	if _, ok := tc.mutation.Address(); !ok {
		v := tenants.DefaultAddress
		tc.mutation.SetAddress(v)
	}
	if _, ok := tc.mutation.AddrCode(); !ok {
		v := tenants.DefaultAddrCode
		tc.mutation.SetAddrCode(v)
	}
	if _, ok := tc.mutation.Fax(); !ok {
		v := tenants.DefaultFax
		tc.mutation.SetFax(v)
	}
	if _, ok := tc.mutation.PhoneNum(); !ok {
		v := tenants.DefaultPhoneNum
		tc.mutation.SetPhoneNum(v)
	}
	if _, ok := tc.mutation.Telephone(); !ok {
		v := tenants.DefaultTelephone
		tc.mutation.SetTelephone(v)
	}
	if _, ok := tc.mutation.TaxNum(); !ok {
		v := tenants.DefaultTaxNum
		tc.mutation.SetTaxNum(v)
	}
	if _, ok := tc.mutation.BankName(); !ok {
		v := tenants.DefaultBankName
		tc.mutation.SetBankName(v)
	}
	if _, ok := tc.mutation.AccountNumber(); !ok {
		v := tenants.DefaultAccountNumber
		tc.mutation.SetAccountNumber(v)
	}
	if _, ok := tc.mutation.Sort(); !ok {
		v := tenants.DefaultSort
		tc.mutation.SetSort(v)
	}
	if _, ok := tc.mutation.Enabled(); !ok {
		v := tenants.DefaultEnabled
		tc.mutation.SetEnabled(v)
	}
	if _, ok := tc.mutation.DeleteFlag(); !ok {
		v := tenants.DefaultDeleteFlag
		tc.mutation.SetDeleteFlag(v)
	}
	if _, ok := tc.mutation.Isystem(); !ok {
		v := tenants.DefaultIsystem
		tc.mutation.SetIsystem(v)
	}
	if _, ok := tc.mutation.TaxRate(); !ok {
		v := tenants.DefaultTaxRate
		tc.mutation.SetTaxRate(v)
	}
	if _, ok := tc.mutation.AdvanceIn(); !ok {
		v := tenants.DefaultAdvanceIn
		tc.mutation.SetAdvanceIn(v)
	}
	if _, ok := tc.mutation.BeginNeedGet(); !ok {
		v := tenants.DefaultBeginNeedGet
		tc.mutation.SetBeginNeedGet(v)
	}
	if _, ok := tc.mutation.BeginNeedPay(); !ok {
		v := tenants.DefaultBeginNeedPay
		tc.mutation.SetBeginNeedPay(v)
	}
	if _, ok := tc.mutation.AllNeedGet(); !ok {
		v := tenants.DefaultAllNeedGet
		tc.mutation.SetAllNeedGet(v)
	}
	if _, ok := tc.mutation.AllNeedPay(); !ok {
		v := tenants.DefaultAllNeedPay
		tc.mutation.SetAllNeedPay(v)
	}
	if _, ok := tc.mutation.Creator(); !ok {
		v := tenants.DefaultCreator
		tc.mutation.SetCreator(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TenantsCreate) check() error {
	if _, ok := tc.mutation.Supplier(); !ok {
		return &ValidationError{Name: "supplier", err: errors.New(`genclients: missing required field "Tenants.supplier"`)}
	}
	if v, ok := tc.mutation.Supplier(); ok {
		if err := tenants.SupplierValidator(v); err != nil {
			return &ValidationError{Name: "supplier", err: fmt.Errorf(`genclients: validator failed for field "Tenants.supplier": %w`, err)}
		}
	}
	if _, ok := tc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`genclients: missing required field "Tenants.tenant_id"`)}
	}
	if _, ok := tc.mutation.Contacts(); !ok {
		return &ValidationError{Name: "contacts", err: errors.New(`genclients: missing required field "Tenants.contacts"`)}
	}
	if v, ok := tc.mutation.Contacts(); ok {
		if err := tenants.ContactsValidator(v); err != nil {
			return &ValidationError{Name: "contacts", err: fmt.Errorf(`genclients: validator failed for field "Tenants.contacts": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`genclients: missing required field "Tenants.email"`)}
	}
	if v, ok := tc.mutation.Email(); ok {
		if err := tenants.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`genclients: validator failed for field "Tenants.email": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`genclients: missing required field "Tenants.description"`)}
	}
	if v, ok := tc.mutation.Description(); ok {
		if err := tenants.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "Tenants.description": %w`, err)}
		}
	}
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`genclients: missing required field "Tenants.type"`)}
	}
	if v, ok := tc.mutation.GetType(); ok {
		if err := tenants.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`genclients: validator failed for field "Tenants.type": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Province(); !ok {
		return &ValidationError{Name: "province", err: errors.New(`genclients: missing required field "Tenants.province"`)}
	}
	if v, ok := tc.mutation.Province(); ok {
		if err := tenants.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "province", err: fmt.Errorf(`genclients: validator failed for field "Tenants.province": %w`, err)}
		}
	}
	if _, ok := tc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`genclients: missing required field "Tenants.city"`)}
	}
	if v, ok := tc.mutation.City(); ok {
		if err := tenants.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`genclients: validator failed for field "Tenants.city": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Area(); !ok {
		return &ValidationError{Name: "area", err: errors.New(`genclients: missing required field "Tenants.area"`)}
	}
	if v, ok := tc.mutation.Area(); ok {
		if err := tenants.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf(`genclients: validator failed for field "Tenants.area": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Street(); !ok {
		return &ValidationError{Name: "street", err: errors.New(`genclients: missing required field "Tenants.street"`)}
	}
	if v, ok := tc.mutation.Street(); ok {
		if err := tenants.StreetValidator(v); err != nil {
			return &ValidationError{Name: "street", err: fmt.Errorf(`genclients: validator failed for field "Tenants.street": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`genclients: missing required field "Tenants.address"`)}
	}
	if v, ok := tc.mutation.Address(); ok {
		if err := tenants.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`genclients: validator failed for field "Tenants.address": %w`, err)}
		}
	}
	if _, ok := tc.mutation.AddrCode(); !ok {
		return &ValidationError{Name: "addr_code", err: errors.New(`genclients: missing required field "Tenants.addr_code"`)}
	}
	if v, ok := tc.mutation.AddrCode(); ok {
		if err := tenants.AddrCodeValidator(v); err != nil {
			return &ValidationError{Name: "addr_code", err: fmt.Errorf(`genclients: validator failed for field "Tenants.addr_code": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Fax(); !ok {
		return &ValidationError{Name: "fax", err: errors.New(`genclients: missing required field "Tenants.fax"`)}
	}
	if v, ok := tc.mutation.Fax(); ok {
		if err := tenants.FaxValidator(v); err != nil {
			return &ValidationError{Name: "fax", err: fmt.Errorf(`genclients: validator failed for field "Tenants.fax": %w`, err)}
		}
	}
	if _, ok := tc.mutation.PhoneNum(); !ok {
		return &ValidationError{Name: "phone_num", err: errors.New(`genclients: missing required field "Tenants.phone_num"`)}
	}
	if v, ok := tc.mutation.PhoneNum(); ok {
		if err := tenants.PhoneNumValidator(v); err != nil {
			return &ValidationError{Name: "phone_num", err: fmt.Errorf(`genclients: validator failed for field "Tenants.phone_num": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Telephone(); !ok {
		return &ValidationError{Name: "telephone", err: errors.New(`genclients: missing required field "Tenants.telephone"`)}
	}
	if v, ok := tc.mutation.Telephone(); ok {
		if err := tenants.TelephoneValidator(v); err != nil {
			return &ValidationError{Name: "telephone", err: fmt.Errorf(`genclients: validator failed for field "Tenants.telephone": %w`, err)}
		}
	}
	if _, ok := tc.mutation.TaxNum(); !ok {
		return &ValidationError{Name: "tax_num", err: errors.New(`genclients: missing required field "Tenants.tax_num"`)}
	}
	if v, ok := tc.mutation.TaxNum(); ok {
		if err := tenants.TaxNumValidator(v); err != nil {
			return &ValidationError{Name: "tax_num", err: fmt.Errorf(`genclients: validator failed for field "Tenants.tax_num": %w`, err)}
		}
	}
	if _, ok := tc.mutation.BankName(); !ok {
		return &ValidationError{Name: "bank_name", err: errors.New(`genclients: missing required field "Tenants.bank_name"`)}
	}
	if v, ok := tc.mutation.BankName(); ok {
		if err := tenants.BankNameValidator(v); err != nil {
			return &ValidationError{Name: "bank_name", err: fmt.Errorf(`genclients: validator failed for field "Tenants.bank_name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.AccountNumber(); !ok {
		return &ValidationError{Name: "account_number", err: errors.New(`genclients: missing required field "Tenants.account_number"`)}
	}
	if v, ok := tc.mutation.AccountNumber(); ok {
		if err := tenants.AccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "account_number", err: fmt.Errorf(`genclients: validator failed for field "Tenants.account_number": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`genclients: missing required field "Tenants.sort"`)}
	}
	if v, ok := tc.mutation.Sort(); ok {
		if err := tenants.SortValidator(v); err != nil {
			return &ValidationError{Name: "sort", err: fmt.Errorf(`genclients: validator failed for field "Tenants.sort": %w`, err)}
		}
	}
	if _, ok := tc.mutation.DeleteFlag(); !ok {
		return &ValidationError{Name: "delete_flag", err: errors.New(`genclients: missing required field "Tenants.delete_flag"`)}
	}
	if _, ok := tc.mutation.Isystem(); !ok {
		return &ValidationError{Name: "isystem", err: errors.New(`genclients: missing required field "Tenants.isystem"`)}
	}
	if _, ok := tc.mutation.TaxRate(); !ok {
		return &ValidationError{Name: "tax_rate", err: errors.New(`genclients: missing required field "Tenants.tax_rate"`)}
	}
	if _, ok := tc.mutation.AdvanceIn(); !ok {
		return &ValidationError{Name: "advance_in", err: errors.New(`genclients: missing required field "Tenants.advance_in"`)}
	}
	if _, ok := tc.mutation.BeginNeedGet(); !ok {
		return &ValidationError{Name: "begin_need_get", err: errors.New(`genclients: missing required field "Tenants.begin_need_get"`)}
	}
	if _, ok := tc.mutation.BeginNeedPay(); !ok {
		return &ValidationError{Name: "begin_need_pay", err: errors.New(`genclients: missing required field "Tenants.begin_need_pay"`)}
	}
	if _, ok := tc.mutation.AllNeedGet(); !ok {
		return &ValidationError{Name: "all_need_get", err: errors.New(`genclients: missing required field "Tenants.all_need_get"`)}
	}
	if _, ok := tc.mutation.AllNeedPay(); !ok {
		return &ValidationError{Name: "all_need_pay", err: errors.New(`genclients: missing required field "Tenants.all_need_pay"`)}
	}
	if _, ok := tc.mutation.Creator(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`genclients: missing required field "Tenants.creator"`)}
	}
	if v, ok := tc.mutation.Creator(); ok {
		if err := tenants.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "Tenants.creator": %w`, err)}
		}
	}
	return nil
}

func (tc *TenantsCreate) sqlSave(ctx context.Context) (*Tenants, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TenantsCreate) createSpec() (*Tenants, *sqlgraph.CreateSpec) {
	var (
		_node = &Tenants{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tenants.Table, sqlgraph.NewFieldSpec(tenants.FieldID, field.TypeInt64))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.Supplier(); ok {
		_spec.SetField(tenants.FieldSupplier, field.TypeString, value)
		_node.Supplier = value
	}
	if value, ok := tc.mutation.TenantID(); ok {
		_spec.SetField(tenants.FieldTenantID, field.TypeUUID, value)
		_node.TenantID = value
	}
	if value, ok := tc.mutation.Contacts(); ok {
		_spec.SetField(tenants.FieldContacts, field.TypeString, value)
		_node.Contacts = value
	}
	if value, ok := tc.mutation.Email(); ok {
		_spec.SetField(tenants.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(tenants.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(tenants.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.Province(); ok {
		_spec.SetField(tenants.FieldProvince, field.TypeString, value)
		_node.Province = value
	}
	if value, ok := tc.mutation.City(); ok {
		_spec.SetField(tenants.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := tc.mutation.Area(); ok {
		_spec.SetField(tenants.FieldArea, field.TypeString, value)
		_node.Area = value
	}
	if value, ok := tc.mutation.Street(); ok {
		_spec.SetField(tenants.FieldStreet, field.TypeString, value)
		_node.Street = value
	}
	if value, ok := tc.mutation.Address(); ok {
		_spec.SetField(tenants.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := tc.mutation.AddrCode(); ok {
		_spec.SetField(tenants.FieldAddrCode, field.TypeString, value)
		_node.AddrCode = value
	}
	if value, ok := tc.mutation.Fax(); ok {
		_spec.SetField(tenants.FieldFax, field.TypeString, value)
		_node.Fax = value
	}
	if value, ok := tc.mutation.PhoneNum(); ok {
		_spec.SetField(tenants.FieldPhoneNum, field.TypeString, value)
		_node.PhoneNum = value
	}
	if value, ok := tc.mutation.Telephone(); ok {
		_spec.SetField(tenants.FieldTelephone, field.TypeString, value)
		_node.Telephone = value
	}
	if value, ok := tc.mutation.TaxNum(); ok {
		_spec.SetField(tenants.FieldTaxNum, field.TypeString, value)
		_node.TaxNum = value
	}
	if value, ok := tc.mutation.BankName(); ok {
		_spec.SetField(tenants.FieldBankName, field.TypeString, value)
		_node.BankName = value
	}
	if value, ok := tc.mutation.AccountNumber(); ok {
		_spec.SetField(tenants.FieldAccountNumber, field.TypeString, value)
		_node.AccountNumber = value
	}
	if value, ok := tc.mutation.Sort(); ok {
		_spec.SetField(tenants.FieldSort, field.TypeString, value)
		_node.Sort = value
	}
	if value, ok := tc.mutation.Enabled(); ok {
		_spec.SetField(tenants.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := tc.mutation.DeleteFlag(); ok {
		_spec.SetField(tenants.FieldDeleteFlag, field.TypeString, value)
		_node.DeleteFlag = value
	}
	if value, ok := tc.mutation.Isystem(); ok {
		_spec.SetField(tenants.FieldIsystem, field.TypeBool, value)
		_node.Isystem = value
	}
	if value, ok := tc.mutation.TaxRate(); ok {
		_spec.SetField(tenants.FieldTaxRate, field.TypeOther, value)
		_node.TaxRate = value
	}
	if value, ok := tc.mutation.AdvanceIn(); ok {
		_spec.SetField(tenants.FieldAdvanceIn, field.TypeOther, value)
		_node.AdvanceIn = value
	}
	if value, ok := tc.mutation.BeginNeedGet(); ok {
		_spec.SetField(tenants.FieldBeginNeedGet, field.TypeOther, value)
		_node.BeginNeedGet = value
	}
	if value, ok := tc.mutation.BeginNeedPay(); ok {
		_spec.SetField(tenants.FieldBeginNeedPay, field.TypeOther, value)
		_node.BeginNeedPay = value
	}
	if value, ok := tc.mutation.AllNeedGet(); ok {
		_spec.SetField(tenants.FieldAllNeedGet, field.TypeOther, value)
		_node.AllNeedGet = value
	}
	if value, ok := tc.mutation.AllNeedPay(); ok {
		_spec.SetField(tenants.FieldAllNeedPay, field.TypeOther, value)
		_node.AllNeedPay = value
	}
	if value, ok := tc.mutation.Creator(); ok {
		_spec.SetField(tenants.FieldCreator, field.TypeString, value)
		_node.Creator = value
	}
	if value, ok := tc.mutation.CreatedTime(); ok {
		_spec.SetField(tenants.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	if value, ok := tc.mutation.UpdatedTime(); ok {
		_spec.SetField(tenants.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = &value
	}
	return _node, _spec
}

// TenantsCreateBulk is the builder for creating many Tenants entities in bulk.
type TenantsCreateBulk struct {
	config
	err      error
	builders []*TenantsCreate
}

// Save creates the Tenants entities in the database.
func (tcb *TenantsCreateBulk) Save(ctx context.Context) ([]*Tenants, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tenants, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TenantsCreateBulk) SaveX(ctx context.Context) []*Tenants {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TenantsCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TenantsCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
