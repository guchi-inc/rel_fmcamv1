// Code generated by ent, DO NOT EDIT.

package fmdedicatedservices

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the fmdedicatedservices type in the database.
	Label = "fm_dedicated_services"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWorkID holds the string denoting the work_id field in the database.
	FieldWorkID = "work_id"
	// FieldContacts holds the string denoting the contacts field in the database.
	FieldContacts = "contacts"
	// FieldSupplier holds the string denoting the supplier field in the database.
	FieldSupplier = "supplier"
	// FieldPhonenum holds the string denoting the phonenum field in the database.
	FieldPhonenum = "phonenum"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldFax holds the string denoting the fax field in the database.
	FieldFax = "fax"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// Table holds the table name of the fmdedicatedservices in the database.
	Table = "fm_dedicated_services"
)

// Columns holds all SQL columns for fmdedicatedservices fields.
var Columns = []string{
	FieldID,
	FieldWorkID,
	FieldContacts,
	FieldSupplier,
	FieldPhonenum,
	FieldEmail,
	FieldFax,
	FieldDescription,
	FieldCreator,
	FieldCreatedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultContacts holds the default value on creation for the "contacts" field.
	DefaultContacts string
	// ContactsValidator is a validator for the "contacts" field. It is called by the builders before save.
	ContactsValidator func(string) error
	// DefaultSupplier holds the default value on creation for the "supplier" field.
	DefaultSupplier string
	// SupplierValidator is a validator for the "supplier" field. It is called by the builders before save.
	SupplierValidator func(string) error
	// DefaultPhonenum holds the default value on creation for the "phonenum" field.
	DefaultPhonenum string
	// PhonenumValidator is a validator for the "phonenum" field. It is called by the builders before save.
	PhonenumValidator func(string) error
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultFax holds the default value on creation for the "fax" field.
	DefaultFax string
	// FaxValidator is a validator for the "fax" field. It is called by the builders before save.
	FaxValidator func(string) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultCreator holds the default value on creation for the "creator" field.
	DefaultCreator string
	// CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	CreatorValidator func(string) error
)

// OrderOption defines the ordering options for the FmDedicatedServices queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWorkID orders the results by the work_id field.
func ByWorkID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkID, opts...).ToFunc()
}

// ByContacts orders the results by the contacts field.
func ByContacts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContacts, opts...).ToFunc()
}

// BySupplier orders the results by the supplier field.
func BySupplier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSupplier, opts...).ToFunc()
}

// ByPhonenum orders the results by the phonenum field.
func ByPhonenum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhonenum, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByFax orders the results by the fax field.
func ByFax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFax, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreator orders the results by the creator field.
func ByCreator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreator, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}
