// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/alerts"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AlertsCreate is the builder for creating a Alerts entity.
type AlertsCreate struct {
	config
	mutation *AlertsMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (ac *AlertsCreate) SetTenantID(u uuid.UUID) *AlertsCreate {
	ac.mutation.SetTenantID(u)
	return ac
}

// SetCaptureLogID sets the "capture_log_id" field.
func (ac *AlertsCreate) SetCaptureLogID(i int64) *AlertsCreate {
	ac.mutation.SetCaptureLogID(i)
	return ac
}

// SetDeviceID sets the "device_id" field.
func (ac *AlertsCreate) SetDeviceID(i int64) *AlertsCreate {
	ac.mutation.SetDeviceID(i)
	return ac
}

// SetAlertLevel sets the "alert_level" field.
func (ac *AlertsCreate) SetAlertLevel(i int8) *AlertsCreate {
	ac.mutation.SetAlertLevel(i)
	return ac
}

// SetNillableAlertLevel sets the "alert_level" field if the given value is not nil.
func (ac *AlertsCreate) SetNillableAlertLevel(i *int8) *AlertsCreate {
	if i != nil {
		ac.SetAlertLevel(*i)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *AlertsCreate) SetStatus(i int8) *AlertsCreate {
	ac.mutation.SetStatus(i)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AlertsCreate) SetNillableStatus(i *int8) *AlertsCreate {
	if i != nil {
		ac.SetStatus(*i)
	}
	return ac
}

// SetFmUserID sets the "fm_user_id" field.
func (ac *AlertsCreate) SetFmUserID(i int64) *AlertsCreate {
	ac.mutation.SetFmUserID(i)
	return ac
}

// SetNillableFmUserID sets the "fm_user_id" field if the given value is not nil.
func (ac *AlertsCreate) SetNillableFmUserID(i *int64) *AlertsCreate {
	if i != nil {
		ac.SetFmUserID(*i)
	}
	return ac
}

// SetHandledTime sets the "handled_time" field.
func (ac *AlertsCreate) SetHandledTime(t time.Time) *AlertsCreate {
	ac.mutation.SetHandledTime(t)
	return ac
}

// SetNillableHandledTime sets the "handled_time" field if the given value is not nil.
func (ac *AlertsCreate) SetNillableHandledTime(t *time.Time) *AlertsCreate {
	if t != nil {
		ac.SetHandledTime(*t)
	}
	return ac
}

// SetRemarks sets the "remarks" field.
func (ac *AlertsCreate) SetRemarks(s string) *AlertsCreate {
	ac.mutation.SetRemarks(s)
	return ac
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (ac *AlertsCreate) SetNillableRemarks(s *string) *AlertsCreate {
	if s != nil {
		ac.SetRemarks(*s)
	}
	return ac
}

// SetCreatedTime sets the "created_time" field.
func (ac *AlertsCreate) SetCreatedTime(t time.Time) *AlertsCreate {
	ac.mutation.SetCreatedTime(t)
	return ac
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (ac *AlertsCreate) SetNillableCreatedTime(t *time.Time) *AlertsCreate {
	if t != nil {
		ac.SetCreatedTime(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AlertsCreate) SetID(i int64) *AlertsCreate {
	ac.mutation.SetID(i)
	return ac
}

// Mutation returns the AlertsMutation object of the builder.
func (ac *AlertsCreate) Mutation() *AlertsMutation {
	return ac.mutation
}

// Save creates the Alerts in the database.
func (ac *AlertsCreate) Save(ctx context.Context) (*Alerts, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AlertsCreate) SaveX(ctx context.Context) *Alerts {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AlertsCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AlertsCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AlertsCreate) defaults() {
	if _, ok := ac.mutation.AlertLevel(); !ok {
		v := alerts.DefaultAlertLevel
		ac.mutation.SetAlertLevel(v)
	}
	if _, ok := ac.mutation.Status(); !ok {
		v := alerts.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.Remarks(); !ok {
		v := alerts.DefaultRemarks
		ac.mutation.SetRemarks(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AlertsCreate) check() error {
	if _, ok := ac.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`genclients: missing required field "Alerts.tenant_id"`)}
	}
	if _, ok := ac.mutation.CaptureLogID(); !ok {
		return &ValidationError{Name: "capture_log_id", err: errors.New(`genclients: missing required field "Alerts.capture_log_id"`)}
	}
	if _, ok := ac.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`genclients: missing required field "Alerts.device_id"`)}
	}
	if _, ok := ac.mutation.AlertLevel(); !ok {
		return &ValidationError{Name: "alert_level", err: errors.New(`genclients: missing required field "Alerts.alert_level"`)}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`genclients: missing required field "Alerts.status"`)}
	}
	return nil
}

func (ac *AlertsCreate) sqlSave(ctx context.Context) (*Alerts, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AlertsCreate) createSpec() (*Alerts, *sqlgraph.CreateSpec) {
	var (
		_node = &Alerts{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(alerts.Table, sqlgraph.NewFieldSpec(alerts.FieldID, field.TypeInt64))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.TenantID(); ok {
		_spec.SetField(alerts.FieldTenantID, field.TypeUUID, value)
		_node.TenantID = value
	}
	if value, ok := ac.mutation.CaptureLogID(); ok {
		_spec.SetField(alerts.FieldCaptureLogID, field.TypeInt64, value)
		_node.CaptureLogID = value
	}
	if value, ok := ac.mutation.DeviceID(); ok {
		_spec.SetField(alerts.FieldDeviceID, field.TypeInt64, value)
		_node.DeviceID = value
	}
	if value, ok := ac.mutation.AlertLevel(); ok {
		_spec.SetField(alerts.FieldAlertLevel, field.TypeInt8, value)
		_node.AlertLevel = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(alerts.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.FmUserID(); ok {
		_spec.SetField(alerts.FieldFmUserID, field.TypeInt64, value)
		_node.FmUserID = value
	}
	if value, ok := ac.mutation.HandledTime(); ok {
		_spec.SetField(alerts.FieldHandledTime, field.TypeTime, value)
		_node.HandledTime = &value
	}
	if value, ok := ac.mutation.Remarks(); ok {
		_spec.SetField(alerts.FieldRemarks, field.TypeString, value)
		_node.Remarks = value
	}
	if value, ok := ac.mutation.CreatedTime(); ok {
		_spec.SetField(alerts.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	return _node, _spec
}

// AlertsCreateBulk is the builder for creating many Alerts entities in bulk.
type AlertsCreateBulk struct {
	config
	err      error
	builders []*AlertsCreate
}

// Save creates the Alerts entities in the database.
func (acb *AlertsCreateBulk) Save(ctx context.Context) ([]*Alerts, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Alerts, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlertsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AlertsCreateBulk) SaveX(ctx context.Context) []*Alerts {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AlertsCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AlertsCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
