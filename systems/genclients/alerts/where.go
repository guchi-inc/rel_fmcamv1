// Code generated by ent, DO NOT EDIT.

package alerts

import (
	"fmcam/systems/genclients/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v uuid.UUID) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldTenantID, v))
}

// CaptureLogID applies equality check predicate on the "capture_log_id" field. It's identical to CaptureLogIDEQ.
func CaptureLogID(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldCaptureLogID, v))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldDeviceID, v))
}

// AlertLevel applies equality check predicate on the "alert_level" field. It's identical to AlertLevelEQ.
func AlertLevel(v int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldAlertLevel, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldStatus, v))
}

// FmUserID applies equality check predicate on the "fm_user_id" field. It's identical to FmUserIDEQ.
func FmUserID(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldFmUserID, v))
}

// HandledTime applies equality check predicate on the "handled_time" field. It's identical to HandledTimeEQ.
func HandledTime(v time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldHandledTime, v))
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldRemarks, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldCreatedTime, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v uuid.UUID) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v uuid.UUID) predicate.Alerts {
	return predicate.Alerts(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...uuid.UUID) predicate.Alerts {
	return predicate.Alerts(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...uuid.UUID) predicate.Alerts {
	return predicate.Alerts(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v uuid.UUID) predicate.Alerts {
	return predicate.Alerts(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v uuid.UUID) predicate.Alerts {
	return predicate.Alerts(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v uuid.UUID) predicate.Alerts {
	return predicate.Alerts(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v uuid.UUID) predicate.Alerts {
	return predicate.Alerts(sql.FieldLTE(FieldTenantID, v))
}

// CaptureLogIDEQ applies the EQ predicate on the "capture_log_id" field.
func CaptureLogIDEQ(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldCaptureLogID, v))
}

// CaptureLogIDNEQ applies the NEQ predicate on the "capture_log_id" field.
func CaptureLogIDNEQ(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldNEQ(FieldCaptureLogID, v))
}

// CaptureLogIDIn applies the In predicate on the "capture_log_id" field.
func CaptureLogIDIn(vs ...int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldIn(FieldCaptureLogID, vs...))
}

// CaptureLogIDNotIn applies the NotIn predicate on the "capture_log_id" field.
func CaptureLogIDNotIn(vs ...int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldNotIn(FieldCaptureLogID, vs...))
}

// CaptureLogIDGT applies the GT predicate on the "capture_log_id" field.
func CaptureLogIDGT(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldGT(FieldCaptureLogID, v))
}

// CaptureLogIDGTE applies the GTE predicate on the "capture_log_id" field.
func CaptureLogIDGTE(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldGTE(FieldCaptureLogID, v))
}

// CaptureLogIDLT applies the LT predicate on the "capture_log_id" field.
func CaptureLogIDLT(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldLT(FieldCaptureLogID, v))
}

// CaptureLogIDLTE applies the LTE predicate on the "capture_log_id" field.
func CaptureLogIDLTE(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldLTE(FieldCaptureLogID, v))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldNotIn(FieldDeviceID, vs...))
}

// DeviceIDGT applies the GT predicate on the "device_id" field.
func DeviceIDGT(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldGT(FieldDeviceID, v))
}

// DeviceIDGTE applies the GTE predicate on the "device_id" field.
func DeviceIDGTE(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldGTE(FieldDeviceID, v))
}

// DeviceIDLT applies the LT predicate on the "device_id" field.
func DeviceIDLT(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldLT(FieldDeviceID, v))
}

// DeviceIDLTE applies the LTE predicate on the "device_id" field.
func DeviceIDLTE(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldLTE(FieldDeviceID, v))
}

// AlertLevelEQ applies the EQ predicate on the "alert_level" field.
func AlertLevelEQ(v int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldAlertLevel, v))
}

// AlertLevelNEQ applies the NEQ predicate on the "alert_level" field.
func AlertLevelNEQ(v int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldNEQ(FieldAlertLevel, v))
}

// AlertLevelIn applies the In predicate on the "alert_level" field.
func AlertLevelIn(vs ...int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldIn(FieldAlertLevel, vs...))
}

// AlertLevelNotIn applies the NotIn predicate on the "alert_level" field.
func AlertLevelNotIn(vs ...int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldNotIn(FieldAlertLevel, vs...))
}

// AlertLevelGT applies the GT predicate on the "alert_level" field.
func AlertLevelGT(v int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldGT(FieldAlertLevel, v))
}

// AlertLevelGTE applies the GTE predicate on the "alert_level" field.
func AlertLevelGTE(v int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldGTE(FieldAlertLevel, v))
}

// AlertLevelLT applies the LT predicate on the "alert_level" field.
func AlertLevelLT(v int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldLT(FieldAlertLevel, v))
}

// AlertLevelLTE applies the LTE predicate on the "alert_level" field.
func AlertLevelLTE(v int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldLTE(FieldAlertLevel, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.Alerts {
	return predicate.Alerts(sql.FieldLTE(FieldStatus, v))
}

// FmUserIDEQ applies the EQ predicate on the "fm_user_id" field.
func FmUserIDEQ(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldFmUserID, v))
}

// FmUserIDNEQ applies the NEQ predicate on the "fm_user_id" field.
func FmUserIDNEQ(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldNEQ(FieldFmUserID, v))
}

// FmUserIDIn applies the In predicate on the "fm_user_id" field.
func FmUserIDIn(vs ...int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldIn(FieldFmUserID, vs...))
}

// FmUserIDNotIn applies the NotIn predicate on the "fm_user_id" field.
func FmUserIDNotIn(vs ...int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldNotIn(FieldFmUserID, vs...))
}

// FmUserIDGT applies the GT predicate on the "fm_user_id" field.
func FmUserIDGT(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldGT(FieldFmUserID, v))
}

// FmUserIDGTE applies the GTE predicate on the "fm_user_id" field.
func FmUserIDGTE(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldGTE(FieldFmUserID, v))
}

// FmUserIDLT applies the LT predicate on the "fm_user_id" field.
func FmUserIDLT(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldLT(FieldFmUserID, v))
}

// FmUserIDLTE applies the LTE predicate on the "fm_user_id" field.
func FmUserIDLTE(v int64) predicate.Alerts {
	return predicate.Alerts(sql.FieldLTE(FieldFmUserID, v))
}

// FmUserIDIsNil applies the IsNil predicate on the "fm_user_id" field.
func FmUserIDIsNil() predicate.Alerts {
	return predicate.Alerts(sql.FieldIsNull(FieldFmUserID))
}

// FmUserIDNotNil applies the NotNil predicate on the "fm_user_id" field.
func FmUserIDNotNil() predicate.Alerts {
	return predicate.Alerts(sql.FieldNotNull(FieldFmUserID))
}

// HandledTimeEQ applies the EQ predicate on the "handled_time" field.
func HandledTimeEQ(v time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldHandledTime, v))
}

// HandledTimeNEQ applies the NEQ predicate on the "handled_time" field.
func HandledTimeNEQ(v time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldNEQ(FieldHandledTime, v))
}

// HandledTimeIn applies the In predicate on the "handled_time" field.
func HandledTimeIn(vs ...time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldIn(FieldHandledTime, vs...))
}

// HandledTimeNotIn applies the NotIn predicate on the "handled_time" field.
func HandledTimeNotIn(vs ...time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldNotIn(FieldHandledTime, vs...))
}

// HandledTimeGT applies the GT predicate on the "handled_time" field.
func HandledTimeGT(v time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldGT(FieldHandledTime, v))
}

// HandledTimeGTE applies the GTE predicate on the "handled_time" field.
func HandledTimeGTE(v time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldGTE(FieldHandledTime, v))
}

// HandledTimeLT applies the LT predicate on the "handled_time" field.
func HandledTimeLT(v time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldLT(FieldHandledTime, v))
}

// HandledTimeLTE applies the LTE predicate on the "handled_time" field.
func HandledTimeLTE(v time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldLTE(FieldHandledTime, v))
}

// HandledTimeIsNil applies the IsNil predicate on the "handled_time" field.
func HandledTimeIsNil() predicate.Alerts {
	return predicate.Alerts(sql.FieldIsNull(FieldHandledTime))
}

// HandledTimeNotNil applies the NotNil predicate on the "handled_time" field.
func HandledTimeNotNil() predicate.Alerts {
	return predicate.Alerts(sql.FieldNotNull(FieldHandledTime))
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldRemarks, v))
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.Alerts {
	return predicate.Alerts(sql.FieldNEQ(FieldRemarks, v))
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.Alerts {
	return predicate.Alerts(sql.FieldIn(FieldRemarks, vs...))
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.Alerts {
	return predicate.Alerts(sql.FieldNotIn(FieldRemarks, vs...))
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.Alerts {
	return predicate.Alerts(sql.FieldGT(FieldRemarks, v))
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.Alerts {
	return predicate.Alerts(sql.FieldGTE(FieldRemarks, v))
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.Alerts {
	return predicate.Alerts(sql.FieldLT(FieldRemarks, v))
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.Alerts {
	return predicate.Alerts(sql.FieldLTE(FieldRemarks, v))
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.Alerts {
	return predicate.Alerts(sql.FieldContains(FieldRemarks, v))
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.Alerts {
	return predicate.Alerts(sql.FieldHasPrefix(FieldRemarks, v))
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.Alerts {
	return predicate.Alerts(sql.FieldHasSuffix(FieldRemarks, v))
}

// RemarksIsNil applies the IsNil predicate on the "remarks" field.
func RemarksIsNil() predicate.Alerts {
	return predicate.Alerts(sql.FieldIsNull(FieldRemarks))
}

// RemarksNotNil applies the NotNil predicate on the "remarks" field.
func RemarksNotNil() predicate.Alerts {
	return predicate.Alerts(sql.FieldNotNull(FieldRemarks))
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.Alerts {
	return predicate.Alerts(sql.FieldEqualFold(FieldRemarks, v))
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.Alerts {
	return predicate.Alerts(sql.FieldContainsFold(FieldRemarks, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.Alerts {
	return predicate.Alerts(sql.FieldLTE(FieldCreatedTime, v))
}

// CreatedTimeIsNil applies the IsNil predicate on the "created_time" field.
func CreatedTimeIsNil() predicate.Alerts {
	return predicate.Alerts(sql.FieldIsNull(FieldCreatedTime))
}

// CreatedTimeNotNil applies the NotNil predicate on the "created_time" field.
func CreatedTimeNotNil() predicate.Alerts {
	return predicate.Alerts(sql.FieldNotNull(FieldCreatedTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Alerts) predicate.Alerts {
	return predicate.Alerts(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Alerts) predicate.Alerts {
	return predicate.Alerts(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Alerts) predicate.Alerts {
	return predicate.Alerts(sql.NotPredicates(p))
}
