// Code generated by ent, DO NOT EDIT.

package alerts

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the alerts type in the database.
	Label = "alerts"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCaptureLogID holds the string denoting the capture_log_id field in the database.
	FieldCaptureLogID = "capture_log_id"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldAlertLevel holds the string denoting the alert_level field in the database.
	FieldAlertLevel = "alert_level"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldFmUserID holds the string denoting the fm_user_id field in the database.
	FieldFmUserID = "fm_user_id"
	// FieldHandledTime holds the string denoting the handled_time field in the database.
	FieldHandledTime = "handled_time"
	// FieldRemarks holds the string denoting the remarks field in the database.
	FieldRemarks = "remarks"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// Table holds the table name of the alerts in the database.
	Table = "Alerts"
)

// Columns holds all SQL columns for alerts fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldCaptureLogID,
	FieldDeviceID,
	FieldAlertLevel,
	FieldStatus,
	FieldFmUserID,
	FieldHandledTime,
	FieldRemarks,
	FieldCreatedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAlertLevel holds the default value on creation for the "alert_level" field.
	DefaultAlertLevel int8
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int8
	// DefaultRemarks holds the default value on creation for the "remarks" field.
	DefaultRemarks string
)

// OrderOption defines the ordering options for the Alerts queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCaptureLogID orders the results by the capture_log_id field.
func ByCaptureLogID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaptureLogID, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByAlertLevel orders the results by the alert_level field.
func ByAlertLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlertLevel, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByFmUserID orders the results by the fm_user_id field.
func ByFmUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFmUserID, opts...).ToFunc()
}

// ByHandledTime orders the results by the handled_time field.
func ByHandledTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandledTime, opts...).ToFunc()
}

// ByRemarks orders the results by the remarks field.
func ByRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemarks, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}
