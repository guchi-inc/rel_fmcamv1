// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/devices"
	"fmcam/systems/genclients/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DevicesUpdate is the builder for updating Devices entities.
type DevicesUpdate struct {
	config
	hooks    []Hook
	mutation *DevicesMutation
}

// Where appends a list predicates to the DevicesUpdate builder.
func (du *DevicesUpdate) Where(ps ...predicate.Devices) *DevicesUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DevicesUpdate) SetName(s string) *DevicesUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableName(s *string) *DevicesUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// ClearName clears the value of the "name" field.
func (du *DevicesUpdate) ClearName() *DevicesUpdate {
	du.mutation.ClearName()
	return du
}

// SetURL sets the "url" field.
func (du *DevicesUpdate) SetURL(s string) *DevicesUpdate {
	du.mutation.SetURL(s)
	return du
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableURL(s *string) *DevicesUpdate {
	if s != nil {
		du.SetURL(*s)
	}
	return du
}

// SetLocation sets the "location" field.
func (du *DevicesUpdate) SetLocation(s string) *DevicesUpdate {
	du.mutation.SetLocation(s)
	return du
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableLocation(s *string) *DevicesUpdate {
	if s != nil {
		du.SetLocation(*s)
	}
	return du
}

// SetFuncType sets the "func_type" field.
func (du *DevicesUpdate) SetFuncType(i int) *DevicesUpdate {
	du.mutation.ResetFuncType()
	du.mutation.SetFuncType(i)
	return du
}

// SetNillableFuncType sets the "func_type" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableFuncType(i *int) *DevicesUpdate {
	if i != nil {
		du.SetFuncType(*i)
	}
	return du
}

// AddFuncType adds i to the "func_type" field.
func (du *DevicesUpdate) AddFuncType(i int) *DevicesUpdate {
	du.mutation.AddFuncType(i)
	return du
}

// ClearFuncType clears the value of the "func_type" field.
func (du *DevicesUpdate) ClearFuncType() *DevicesUpdate {
	du.mutation.ClearFuncType()
	return du
}

// SetDisplayWidth sets the "display_width" field.
func (du *DevicesUpdate) SetDisplayWidth(u uint16) *DevicesUpdate {
	du.mutation.ResetDisplayWidth()
	du.mutation.SetDisplayWidth(u)
	return du
}

// SetNillableDisplayWidth sets the "display_width" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableDisplayWidth(u *uint16) *DevicesUpdate {
	if u != nil {
		du.SetDisplayWidth(*u)
	}
	return du
}

// AddDisplayWidth adds u to the "display_width" field.
func (du *DevicesUpdate) AddDisplayWidth(u int16) *DevicesUpdate {
	du.mutation.AddDisplayWidth(u)
	return du
}

// ClearDisplayWidth clears the value of the "display_width" field.
func (du *DevicesUpdate) ClearDisplayWidth() *DevicesUpdate {
	du.mutation.ClearDisplayWidth()
	return du
}

// SetDisplayHeight sets the "display_height" field.
func (du *DevicesUpdate) SetDisplayHeight(u uint16) *DevicesUpdate {
	du.mutation.ResetDisplayHeight()
	du.mutation.SetDisplayHeight(u)
	return du
}

// SetNillableDisplayHeight sets the "display_height" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableDisplayHeight(u *uint16) *DevicesUpdate {
	if u != nil {
		du.SetDisplayHeight(*u)
	}
	return du
}

// AddDisplayHeight adds u to the "display_height" field.
func (du *DevicesUpdate) AddDisplayHeight(u int16) *DevicesUpdate {
	du.mutation.AddDisplayHeight(u)
	return du
}

// ClearDisplayHeight clears the value of the "display_height" field.
func (du *DevicesUpdate) ClearDisplayHeight() *DevicesUpdate {
	du.mutation.ClearDisplayHeight()
	return du
}

// SetRoiX sets the "roi_x" field.
func (du *DevicesUpdate) SetRoiX(u uint16) *DevicesUpdate {
	du.mutation.ResetRoiX()
	du.mutation.SetRoiX(u)
	return du
}

// SetNillableRoiX sets the "roi_x" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableRoiX(u *uint16) *DevicesUpdate {
	if u != nil {
		du.SetRoiX(*u)
	}
	return du
}

// AddRoiX adds u to the "roi_x" field.
func (du *DevicesUpdate) AddRoiX(u int16) *DevicesUpdate {
	du.mutation.AddRoiX(u)
	return du
}

// ClearRoiX clears the value of the "roi_x" field.
func (du *DevicesUpdate) ClearRoiX() *DevicesUpdate {
	du.mutation.ClearRoiX()
	return du
}

// SetRoiY sets the "roi_y" field.
func (du *DevicesUpdate) SetRoiY(u uint16) *DevicesUpdate {
	du.mutation.ResetRoiY()
	du.mutation.SetRoiY(u)
	return du
}

// SetNillableRoiY sets the "roi_y" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableRoiY(u *uint16) *DevicesUpdate {
	if u != nil {
		du.SetRoiY(*u)
	}
	return du
}

// AddRoiY adds u to the "roi_y" field.
func (du *DevicesUpdate) AddRoiY(u int16) *DevicesUpdate {
	du.mutation.AddRoiY(u)
	return du
}

// ClearRoiY clears the value of the "roi_y" field.
func (du *DevicesUpdate) ClearRoiY() *DevicesUpdate {
	du.mutation.ClearRoiY()
	return du
}

// SetRoiWidth sets the "roi_width" field.
func (du *DevicesUpdate) SetRoiWidth(u uint16) *DevicesUpdate {
	du.mutation.ResetRoiWidth()
	du.mutation.SetRoiWidth(u)
	return du
}

// SetNillableRoiWidth sets the "roi_width" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableRoiWidth(u *uint16) *DevicesUpdate {
	if u != nil {
		du.SetRoiWidth(*u)
	}
	return du
}

// AddRoiWidth adds u to the "roi_width" field.
func (du *DevicesUpdate) AddRoiWidth(u int16) *DevicesUpdate {
	du.mutation.AddRoiWidth(u)
	return du
}

// ClearRoiWidth clears the value of the "roi_width" field.
func (du *DevicesUpdate) ClearRoiWidth() *DevicesUpdate {
	du.mutation.ClearRoiWidth()
	return du
}

// SetRoiHeight sets the "roi_height" field.
func (du *DevicesUpdate) SetRoiHeight(u uint16) *DevicesUpdate {
	du.mutation.ResetRoiHeight()
	du.mutation.SetRoiHeight(u)
	return du
}

// SetNillableRoiHeight sets the "roi_height" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableRoiHeight(u *uint16) *DevicesUpdate {
	if u != nil {
		du.SetRoiHeight(*u)
	}
	return du
}

// AddRoiHeight adds u to the "roi_height" field.
func (du *DevicesUpdate) AddRoiHeight(u int16) *DevicesUpdate {
	du.mutation.AddRoiHeight(u)
	return du
}

// ClearRoiHeight clears the value of the "roi_height" field.
func (du *DevicesUpdate) ClearRoiHeight() *DevicesUpdate {
	du.mutation.ClearRoiHeight()
	return du
}

// SetRoiRotationAngle sets the "roi_rotation_angle" field.
func (du *DevicesUpdate) SetRoiRotationAngle(f float64) *DevicesUpdate {
	du.mutation.ResetRoiRotationAngle()
	du.mutation.SetRoiRotationAngle(f)
	return du
}

// SetNillableRoiRotationAngle sets the "roi_rotation_angle" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableRoiRotationAngle(f *float64) *DevicesUpdate {
	if f != nil {
		du.SetRoiRotationAngle(*f)
	}
	return du
}

// AddRoiRotationAngle adds f to the "roi_rotation_angle" field.
func (du *DevicesUpdate) AddRoiRotationAngle(f float64) *DevicesUpdate {
	du.mutation.AddRoiRotationAngle(f)
	return du
}

// ClearRoiRotationAngle clears the value of the "roi_rotation_angle" field.
func (du *DevicesUpdate) ClearRoiRotationAngle() *DevicesUpdate {
	du.mutation.ClearRoiRotationAngle()
	return du
}

// SetRoiEnabled sets the "roi_enabled" field.
func (du *DevicesUpdate) SetRoiEnabled(b bool) *DevicesUpdate {
	du.mutation.SetRoiEnabled(b)
	return du
}

// SetNillableRoiEnabled sets the "roi_enabled" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableRoiEnabled(b *bool) *DevicesUpdate {
	if b != nil {
		du.SetRoiEnabled(*b)
	}
	return du
}

// SetEnabled sets the "enabled" field.
func (du *DevicesUpdate) SetEnabled(b bool) *DevicesUpdate {
	du.mutation.SetEnabled(b)
	return du
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableEnabled(b *bool) *DevicesUpdate {
	if b != nil {
		du.SetEnabled(*b)
	}
	return du
}

// SetTargetFps sets the "target_fps" field.
func (du *DevicesUpdate) SetTargetFps(i int64) *DevicesUpdate {
	du.mutation.ResetTargetFps()
	du.mutation.SetTargetFps(i)
	return du
}

// SetNillableTargetFps sets the "target_fps" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableTargetFps(i *int64) *DevicesUpdate {
	if i != nil {
		du.SetTargetFps(*i)
	}
	return du
}

// AddTargetFps adds i to the "target_fps" field.
func (du *DevicesUpdate) AddTargetFps(i int64) *DevicesUpdate {
	du.mutation.AddTargetFps(i)
	return du
}

// SetDwellDuration sets the "dwell_duration" field.
func (du *DevicesUpdate) SetDwellDuration(i int64) *DevicesUpdate {
	du.mutation.ResetDwellDuration()
	du.mutation.SetDwellDuration(i)
	return du
}

// SetNillableDwellDuration sets the "dwell_duration" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableDwellDuration(i *int64) *DevicesUpdate {
	if i != nil {
		du.SetDwellDuration(*i)
	}
	return du
}

// AddDwellDuration adds i to the "dwell_duration" field.
func (du *DevicesUpdate) AddDwellDuration(i int64) *DevicesUpdate {
	du.mutation.AddDwellDuration(i)
	return du
}

// ClearDwellDuration clears the value of the "dwell_duration" field.
func (du *DevicesUpdate) ClearDwellDuration() *DevicesUpdate {
	du.mutation.ClearDwellDuration()
	return du
}

// SetCreatedTime sets the "created_time" field.
func (du *DevicesUpdate) SetCreatedTime(t time.Time) *DevicesUpdate {
	du.mutation.SetCreatedTime(t)
	return du
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableCreatedTime(t *time.Time) *DevicesUpdate {
	if t != nil {
		du.SetCreatedTime(*t)
	}
	return du
}

// ClearCreatedTime clears the value of the "created_time" field.
func (du *DevicesUpdate) ClearCreatedTime() *DevicesUpdate {
	du.mutation.ClearCreatedTime()
	return du
}

// SetUpdatedTime sets the "updated_time" field.
func (du *DevicesUpdate) SetUpdatedTime(t time.Time) *DevicesUpdate {
	du.mutation.SetUpdatedTime(t)
	return du
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (du *DevicesUpdate) ClearUpdatedTime() *DevicesUpdate {
	du.mutation.ClearUpdatedTime()
	return du
}

// Mutation returns the DevicesMutation object of the builder.
func (du *DevicesUpdate) Mutation() *DevicesMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DevicesUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DevicesUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DevicesUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DevicesUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DevicesUpdate) defaults() {
	if _, ok := du.mutation.UpdatedTime(); !ok && !du.mutation.UpdatedTimeCleared() {
		v := devices.UpdateDefaultUpdatedTime()
		du.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DevicesUpdate) check() error {
	if v, ok := du.mutation.Name(); ok {
		if err := devices.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "Devices.name": %w`, err)}
		}
	}
	if v, ok := du.mutation.URL(); ok {
		if err := devices.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`genclients: validator failed for field "Devices.url": %w`, err)}
		}
	}
	if v, ok := du.mutation.Location(); ok {
		if err := devices.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`genclients: validator failed for field "Devices.location": %w`, err)}
		}
	}
	return nil
}

func (du *DevicesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(devices.Table, devices.Columns, sqlgraph.NewFieldSpec(devices.FieldID, field.TypeInt64))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(devices.FieldName, field.TypeString, value)
	}
	if du.mutation.NameCleared() {
		_spec.ClearField(devices.FieldName, field.TypeString)
	}
	if value, ok := du.mutation.URL(); ok {
		_spec.SetField(devices.FieldURL, field.TypeString, value)
	}
	if value, ok := du.mutation.Location(); ok {
		_spec.SetField(devices.FieldLocation, field.TypeString, value)
	}
	if value, ok := du.mutation.FuncType(); ok {
		_spec.SetField(devices.FieldFuncType, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedFuncType(); ok {
		_spec.AddField(devices.FieldFuncType, field.TypeInt, value)
	}
	if du.mutation.FuncTypeCleared() {
		_spec.ClearField(devices.FieldFuncType, field.TypeInt)
	}
	if value, ok := du.mutation.DisplayWidth(); ok {
		_spec.SetField(devices.FieldDisplayWidth, field.TypeUint16, value)
	}
	if value, ok := du.mutation.AddedDisplayWidth(); ok {
		_spec.AddField(devices.FieldDisplayWidth, field.TypeUint16, value)
	}
	if du.mutation.DisplayWidthCleared() {
		_spec.ClearField(devices.FieldDisplayWidth, field.TypeUint16)
	}
	if value, ok := du.mutation.DisplayHeight(); ok {
		_spec.SetField(devices.FieldDisplayHeight, field.TypeUint16, value)
	}
	if value, ok := du.mutation.AddedDisplayHeight(); ok {
		_spec.AddField(devices.FieldDisplayHeight, field.TypeUint16, value)
	}
	if du.mutation.DisplayHeightCleared() {
		_spec.ClearField(devices.FieldDisplayHeight, field.TypeUint16)
	}
	if value, ok := du.mutation.RoiX(); ok {
		_spec.SetField(devices.FieldRoiX, field.TypeUint16, value)
	}
	if value, ok := du.mutation.AddedRoiX(); ok {
		_spec.AddField(devices.FieldRoiX, field.TypeUint16, value)
	}
	if du.mutation.RoiXCleared() {
		_spec.ClearField(devices.FieldRoiX, field.TypeUint16)
	}
	if value, ok := du.mutation.RoiY(); ok {
		_spec.SetField(devices.FieldRoiY, field.TypeUint16, value)
	}
	if value, ok := du.mutation.AddedRoiY(); ok {
		_spec.AddField(devices.FieldRoiY, field.TypeUint16, value)
	}
	if du.mutation.RoiYCleared() {
		_spec.ClearField(devices.FieldRoiY, field.TypeUint16)
	}
	if value, ok := du.mutation.RoiWidth(); ok {
		_spec.SetField(devices.FieldRoiWidth, field.TypeUint16, value)
	}
	if value, ok := du.mutation.AddedRoiWidth(); ok {
		_spec.AddField(devices.FieldRoiWidth, field.TypeUint16, value)
	}
	if du.mutation.RoiWidthCleared() {
		_spec.ClearField(devices.FieldRoiWidth, field.TypeUint16)
	}
	if value, ok := du.mutation.RoiHeight(); ok {
		_spec.SetField(devices.FieldRoiHeight, field.TypeUint16, value)
	}
	if value, ok := du.mutation.AddedRoiHeight(); ok {
		_spec.AddField(devices.FieldRoiHeight, field.TypeUint16, value)
	}
	if du.mutation.RoiHeightCleared() {
		_spec.ClearField(devices.FieldRoiHeight, field.TypeUint16)
	}
	if value, ok := du.mutation.RoiRotationAngle(); ok {
		_spec.SetField(devices.FieldRoiRotationAngle, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedRoiRotationAngle(); ok {
		_spec.AddField(devices.FieldRoiRotationAngle, field.TypeFloat64, value)
	}
	if du.mutation.RoiRotationAngleCleared() {
		_spec.ClearField(devices.FieldRoiRotationAngle, field.TypeFloat64)
	}
	if value, ok := du.mutation.RoiEnabled(); ok {
		_spec.SetField(devices.FieldRoiEnabled, field.TypeBool, value)
	}
	if value, ok := du.mutation.Enabled(); ok {
		_spec.SetField(devices.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := du.mutation.TargetFps(); ok {
		_spec.SetField(devices.FieldTargetFps, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedTargetFps(); ok {
		_spec.AddField(devices.FieldTargetFps, field.TypeInt64, value)
	}
	if value, ok := du.mutation.DwellDuration(); ok {
		_spec.SetField(devices.FieldDwellDuration, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedDwellDuration(); ok {
		_spec.AddField(devices.FieldDwellDuration, field.TypeInt64, value)
	}
	if du.mutation.DwellDurationCleared() {
		_spec.ClearField(devices.FieldDwellDuration, field.TypeInt64)
	}
	if value, ok := du.mutation.CreatedTime(); ok {
		_spec.SetField(devices.FieldCreatedTime, field.TypeTime, value)
	}
	if du.mutation.CreatedTimeCleared() {
		_spec.ClearField(devices.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := du.mutation.UpdatedTime(); ok {
		_spec.SetField(devices.FieldUpdatedTime, field.TypeTime, value)
	}
	if du.mutation.UpdatedTimeCleared() {
		_spec.ClearField(devices.FieldUpdatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devices.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DevicesUpdateOne is the builder for updating a single Devices entity.
type DevicesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DevicesMutation
}

// SetName sets the "name" field.
func (duo *DevicesUpdateOne) SetName(s string) *DevicesUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableName(s *string) *DevicesUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// ClearName clears the value of the "name" field.
func (duo *DevicesUpdateOne) ClearName() *DevicesUpdateOne {
	duo.mutation.ClearName()
	return duo
}

// SetURL sets the "url" field.
func (duo *DevicesUpdateOne) SetURL(s string) *DevicesUpdateOne {
	duo.mutation.SetURL(s)
	return duo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableURL(s *string) *DevicesUpdateOne {
	if s != nil {
		duo.SetURL(*s)
	}
	return duo
}

// SetLocation sets the "location" field.
func (duo *DevicesUpdateOne) SetLocation(s string) *DevicesUpdateOne {
	duo.mutation.SetLocation(s)
	return duo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableLocation(s *string) *DevicesUpdateOne {
	if s != nil {
		duo.SetLocation(*s)
	}
	return duo
}

// SetFuncType sets the "func_type" field.
func (duo *DevicesUpdateOne) SetFuncType(i int) *DevicesUpdateOne {
	duo.mutation.ResetFuncType()
	duo.mutation.SetFuncType(i)
	return duo
}

// SetNillableFuncType sets the "func_type" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableFuncType(i *int) *DevicesUpdateOne {
	if i != nil {
		duo.SetFuncType(*i)
	}
	return duo
}

// AddFuncType adds i to the "func_type" field.
func (duo *DevicesUpdateOne) AddFuncType(i int) *DevicesUpdateOne {
	duo.mutation.AddFuncType(i)
	return duo
}

// ClearFuncType clears the value of the "func_type" field.
func (duo *DevicesUpdateOne) ClearFuncType() *DevicesUpdateOne {
	duo.mutation.ClearFuncType()
	return duo
}

// SetDisplayWidth sets the "display_width" field.
func (duo *DevicesUpdateOne) SetDisplayWidth(u uint16) *DevicesUpdateOne {
	duo.mutation.ResetDisplayWidth()
	duo.mutation.SetDisplayWidth(u)
	return duo
}

// SetNillableDisplayWidth sets the "display_width" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableDisplayWidth(u *uint16) *DevicesUpdateOne {
	if u != nil {
		duo.SetDisplayWidth(*u)
	}
	return duo
}

// AddDisplayWidth adds u to the "display_width" field.
func (duo *DevicesUpdateOne) AddDisplayWidth(u int16) *DevicesUpdateOne {
	duo.mutation.AddDisplayWidth(u)
	return duo
}

// ClearDisplayWidth clears the value of the "display_width" field.
func (duo *DevicesUpdateOne) ClearDisplayWidth() *DevicesUpdateOne {
	duo.mutation.ClearDisplayWidth()
	return duo
}

// SetDisplayHeight sets the "display_height" field.
func (duo *DevicesUpdateOne) SetDisplayHeight(u uint16) *DevicesUpdateOne {
	duo.mutation.ResetDisplayHeight()
	duo.mutation.SetDisplayHeight(u)
	return duo
}

// SetNillableDisplayHeight sets the "display_height" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableDisplayHeight(u *uint16) *DevicesUpdateOne {
	if u != nil {
		duo.SetDisplayHeight(*u)
	}
	return duo
}

// AddDisplayHeight adds u to the "display_height" field.
func (duo *DevicesUpdateOne) AddDisplayHeight(u int16) *DevicesUpdateOne {
	duo.mutation.AddDisplayHeight(u)
	return duo
}

// ClearDisplayHeight clears the value of the "display_height" field.
func (duo *DevicesUpdateOne) ClearDisplayHeight() *DevicesUpdateOne {
	duo.mutation.ClearDisplayHeight()
	return duo
}

// SetRoiX sets the "roi_x" field.
func (duo *DevicesUpdateOne) SetRoiX(u uint16) *DevicesUpdateOne {
	duo.mutation.ResetRoiX()
	duo.mutation.SetRoiX(u)
	return duo
}

// SetNillableRoiX sets the "roi_x" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableRoiX(u *uint16) *DevicesUpdateOne {
	if u != nil {
		duo.SetRoiX(*u)
	}
	return duo
}

// AddRoiX adds u to the "roi_x" field.
func (duo *DevicesUpdateOne) AddRoiX(u int16) *DevicesUpdateOne {
	duo.mutation.AddRoiX(u)
	return duo
}

// ClearRoiX clears the value of the "roi_x" field.
func (duo *DevicesUpdateOne) ClearRoiX() *DevicesUpdateOne {
	duo.mutation.ClearRoiX()
	return duo
}

// SetRoiY sets the "roi_y" field.
func (duo *DevicesUpdateOne) SetRoiY(u uint16) *DevicesUpdateOne {
	duo.mutation.ResetRoiY()
	duo.mutation.SetRoiY(u)
	return duo
}

// SetNillableRoiY sets the "roi_y" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableRoiY(u *uint16) *DevicesUpdateOne {
	if u != nil {
		duo.SetRoiY(*u)
	}
	return duo
}

// AddRoiY adds u to the "roi_y" field.
func (duo *DevicesUpdateOne) AddRoiY(u int16) *DevicesUpdateOne {
	duo.mutation.AddRoiY(u)
	return duo
}

// ClearRoiY clears the value of the "roi_y" field.
func (duo *DevicesUpdateOne) ClearRoiY() *DevicesUpdateOne {
	duo.mutation.ClearRoiY()
	return duo
}

// SetRoiWidth sets the "roi_width" field.
func (duo *DevicesUpdateOne) SetRoiWidth(u uint16) *DevicesUpdateOne {
	duo.mutation.ResetRoiWidth()
	duo.mutation.SetRoiWidth(u)
	return duo
}

// SetNillableRoiWidth sets the "roi_width" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableRoiWidth(u *uint16) *DevicesUpdateOne {
	if u != nil {
		duo.SetRoiWidth(*u)
	}
	return duo
}

// AddRoiWidth adds u to the "roi_width" field.
func (duo *DevicesUpdateOne) AddRoiWidth(u int16) *DevicesUpdateOne {
	duo.mutation.AddRoiWidth(u)
	return duo
}

// ClearRoiWidth clears the value of the "roi_width" field.
func (duo *DevicesUpdateOne) ClearRoiWidth() *DevicesUpdateOne {
	duo.mutation.ClearRoiWidth()
	return duo
}

// SetRoiHeight sets the "roi_height" field.
func (duo *DevicesUpdateOne) SetRoiHeight(u uint16) *DevicesUpdateOne {
	duo.mutation.ResetRoiHeight()
	duo.mutation.SetRoiHeight(u)
	return duo
}

// SetNillableRoiHeight sets the "roi_height" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableRoiHeight(u *uint16) *DevicesUpdateOne {
	if u != nil {
		duo.SetRoiHeight(*u)
	}
	return duo
}

// AddRoiHeight adds u to the "roi_height" field.
func (duo *DevicesUpdateOne) AddRoiHeight(u int16) *DevicesUpdateOne {
	duo.mutation.AddRoiHeight(u)
	return duo
}

// ClearRoiHeight clears the value of the "roi_height" field.
func (duo *DevicesUpdateOne) ClearRoiHeight() *DevicesUpdateOne {
	duo.mutation.ClearRoiHeight()
	return duo
}

// SetRoiRotationAngle sets the "roi_rotation_angle" field.
func (duo *DevicesUpdateOne) SetRoiRotationAngle(f float64) *DevicesUpdateOne {
	duo.mutation.ResetRoiRotationAngle()
	duo.mutation.SetRoiRotationAngle(f)
	return duo
}

// SetNillableRoiRotationAngle sets the "roi_rotation_angle" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableRoiRotationAngle(f *float64) *DevicesUpdateOne {
	if f != nil {
		duo.SetRoiRotationAngle(*f)
	}
	return duo
}

// AddRoiRotationAngle adds f to the "roi_rotation_angle" field.
func (duo *DevicesUpdateOne) AddRoiRotationAngle(f float64) *DevicesUpdateOne {
	duo.mutation.AddRoiRotationAngle(f)
	return duo
}

// ClearRoiRotationAngle clears the value of the "roi_rotation_angle" field.
func (duo *DevicesUpdateOne) ClearRoiRotationAngle() *DevicesUpdateOne {
	duo.mutation.ClearRoiRotationAngle()
	return duo
}

// SetRoiEnabled sets the "roi_enabled" field.
func (duo *DevicesUpdateOne) SetRoiEnabled(b bool) *DevicesUpdateOne {
	duo.mutation.SetRoiEnabled(b)
	return duo
}

// SetNillableRoiEnabled sets the "roi_enabled" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableRoiEnabled(b *bool) *DevicesUpdateOne {
	if b != nil {
		duo.SetRoiEnabled(*b)
	}
	return duo
}

// SetEnabled sets the "enabled" field.
func (duo *DevicesUpdateOne) SetEnabled(b bool) *DevicesUpdateOne {
	duo.mutation.SetEnabled(b)
	return duo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableEnabled(b *bool) *DevicesUpdateOne {
	if b != nil {
		duo.SetEnabled(*b)
	}
	return duo
}

// SetTargetFps sets the "target_fps" field.
func (duo *DevicesUpdateOne) SetTargetFps(i int64) *DevicesUpdateOne {
	duo.mutation.ResetTargetFps()
	duo.mutation.SetTargetFps(i)
	return duo
}

// SetNillableTargetFps sets the "target_fps" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableTargetFps(i *int64) *DevicesUpdateOne {
	if i != nil {
		duo.SetTargetFps(*i)
	}
	return duo
}

// AddTargetFps adds i to the "target_fps" field.
func (duo *DevicesUpdateOne) AddTargetFps(i int64) *DevicesUpdateOne {
	duo.mutation.AddTargetFps(i)
	return duo
}

// SetDwellDuration sets the "dwell_duration" field.
func (duo *DevicesUpdateOne) SetDwellDuration(i int64) *DevicesUpdateOne {
	duo.mutation.ResetDwellDuration()
	duo.mutation.SetDwellDuration(i)
	return duo
}

// SetNillableDwellDuration sets the "dwell_duration" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableDwellDuration(i *int64) *DevicesUpdateOne {
	if i != nil {
		duo.SetDwellDuration(*i)
	}
	return duo
}

// AddDwellDuration adds i to the "dwell_duration" field.
func (duo *DevicesUpdateOne) AddDwellDuration(i int64) *DevicesUpdateOne {
	duo.mutation.AddDwellDuration(i)
	return duo
}

// ClearDwellDuration clears the value of the "dwell_duration" field.
func (duo *DevicesUpdateOne) ClearDwellDuration() *DevicesUpdateOne {
	duo.mutation.ClearDwellDuration()
	return duo
}

// SetCreatedTime sets the "created_time" field.
func (duo *DevicesUpdateOne) SetCreatedTime(t time.Time) *DevicesUpdateOne {
	duo.mutation.SetCreatedTime(t)
	return duo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableCreatedTime(t *time.Time) *DevicesUpdateOne {
	if t != nil {
		duo.SetCreatedTime(*t)
	}
	return duo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (duo *DevicesUpdateOne) ClearCreatedTime() *DevicesUpdateOne {
	duo.mutation.ClearCreatedTime()
	return duo
}

// SetUpdatedTime sets the "updated_time" field.
func (duo *DevicesUpdateOne) SetUpdatedTime(t time.Time) *DevicesUpdateOne {
	duo.mutation.SetUpdatedTime(t)
	return duo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (duo *DevicesUpdateOne) ClearUpdatedTime() *DevicesUpdateOne {
	duo.mutation.ClearUpdatedTime()
	return duo
}

// Mutation returns the DevicesMutation object of the builder.
func (duo *DevicesUpdateOne) Mutation() *DevicesMutation {
	return duo.mutation
}

// Where appends a list predicates to the DevicesUpdate builder.
func (duo *DevicesUpdateOne) Where(ps ...predicate.Devices) *DevicesUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DevicesUpdateOne) Select(field string, fields ...string) *DevicesUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Devices entity.
func (duo *DevicesUpdateOne) Save(ctx context.Context) (*Devices, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DevicesUpdateOne) SaveX(ctx context.Context) *Devices {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DevicesUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DevicesUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DevicesUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedTime(); !ok && !duo.mutation.UpdatedTimeCleared() {
		v := devices.UpdateDefaultUpdatedTime()
		duo.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DevicesUpdateOne) check() error {
	if v, ok := duo.mutation.Name(); ok {
		if err := devices.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "Devices.name": %w`, err)}
		}
	}
	if v, ok := duo.mutation.URL(); ok {
		if err := devices.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`genclients: validator failed for field "Devices.url": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Location(); ok {
		if err := devices.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`genclients: validator failed for field "Devices.location": %w`, err)}
		}
	}
	return nil
}

func (duo *DevicesUpdateOne) sqlSave(ctx context.Context) (_node *Devices, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(devices.Table, devices.Columns, sqlgraph.NewFieldSpec(devices.FieldID, field.TypeInt64))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "Devices.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, devices.FieldID)
		for _, f := range fields {
			if !devices.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != devices.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(devices.FieldName, field.TypeString, value)
	}
	if duo.mutation.NameCleared() {
		_spec.ClearField(devices.FieldName, field.TypeString)
	}
	if value, ok := duo.mutation.URL(); ok {
		_spec.SetField(devices.FieldURL, field.TypeString, value)
	}
	if value, ok := duo.mutation.Location(); ok {
		_spec.SetField(devices.FieldLocation, field.TypeString, value)
	}
	if value, ok := duo.mutation.FuncType(); ok {
		_spec.SetField(devices.FieldFuncType, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedFuncType(); ok {
		_spec.AddField(devices.FieldFuncType, field.TypeInt, value)
	}
	if duo.mutation.FuncTypeCleared() {
		_spec.ClearField(devices.FieldFuncType, field.TypeInt)
	}
	if value, ok := duo.mutation.DisplayWidth(); ok {
		_spec.SetField(devices.FieldDisplayWidth, field.TypeUint16, value)
	}
	if value, ok := duo.mutation.AddedDisplayWidth(); ok {
		_spec.AddField(devices.FieldDisplayWidth, field.TypeUint16, value)
	}
	if duo.mutation.DisplayWidthCleared() {
		_spec.ClearField(devices.FieldDisplayWidth, field.TypeUint16)
	}
	if value, ok := duo.mutation.DisplayHeight(); ok {
		_spec.SetField(devices.FieldDisplayHeight, field.TypeUint16, value)
	}
	if value, ok := duo.mutation.AddedDisplayHeight(); ok {
		_spec.AddField(devices.FieldDisplayHeight, field.TypeUint16, value)
	}
	if duo.mutation.DisplayHeightCleared() {
		_spec.ClearField(devices.FieldDisplayHeight, field.TypeUint16)
	}
	if value, ok := duo.mutation.RoiX(); ok {
		_spec.SetField(devices.FieldRoiX, field.TypeUint16, value)
	}
	if value, ok := duo.mutation.AddedRoiX(); ok {
		_spec.AddField(devices.FieldRoiX, field.TypeUint16, value)
	}
	if duo.mutation.RoiXCleared() {
		_spec.ClearField(devices.FieldRoiX, field.TypeUint16)
	}
	if value, ok := duo.mutation.RoiY(); ok {
		_spec.SetField(devices.FieldRoiY, field.TypeUint16, value)
	}
	if value, ok := duo.mutation.AddedRoiY(); ok {
		_spec.AddField(devices.FieldRoiY, field.TypeUint16, value)
	}
	if duo.mutation.RoiYCleared() {
		_spec.ClearField(devices.FieldRoiY, field.TypeUint16)
	}
	if value, ok := duo.mutation.RoiWidth(); ok {
		_spec.SetField(devices.FieldRoiWidth, field.TypeUint16, value)
	}
	if value, ok := duo.mutation.AddedRoiWidth(); ok {
		_spec.AddField(devices.FieldRoiWidth, field.TypeUint16, value)
	}
	if duo.mutation.RoiWidthCleared() {
		_spec.ClearField(devices.FieldRoiWidth, field.TypeUint16)
	}
	if value, ok := duo.mutation.RoiHeight(); ok {
		_spec.SetField(devices.FieldRoiHeight, field.TypeUint16, value)
	}
	if value, ok := duo.mutation.AddedRoiHeight(); ok {
		_spec.AddField(devices.FieldRoiHeight, field.TypeUint16, value)
	}
	if duo.mutation.RoiHeightCleared() {
		_spec.ClearField(devices.FieldRoiHeight, field.TypeUint16)
	}
	if value, ok := duo.mutation.RoiRotationAngle(); ok {
		_spec.SetField(devices.FieldRoiRotationAngle, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedRoiRotationAngle(); ok {
		_spec.AddField(devices.FieldRoiRotationAngle, field.TypeFloat64, value)
	}
	if duo.mutation.RoiRotationAngleCleared() {
		_spec.ClearField(devices.FieldRoiRotationAngle, field.TypeFloat64)
	}
	if value, ok := duo.mutation.RoiEnabled(); ok {
		_spec.SetField(devices.FieldRoiEnabled, field.TypeBool, value)
	}
	if value, ok := duo.mutation.Enabled(); ok {
		_spec.SetField(devices.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := duo.mutation.TargetFps(); ok {
		_spec.SetField(devices.FieldTargetFps, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedTargetFps(); ok {
		_spec.AddField(devices.FieldTargetFps, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.DwellDuration(); ok {
		_spec.SetField(devices.FieldDwellDuration, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedDwellDuration(); ok {
		_spec.AddField(devices.FieldDwellDuration, field.TypeInt64, value)
	}
	if duo.mutation.DwellDurationCleared() {
		_spec.ClearField(devices.FieldDwellDuration, field.TypeInt64)
	}
	if value, ok := duo.mutation.CreatedTime(); ok {
		_spec.SetField(devices.FieldCreatedTime, field.TypeTime, value)
	}
	if duo.mutation.CreatedTimeCleared() {
		_spec.ClearField(devices.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := duo.mutation.UpdatedTime(); ok {
		_spec.SetField(devices.FieldUpdatedTime, field.TypeTime, value)
	}
	if duo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(devices.FieldUpdatedTime, field.TypeTime)
	}
	_node = &Devices{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devices.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
