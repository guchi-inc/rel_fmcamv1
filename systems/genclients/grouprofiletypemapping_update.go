// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/grouprofiletypemapping"
	"fmcam/systems/genclients/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GrouProfileTypeMappingUpdate is the builder for updating GrouProfileTypeMapping entities.
type GrouProfileTypeMappingUpdate struct {
	config
	hooks    []Hook
	mutation *GrouProfileTypeMappingMutation
}

// Where appends a list predicates to the GrouProfileTypeMappingUpdate builder.
func (gptmu *GrouProfileTypeMappingUpdate) Where(ps ...predicate.GrouProfileTypeMapping) *GrouProfileTypeMappingUpdate {
	gptmu.mutation.Where(ps...)
	return gptmu
}

// SetGroupID sets the "group_id" field.
func (gptmu *GrouProfileTypeMappingUpdate) SetGroupID(i int64) *GrouProfileTypeMappingUpdate {
	gptmu.mutation.ResetGroupID()
	gptmu.mutation.SetGroupID(i)
	return gptmu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (gptmu *GrouProfileTypeMappingUpdate) SetNillableGroupID(i *int64) *GrouProfileTypeMappingUpdate {
	if i != nil {
		gptmu.SetGroupID(*i)
	}
	return gptmu
}

// AddGroupID adds i to the "group_id" field.
func (gptmu *GrouProfileTypeMappingUpdate) AddGroupID(i int64) *GrouProfileTypeMappingUpdate {
	gptmu.mutation.AddGroupID(i)
	return gptmu
}

// SetProfileTypeID sets the "profile_type_id" field.
func (gptmu *GrouProfileTypeMappingUpdate) SetProfileTypeID(i int64) *GrouProfileTypeMappingUpdate {
	gptmu.mutation.ResetProfileTypeID()
	gptmu.mutation.SetProfileTypeID(i)
	return gptmu
}

// SetNillableProfileTypeID sets the "profile_type_id" field if the given value is not nil.
func (gptmu *GrouProfileTypeMappingUpdate) SetNillableProfileTypeID(i *int64) *GrouProfileTypeMappingUpdate {
	if i != nil {
		gptmu.SetProfileTypeID(*i)
	}
	return gptmu
}

// AddProfileTypeID adds i to the "profile_type_id" field.
func (gptmu *GrouProfileTypeMappingUpdate) AddProfileTypeID(i int64) *GrouProfileTypeMappingUpdate {
	gptmu.mutation.AddProfileTypeID(i)
	return gptmu
}

// SetCreatedTime sets the "created_time" field.
func (gptmu *GrouProfileTypeMappingUpdate) SetCreatedTime(t time.Time) *GrouProfileTypeMappingUpdate {
	gptmu.mutation.SetCreatedTime(t)
	return gptmu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (gptmu *GrouProfileTypeMappingUpdate) SetNillableCreatedTime(t *time.Time) *GrouProfileTypeMappingUpdate {
	if t != nil {
		gptmu.SetCreatedTime(*t)
	}
	return gptmu
}

// ClearCreatedTime clears the value of the "created_time" field.
func (gptmu *GrouProfileTypeMappingUpdate) ClearCreatedTime() *GrouProfileTypeMappingUpdate {
	gptmu.mutation.ClearCreatedTime()
	return gptmu
}

// Mutation returns the GrouProfileTypeMappingMutation object of the builder.
func (gptmu *GrouProfileTypeMappingUpdate) Mutation() *GrouProfileTypeMappingMutation {
	return gptmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gptmu *GrouProfileTypeMappingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gptmu.sqlSave, gptmu.mutation, gptmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gptmu *GrouProfileTypeMappingUpdate) SaveX(ctx context.Context) int {
	affected, err := gptmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gptmu *GrouProfileTypeMappingUpdate) Exec(ctx context.Context) error {
	_, err := gptmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gptmu *GrouProfileTypeMappingUpdate) ExecX(ctx context.Context) {
	if err := gptmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gptmu *GrouProfileTypeMappingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(grouprofiletypemapping.Table, grouprofiletypemapping.Columns, sqlgraph.NewFieldSpec(grouprofiletypemapping.FieldID, field.TypeInt64))
	if ps := gptmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gptmu.mutation.GroupID(); ok {
		_spec.SetField(grouprofiletypemapping.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := gptmu.mutation.AddedGroupID(); ok {
		_spec.AddField(grouprofiletypemapping.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := gptmu.mutation.ProfileTypeID(); ok {
		_spec.SetField(grouprofiletypemapping.FieldProfileTypeID, field.TypeInt64, value)
	}
	if value, ok := gptmu.mutation.AddedProfileTypeID(); ok {
		_spec.AddField(grouprofiletypemapping.FieldProfileTypeID, field.TypeInt64, value)
	}
	if value, ok := gptmu.mutation.CreatedTime(); ok {
		_spec.SetField(grouprofiletypemapping.FieldCreatedTime, field.TypeTime, value)
	}
	if gptmu.mutation.CreatedTimeCleared() {
		_spec.ClearField(grouprofiletypemapping.FieldCreatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gptmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grouprofiletypemapping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gptmu.mutation.done = true
	return n, nil
}

// GrouProfileTypeMappingUpdateOne is the builder for updating a single GrouProfileTypeMapping entity.
type GrouProfileTypeMappingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GrouProfileTypeMappingMutation
}

// SetGroupID sets the "group_id" field.
func (gptmuo *GrouProfileTypeMappingUpdateOne) SetGroupID(i int64) *GrouProfileTypeMappingUpdateOne {
	gptmuo.mutation.ResetGroupID()
	gptmuo.mutation.SetGroupID(i)
	return gptmuo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (gptmuo *GrouProfileTypeMappingUpdateOne) SetNillableGroupID(i *int64) *GrouProfileTypeMappingUpdateOne {
	if i != nil {
		gptmuo.SetGroupID(*i)
	}
	return gptmuo
}

// AddGroupID adds i to the "group_id" field.
func (gptmuo *GrouProfileTypeMappingUpdateOne) AddGroupID(i int64) *GrouProfileTypeMappingUpdateOne {
	gptmuo.mutation.AddGroupID(i)
	return gptmuo
}

// SetProfileTypeID sets the "profile_type_id" field.
func (gptmuo *GrouProfileTypeMappingUpdateOne) SetProfileTypeID(i int64) *GrouProfileTypeMappingUpdateOne {
	gptmuo.mutation.ResetProfileTypeID()
	gptmuo.mutation.SetProfileTypeID(i)
	return gptmuo
}

// SetNillableProfileTypeID sets the "profile_type_id" field if the given value is not nil.
func (gptmuo *GrouProfileTypeMappingUpdateOne) SetNillableProfileTypeID(i *int64) *GrouProfileTypeMappingUpdateOne {
	if i != nil {
		gptmuo.SetProfileTypeID(*i)
	}
	return gptmuo
}

// AddProfileTypeID adds i to the "profile_type_id" field.
func (gptmuo *GrouProfileTypeMappingUpdateOne) AddProfileTypeID(i int64) *GrouProfileTypeMappingUpdateOne {
	gptmuo.mutation.AddProfileTypeID(i)
	return gptmuo
}

// SetCreatedTime sets the "created_time" field.
func (gptmuo *GrouProfileTypeMappingUpdateOne) SetCreatedTime(t time.Time) *GrouProfileTypeMappingUpdateOne {
	gptmuo.mutation.SetCreatedTime(t)
	return gptmuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (gptmuo *GrouProfileTypeMappingUpdateOne) SetNillableCreatedTime(t *time.Time) *GrouProfileTypeMappingUpdateOne {
	if t != nil {
		gptmuo.SetCreatedTime(*t)
	}
	return gptmuo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (gptmuo *GrouProfileTypeMappingUpdateOne) ClearCreatedTime() *GrouProfileTypeMappingUpdateOne {
	gptmuo.mutation.ClearCreatedTime()
	return gptmuo
}

// Mutation returns the GrouProfileTypeMappingMutation object of the builder.
func (gptmuo *GrouProfileTypeMappingUpdateOne) Mutation() *GrouProfileTypeMappingMutation {
	return gptmuo.mutation
}

// Where appends a list predicates to the GrouProfileTypeMappingUpdate builder.
func (gptmuo *GrouProfileTypeMappingUpdateOne) Where(ps ...predicate.GrouProfileTypeMapping) *GrouProfileTypeMappingUpdateOne {
	gptmuo.mutation.Where(ps...)
	return gptmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gptmuo *GrouProfileTypeMappingUpdateOne) Select(field string, fields ...string) *GrouProfileTypeMappingUpdateOne {
	gptmuo.fields = append([]string{field}, fields...)
	return gptmuo
}

// Save executes the query and returns the updated GrouProfileTypeMapping entity.
func (gptmuo *GrouProfileTypeMappingUpdateOne) Save(ctx context.Context) (*GrouProfileTypeMapping, error) {
	return withHooks(ctx, gptmuo.sqlSave, gptmuo.mutation, gptmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gptmuo *GrouProfileTypeMappingUpdateOne) SaveX(ctx context.Context) *GrouProfileTypeMapping {
	node, err := gptmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gptmuo *GrouProfileTypeMappingUpdateOne) Exec(ctx context.Context) error {
	_, err := gptmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gptmuo *GrouProfileTypeMappingUpdateOne) ExecX(ctx context.Context) {
	if err := gptmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gptmuo *GrouProfileTypeMappingUpdateOne) sqlSave(ctx context.Context) (_node *GrouProfileTypeMapping, err error) {
	_spec := sqlgraph.NewUpdateSpec(grouprofiletypemapping.Table, grouprofiletypemapping.Columns, sqlgraph.NewFieldSpec(grouprofiletypemapping.FieldID, field.TypeInt64))
	id, ok := gptmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "GrouProfileTypeMapping.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gptmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grouprofiletypemapping.FieldID)
		for _, f := range fields {
			if !grouprofiletypemapping.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != grouprofiletypemapping.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gptmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gptmuo.mutation.GroupID(); ok {
		_spec.SetField(grouprofiletypemapping.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := gptmuo.mutation.AddedGroupID(); ok {
		_spec.AddField(grouprofiletypemapping.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := gptmuo.mutation.ProfileTypeID(); ok {
		_spec.SetField(grouprofiletypemapping.FieldProfileTypeID, field.TypeInt64, value)
	}
	if value, ok := gptmuo.mutation.AddedProfileTypeID(); ok {
		_spec.AddField(grouprofiletypemapping.FieldProfileTypeID, field.TypeInt64, value)
	}
	if value, ok := gptmuo.mutation.CreatedTime(); ok {
		_spec.SetField(grouprofiletypemapping.FieldCreatedTime, field.TypeTime, value)
	}
	if gptmuo.mutation.CreatedTimeCleared() {
		_spec.ClearField(grouprofiletypemapping.FieldCreatedTime, field.TypeTime)
	}
	_node = &GrouProfileTypeMapping{config: gptmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gptmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grouprofiletypemapping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gptmuo.mutation.done = true
	return _node, nil
}
