// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"fmcam/systems/genclients/fmalertdefinition"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FmAlertDefinitionCreate is the builder for creating a FmAlertDefinition entity.
type FmAlertDefinitionCreate struct {
	config
	mutation *FmAlertDefinitionMutation
	hooks    []Hook
}

// SetAlertGroupID sets the "alert_group_id" field.
func (fadc *FmAlertDefinitionCreate) SetAlertGroupID(i int64) *FmAlertDefinitionCreate {
	fadc.mutation.SetAlertGroupID(i)
	return fadc
}

// SetNillableAlertGroupID sets the "alert_group_id" field if the given value is not nil.
func (fadc *FmAlertDefinitionCreate) SetNillableAlertGroupID(i *int64) *FmAlertDefinitionCreate {
	if i != nil {
		fadc.SetAlertGroupID(*i)
	}
	return fadc
}

// SetLevel sets the "level" field.
func (fadc *FmAlertDefinitionCreate) SetLevel(i int) *FmAlertDefinitionCreate {
	fadc.mutation.SetLevel(i)
	return fadc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (fadc *FmAlertDefinitionCreate) SetNillableLevel(i *int) *FmAlertDefinitionCreate {
	if i != nil {
		fadc.SetLevel(*i)
	}
	return fadc
}

// SetProfileTypeID sets the "profile_type_id" field.
func (fadc *FmAlertDefinitionCreate) SetProfileTypeID(i int64) *FmAlertDefinitionCreate {
	fadc.mutation.SetProfileTypeID(i)
	return fadc
}

// SetNillableProfileTypeID sets the "profile_type_id" field if the given value is not nil.
func (fadc *FmAlertDefinitionCreate) SetNillableProfileTypeID(i *int64) *FmAlertDefinitionCreate {
	if i != nil {
		fadc.SetProfileTypeID(*i)
	}
	return fadc
}

// SetAction sets the "action" field.
func (fadc *FmAlertDefinitionCreate) SetAction(s string) *FmAlertDefinitionCreate {
	fadc.mutation.SetAction(s)
	return fadc
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (fadc *FmAlertDefinitionCreate) SetNillableAction(s *string) *FmAlertDefinitionCreate {
	if s != nil {
		fadc.SetAction(*s)
	}
	return fadc
}

// SetAlarmSound sets the "alarm_sound" field.
func (fadc *FmAlertDefinitionCreate) SetAlarmSound(s string) *FmAlertDefinitionCreate {
	fadc.mutation.SetAlarmSound(s)
	return fadc
}

// SetNillableAlarmSound sets the "alarm_sound" field if the given value is not nil.
func (fadc *FmAlertDefinitionCreate) SetNillableAlarmSound(s *string) *FmAlertDefinitionCreate {
	if s != nil {
		fadc.SetAlarmSound(*s)
	}
	return fadc
}

// SetCreatedTime sets the "created_time" field.
func (fadc *FmAlertDefinitionCreate) SetCreatedTime(t time.Time) *FmAlertDefinitionCreate {
	fadc.mutation.SetCreatedTime(t)
	return fadc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fadc *FmAlertDefinitionCreate) SetNillableCreatedTime(t *time.Time) *FmAlertDefinitionCreate {
	if t != nil {
		fadc.SetCreatedTime(*t)
	}
	return fadc
}

// SetUpdatedTime sets the "updated_time" field.
func (fadc *FmAlertDefinitionCreate) SetUpdatedTime(t time.Time) *FmAlertDefinitionCreate {
	fadc.mutation.SetUpdatedTime(t)
	return fadc
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (fadc *FmAlertDefinitionCreate) SetNillableUpdatedTime(t *time.Time) *FmAlertDefinitionCreate {
	if t != nil {
		fadc.SetUpdatedTime(*t)
	}
	return fadc
}

// SetID sets the "id" field.
func (fadc *FmAlertDefinitionCreate) SetID(i int64) *FmAlertDefinitionCreate {
	fadc.mutation.SetID(i)
	return fadc
}

// Mutation returns the FmAlertDefinitionMutation object of the builder.
func (fadc *FmAlertDefinitionCreate) Mutation() *FmAlertDefinitionMutation {
	return fadc.mutation
}

// Save creates the FmAlertDefinition in the database.
func (fadc *FmAlertDefinitionCreate) Save(ctx context.Context) (*FmAlertDefinition, error) {
	return withHooks(ctx, fadc.sqlSave, fadc.mutation, fadc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fadc *FmAlertDefinitionCreate) SaveX(ctx context.Context) *FmAlertDefinition {
	v, err := fadc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fadc *FmAlertDefinitionCreate) Exec(ctx context.Context) error {
	_, err := fadc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fadc *FmAlertDefinitionCreate) ExecX(ctx context.Context) {
	if err := fadc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fadc *FmAlertDefinitionCreate) check() error {
	if v, ok := fadc.mutation.Action(); ok {
		if err := fmalertdefinition.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`genclients: validator failed for field "FmAlertDefinition.action": %w`, err)}
		}
	}
	if v, ok := fadc.mutation.AlarmSound(); ok {
		if err := fmalertdefinition.AlarmSoundValidator(v); err != nil {
			return &ValidationError{Name: "alarm_sound", err: fmt.Errorf(`genclients: validator failed for field "FmAlertDefinition.alarm_sound": %w`, err)}
		}
	}
	return nil
}

func (fadc *FmAlertDefinitionCreate) sqlSave(ctx context.Context) (*FmAlertDefinition, error) {
	if err := fadc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fadc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fadc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fadc.mutation.id = &_node.ID
	fadc.mutation.done = true
	return _node, nil
}

func (fadc *FmAlertDefinitionCreate) createSpec() (*FmAlertDefinition, *sqlgraph.CreateSpec) {
	var (
		_node = &FmAlertDefinition{config: fadc.config}
		_spec = sqlgraph.NewCreateSpec(fmalertdefinition.Table, sqlgraph.NewFieldSpec(fmalertdefinition.FieldID, field.TypeInt64))
	)
	if id, ok := fadc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fadc.mutation.AlertGroupID(); ok {
		_spec.SetField(fmalertdefinition.FieldAlertGroupID, field.TypeInt64, value)
		_node.AlertGroupID = value
	}
	if value, ok := fadc.mutation.Level(); ok {
		_spec.SetField(fmalertdefinition.FieldLevel, field.TypeInt, value)
		_node.Level = value
	}
	if value, ok := fadc.mutation.ProfileTypeID(); ok {
		_spec.SetField(fmalertdefinition.FieldProfileTypeID, field.TypeInt64, value)
		_node.ProfileTypeID = value
	}
	if value, ok := fadc.mutation.Action(); ok {
		_spec.SetField(fmalertdefinition.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := fadc.mutation.AlarmSound(); ok {
		_spec.SetField(fmalertdefinition.FieldAlarmSound, field.TypeString, value)
		_node.AlarmSound = value
	}
	if value, ok := fadc.mutation.CreatedTime(); ok {
		_spec.SetField(fmalertdefinition.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	if value, ok := fadc.mutation.UpdatedTime(); ok {
		_spec.SetField(fmalertdefinition.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = &value
	}
	return _node, _spec
}

// FmAlertDefinitionCreateBulk is the builder for creating many FmAlertDefinition entities in bulk.
type FmAlertDefinitionCreateBulk struct {
	config
	err      error
	builders []*FmAlertDefinitionCreate
}

// Save creates the FmAlertDefinition entities in the database.
func (fadcb *FmAlertDefinitionCreateBulk) Save(ctx context.Context) ([]*FmAlertDefinition, error) {
	if fadcb.err != nil {
		return nil, fadcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fadcb.builders))
	nodes := make([]*FmAlertDefinition, len(fadcb.builders))
	mutators := make([]Mutator, len(fadcb.builders))
	for i := range fadcb.builders {
		func(i int, root context.Context) {
			builder := fadcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FmAlertDefinitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fadcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fadcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fadcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fadcb *FmAlertDefinitionCreateBulk) SaveX(ctx context.Context) []*FmAlertDefinition {
	v, err := fadcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fadcb *FmAlertDefinitionCreateBulk) Exec(ctx context.Context) error {
	_, err := fadcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fadcb *FmAlertDefinitionCreateBulk) ExecX(ctx context.Context) {
	if err := fadcb.Exec(ctx); err != nil {
		panic(err)
	}
}
