// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/predicate"
	"fmcam/systems/genclients/profiletype"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProfileTypeUpdate is the builder for updating ProfileType entities.
type ProfileTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ProfileTypeMutation
}

// Where appends a list predicates to the ProfileTypeUpdate builder.
func (ptu *ProfileTypeUpdate) Where(ps ...predicate.ProfileType) *ProfileTypeUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetTypeName sets the "type_name" field.
func (ptu *ProfileTypeUpdate) SetTypeName(s string) *ProfileTypeUpdate {
	ptu.mutation.SetTypeName(s)
	return ptu
}

// SetNillableTypeName sets the "type_name" field if the given value is not nil.
func (ptu *ProfileTypeUpdate) SetNillableTypeName(s *string) *ProfileTypeUpdate {
	if s != nil {
		ptu.SetTypeName(*s)
	}
	return ptu
}

// SetWarningLevel sets the "warning_level" field.
func (ptu *ProfileTypeUpdate) SetWarningLevel(i int) *ProfileTypeUpdate {
	ptu.mutation.ResetWarningLevel()
	ptu.mutation.SetWarningLevel(i)
	return ptu
}

// SetNillableWarningLevel sets the "warning_level" field if the given value is not nil.
func (ptu *ProfileTypeUpdate) SetNillableWarningLevel(i *int) *ProfileTypeUpdate {
	if i != nil {
		ptu.SetWarningLevel(*i)
	}
	return ptu
}

// AddWarningLevel adds i to the "warning_level" field.
func (ptu *ProfileTypeUpdate) AddWarningLevel(i int) *ProfileTypeUpdate {
	ptu.mutation.AddWarningLevel(i)
	return ptu
}

// ClearWarningLevel clears the value of the "warning_level" field.
func (ptu *ProfileTypeUpdate) ClearWarningLevel() *ProfileTypeUpdate {
	ptu.mutation.ClearWarningLevel()
	return ptu
}

// SetWarningEnabled sets the "warning_enabled" field.
func (ptu *ProfileTypeUpdate) SetWarningEnabled(b bool) *ProfileTypeUpdate {
	ptu.mutation.SetWarningEnabled(b)
	return ptu
}

// SetNillableWarningEnabled sets the "warning_enabled" field if the given value is not nil.
func (ptu *ProfileTypeUpdate) SetNillableWarningEnabled(b *bool) *ProfileTypeUpdate {
	if b != nil {
		ptu.SetWarningEnabled(*b)
	}
	return ptu
}

// ClearWarningEnabled clears the value of the "warning_enabled" field.
func (ptu *ProfileTypeUpdate) ClearWarningEnabled() *ProfileTypeUpdate {
	ptu.mutation.ClearWarningEnabled()
	return ptu
}

// SetTenantID sets the "tenant_id" field.
func (ptu *ProfileTypeUpdate) SetTenantID(u uuid.UUID) *ProfileTypeUpdate {
	ptu.mutation.SetTenantID(u)
	return ptu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ptu *ProfileTypeUpdate) SetNillableTenantID(u *uuid.UUID) *ProfileTypeUpdate {
	if u != nil {
		ptu.SetTenantID(*u)
	}
	return ptu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (ptu *ProfileTypeUpdate) ClearTenantID() *ProfileTypeUpdate {
	ptu.mutation.ClearTenantID()
	return ptu
}

// SetDescription sets the "description" field.
func (ptu *ProfileTypeUpdate) SetDescription(s string) *ProfileTypeUpdate {
	ptu.mutation.SetDescription(s)
	return ptu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptu *ProfileTypeUpdate) SetNillableDescription(s *string) *ProfileTypeUpdate {
	if s != nil {
		ptu.SetDescription(*s)
	}
	return ptu
}

// ClearDescription clears the value of the "description" field.
func (ptu *ProfileTypeUpdate) ClearDescription() *ProfileTypeUpdate {
	ptu.mutation.ClearDescription()
	return ptu
}

// SetDeleteable sets the "deleteable" field.
func (ptu *ProfileTypeUpdate) SetDeleteable(b bool) *ProfileTypeUpdate {
	ptu.mutation.SetDeleteable(b)
	return ptu
}

// SetNillableDeleteable sets the "deleteable" field if the given value is not nil.
func (ptu *ProfileTypeUpdate) SetNillableDeleteable(b *bool) *ProfileTypeUpdate {
	if b != nil {
		ptu.SetDeleteable(*b)
	}
	return ptu
}

// ClearDeleteable clears the value of the "deleteable" field.
func (ptu *ProfileTypeUpdate) ClearDeleteable() *ProfileTypeUpdate {
	ptu.mutation.ClearDeleteable()
	return ptu
}

// SetEnabled sets the "enabled" field.
func (ptu *ProfileTypeUpdate) SetEnabled(b bool) *ProfileTypeUpdate {
	ptu.mutation.SetEnabled(b)
	return ptu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ptu *ProfileTypeUpdate) SetNillableEnabled(b *bool) *ProfileTypeUpdate {
	if b != nil {
		ptu.SetEnabled(*b)
	}
	return ptu
}

// ClearEnabled clears the value of the "enabled" field.
func (ptu *ProfileTypeUpdate) ClearEnabled() *ProfileTypeUpdate {
	ptu.mutation.ClearEnabled()
	return ptu
}

// SetTypeCode sets the "type_code" field.
func (ptu *ProfileTypeUpdate) SetTypeCode(s string) *ProfileTypeUpdate {
	ptu.mutation.SetTypeCode(s)
	return ptu
}

// SetNillableTypeCode sets the "type_code" field if the given value is not nil.
func (ptu *ProfileTypeUpdate) SetNillableTypeCode(s *string) *ProfileTypeUpdate {
	if s != nil {
		ptu.SetTypeCode(*s)
	}
	return ptu
}

// ClearTypeCode clears the value of the "type_code" field.
func (ptu *ProfileTypeUpdate) ClearTypeCode() *ProfileTypeUpdate {
	ptu.mutation.ClearTypeCode()
	return ptu
}

// SetFaceValidityHours sets the "face_validity_hours" field.
func (ptu *ProfileTypeUpdate) SetFaceValidityHours(i int) *ProfileTypeUpdate {
	ptu.mutation.ResetFaceValidityHours()
	ptu.mutation.SetFaceValidityHours(i)
	return ptu
}

// SetNillableFaceValidityHours sets the "face_validity_hours" field if the given value is not nil.
func (ptu *ProfileTypeUpdate) SetNillableFaceValidityHours(i *int) *ProfileTypeUpdate {
	if i != nil {
		ptu.SetFaceValidityHours(*i)
	}
	return ptu
}

// AddFaceValidityHours adds i to the "face_validity_hours" field.
func (ptu *ProfileTypeUpdate) AddFaceValidityHours(i int) *ProfileTypeUpdate {
	ptu.mutation.AddFaceValidityHours(i)
	return ptu
}

// ClearFaceValidityHours clears the value of the "face_validity_hours" field.
func (ptu *ProfileTypeUpdate) ClearFaceValidityHours() *ProfileTypeUpdate {
	ptu.mutation.ClearFaceValidityHours()
	return ptu
}

// SetCreatedTime sets the "created_time" field.
func (ptu *ProfileTypeUpdate) SetCreatedTime(t time.Time) *ProfileTypeUpdate {
	ptu.mutation.SetCreatedTime(t)
	return ptu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (ptu *ProfileTypeUpdate) SetNillableCreatedTime(t *time.Time) *ProfileTypeUpdate {
	if t != nil {
		ptu.SetCreatedTime(*t)
	}
	return ptu
}

// ClearCreatedTime clears the value of the "created_time" field.
func (ptu *ProfileTypeUpdate) ClearCreatedTime() *ProfileTypeUpdate {
	ptu.mutation.ClearCreatedTime()
	return ptu
}

// SetUpdatedTime sets the "updated_time" field.
func (ptu *ProfileTypeUpdate) SetUpdatedTime(t time.Time) *ProfileTypeUpdate {
	ptu.mutation.SetUpdatedTime(t)
	return ptu
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (ptu *ProfileTypeUpdate) ClearUpdatedTime() *ProfileTypeUpdate {
	ptu.mutation.ClearUpdatedTime()
	return ptu
}

// Mutation returns the ProfileTypeMutation object of the builder.
func (ptu *ProfileTypeUpdate) Mutation() *ProfileTypeMutation {
	return ptu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *ProfileTypeUpdate) Save(ctx context.Context) (int, error) {
	ptu.defaults()
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *ProfileTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *ProfileTypeUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *ProfileTypeUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptu *ProfileTypeUpdate) defaults() {
	if _, ok := ptu.mutation.UpdatedTime(); !ok && !ptu.mutation.UpdatedTimeCleared() {
		v := profiletype.UpdateDefaultUpdatedTime()
		ptu.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *ProfileTypeUpdate) check() error {
	if v, ok := ptu.mutation.TypeName(); ok {
		if err := profiletype.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "type_name", err: fmt.Errorf(`genclients: validator failed for field "ProfileType.type_name": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.Description(); ok {
		if err := profiletype.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "ProfileType.description": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.TypeCode(); ok {
		if err := profiletype.TypeCodeValidator(v); err != nil {
			return &ValidationError{Name: "type_code", err: fmt.Errorf(`genclients: validator failed for field "ProfileType.type_code": %w`, err)}
		}
	}
	return nil
}

func (ptu *ProfileTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(profiletype.Table, profiletype.Columns, sqlgraph.NewFieldSpec(profiletype.FieldID, field.TypeInt64))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.TypeName(); ok {
		_spec.SetField(profiletype.FieldTypeName, field.TypeString, value)
	}
	if value, ok := ptu.mutation.WarningLevel(); ok {
		_spec.SetField(profiletype.FieldWarningLevel, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AddedWarningLevel(); ok {
		_spec.AddField(profiletype.FieldWarningLevel, field.TypeInt, value)
	}
	if ptu.mutation.WarningLevelCleared() {
		_spec.ClearField(profiletype.FieldWarningLevel, field.TypeInt)
	}
	if value, ok := ptu.mutation.WarningEnabled(); ok {
		_spec.SetField(profiletype.FieldWarningEnabled, field.TypeBool, value)
	}
	if ptu.mutation.WarningEnabledCleared() {
		_spec.ClearField(profiletype.FieldWarningEnabled, field.TypeBool)
	}
	if value, ok := ptu.mutation.TenantID(); ok {
		_spec.SetField(profiletype.FieldTenantID, field.TypeUUID, value)
	}
	if ptu.mutation.TenantIDCleared() {
		_spec.ClearField(profiletype.FieldTenantID, field.TypeUUID)
	}
	if value, ok := ptu.mutation.Description(); ok {
		_spec.SetField(profiletype.FieldDescription, field.TypeString, value)
	}
	if ptu.mutation.DescriptionCleared() {
		_spec.ClearField(profiletype.FieldDescription, field.TypeString)
	}
	if value, ok := ptu.mutation.Deleteable(); ok {
		_spec.SetField(profiletype.FieldDeleteable, field.TypeBool, value)
	}
	if ptu.mutation.DeleteableCleared() {
		_spec.ClearField(profiletype.FieldDeleteable, field.TypeBool)
	}
	if value, ok := ptu.mutation.Enabled(); ok {
		_spec.SetField(profiletype.FieldEnabled, field.TypeBool, value)
	}
	if ptu.mutation.EnabledCleared() {
		_spec.ClearField(profiletype.FieldEnabled, field.TypeBool)
	}
	if value, ok := ptu.mutation.TypeCode(); ok {
		_spec.SetField(profiletype.FieldTypeCode, field.TypeString, value)
	}
	if ptu.mutation.TypeCodeCleared() {
		_spec.ClearField(profiletype.FieldTypeCode, field.TypeString)
	}
	if value, ok := ptu.mutation.FaceValidityHours(); ok {
		_spec.SetField(profiletype.FieldFaceValidityHours, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AddedFaceValidityHours(); ok {
		_spec.AddField(profiletype.FieldFaceValidityHours, field.TypeInt, value)
	}
	if ptu.mutation.FaceValidityHoursCleared() {
		_spec.ClearField(profiletype.FieldFaceValidityHours, field.TypeInt)
	}
	if value, ok := ptu.mutation.CreatedTime(); ok {
		_spec.SetField(profiletype.FieldCreatedTime, field.TypeTime, value)
	}
	if ptu.mutation.CreatedTimeCleared() {
		_spec.ClearField(profiletype.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := ptu.mutation.UpdatedTime(); ok {
		_spec.SetField(profiletype.FieldUpdatedTime, field.TypeTime, value)
	}
	if ptu.mutation.UpdatedTimeCleared() {
		_spec.ClearField(profiletype.FieldUpdatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profiletype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// ProfileTypeUpdateOne is the builder for updating a single ProfileType entity.
type ProfileTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfileTypeMutation
}

// SetTypeName sets the "type_name" field.
func (ptuo *ProfileTypeUpdateOne) SetTypeName(s string) *ProfileTypeUpdateOne {
	ptuo.mutation.SetTypeName(s)
	return ptuo
}

// SetNillableTypeName sets the "type_name" field if the given value is not nil.
func (ptuo *ProfileTypeUpdateOne) SetNillableTypeName(s *string) *ProfileTypeUpdateOne {
	if s != nil {
		ptuo.SetTypeName(*s)
	}
	return ptuo
}

// SetWarningLevel sets the "warning_level" field.
func (ptuo *ProfileTypeUpdateOne) SetWarningLevel(i int) *ProfileTypeUpdateOne {
	ptuo.mutation.ResetWarningLevel()
	ptuo.mutation.SetWarningLevel(i)
	return ptuo
}

// SetNillableWarningLevel sets the "warning_level" field if the given value is not nil.
func (ptuo *ProfileTypeUpdateOne) SetNillableWarningLevel(i *int) *ProfileTypeUpdateOne {
	if i != nil {
		ptuo.SetWarningLevel(*i)
	}
	return ptuo
}

// AddWarningLevel adds i to the "warning_level" field.
func (ptuo *ProfileTypeUpdateOne) AddWarningLevel(i int) *ProfileTypeUpdateOne {
	ptuo.mutation.AddWarningLevel(i)
	return ptuo
}

// ClearWarningLevel clears the value of the "warning_level" field.
func (ptuo *ProfileTypeUpdateOne) ClearWarningLevel() *ProfileTypeUpdateOne {
	ptuo.mutation.ClearWarningLevel()
	return ptuo
}

// SetWarningEnabled sets the "warning_enabled" field.
func (ptuo *ProfileTypeUpdateOne) SetWarningEnabled(b bool) *ProfileTypeUpdateOne {
	ptuo.mutation.SetWarningEnabled(b)
	return ptuo
}

// SetNillableWarningEnabled sets the "warning_enabled" field if the given value is not nil.
func (ptuo *ProfileTypeUpdateOne) SetNillableWarningEnabled(b *bool) *ProfileTypeUpdateOne {
	if b != nil {
		ptuo.SetWarningEnabled(*b)
	}
	return ptuo
}

// ClearWarningEnabled clears the value of the "warning_enabled" field.
func (ptuo *ProfileTypeUpdateOne) ClearWarningEnabled() *ProfileTypeUpdateOne {
	ptuo.mutation.ClearWarningEnabled()
	return ptuo
}

// SetTenantID sets the "tenant_id" field.
func (ptuo *ProfileTypeUpdateOne) SetTenantID(u uuid.UUID) *ProfileTypeUpdateOne {
	ptuo.mutation.SetTenantID(u)
	return ptuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ptuo *ProfileTypeUpdateOne) SetNillableTenantID(u *uuid.UUID) *ProfileTypeUpdateOne {
	if u != nil {
		ptuo.SetTenantID(*u)
	}
	return ptuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (ptuo *ProfileTypeUpdateOne) ClearTenantID() *ProfileTypeUpdateOne {
	ptuo.mutation.ClearTenantID()
	return ptuo
}

// SetDescription sets the "description" field.
func (ptuo *ProfileTypeUpdateOne) SetDescription(s string) *ProfileTypeUpdateOne {
	ptuo.mutation.SetDescription(s)
	return ptuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptuo *ProfileTypeUpdateOne) SetNillableDescription(s *string) *ProfileTypeUpdateOne {
	if s != nil {
		ptuo.SetDescription(*s)
	}
	return ptuo
}

// ClearDescription clears the value of the "description" field.
func (ptuo *ProfileTypeUpdateOne) ClearDescription() *ProfileTypeUpdateOne {
	ptuo.mutation.ClearDescription()
	return ptuo
}

// SetDeleteable sets the "deleteable" field.
func (ptuo *ProfileTypeUpdateOne) SetDeleteable(b bool) *ProfileTypeUpdateOne {
	ptuo.mutation.SetDeleteable(b)
	return ptuo
}

// SetNillableDeleteable sets the "deleteable" field if the given value is not nil.
func (ptuo *ProfileTypeUpdateOne) SetNillableDeleteable(b *bool) *ProfileTypeUpdateOne {
	if b != nil {
		ptuo.SetDeleteable(*b)
	}
	return ptuo
}

// ClearDeleteable clears the value of the "deleteable" field.
func (ptuo *ProfileTypeUpdateOne) ClearDeleteable() *ProfileTypeUpdateOne {
	ptuo.mutation.ClearDeleteable()
	return ptuo
}

// SetEnabled sets the "enabled" field.
func (ptuo *ProfileTypeUpdateOne) SetEnabled(b bool) *ProfileTypeUpdateOne {
	ptuo.mutation.SetEnabled(b)
	return ptuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ptuo *ProfileTypeUpdateOne) SetNillableEnabled(b *bool) *ProfileTypeUpdateOne {
	if b != nil {
		ptuo.SetEnabled(*b)
	}
	return ptuo
}

// ClearEnabled clears the value of the "enabled" field.
func (ptuo *ProfileTypeUpdateOne) ClearEnabled() *ProfileTypeUpdateOne {
	ptuo.mutation.ClearEnabled()
	return ptuo
}

// SetTypeCode sets the "type_code" field.
func (ptuo *ProfileTypeUpdateOne) SetTypeCode(s string) *ProfileTypeUpdateOne {
	ptuo.mutation.SetTypeCode(s)
	return ptuo
}

// SetNillableTypeCode sets the "type_code" field if the given value is not nil.
func (ptuo *ProfileTypeUpdateOne) SetNillableTypeCode(s *string) *ProfileTypeUpdateOne {
	if s != nil {
		ptuo.SetTypeCode(*s)
	}
	return ptuo
}

// ClearTypeCode clears the value of the "type_code" field.
func (ptuo *ProfileTypeUpdateOne) ClearTypeCode() *ProfileTypeUpdateOne {
	ptuo.mutation.ClearTypeCode()
	return ptuo
}

// SetFaceValidityHours sets the "face_validity_hours" field.
func (ptuo *ProfileTypeUpdateOne) SetFaceValidityHours(i int) *ProfileTypeUpdateOne {
	ptuo.mutation.ResetFaceValidityHours()
	ptuo.mutation.SetFaceValidityHours(i)
	return ptuo
}

// SetNillableFaceValidityHours sets the "face_validity_hours" field if the given value is not nil.
func (ptuo *ProfileTypeUpdateOne) SetNillableFaceValidityHours(i *int) *ProfileTypeUpdateOne {
	if i != nil {
		ptuo.SetFaceValidityHours(*i)
	}
	return ptuo
}

// AddFaceValidityHours adds i to the "face_validity_hours" field.
func (ptuo *ProfileTypeUpdateOne) AddFaceValidityHours(i int) *ProfileTypeUpdateOne {
	ptuo.mutation.AddFaceValidityHours(i)
	return ptuo
}

// ClearFaceValidityHours clears the value of the "face_validity_hours" field.
func (ptuo *ProfileTypeUpdateOne) ClearFaceValidityHours() *ProfileTypeUpdateOne {
	ptuo.mutation.ClearFaceValidityHours()
	return ptuo
}

// SetCreatedTime sets the "created_time" field.
func (ptuo *ProfileTypeUpdateOne) SetCreatedTime(t time.Time) *ProfileTypeUpdateOne {
	ptuo.mutation.SetCreatedTime(t)
	return ptuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (ptuo *ProfileTypeUpdateOne) SetNillableCreatedTime(t *time.Time) *ProfileTypeUpdateOne {
	if t != nil {
		ptuo.SetCreatedTime(*t)
	}
	return ptuo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (ptuo *ProfileTypeUpdateOne) ClearCreatedTime() *ProfileTypeUpdateOne {
	ptuo.mutation.ClearCreatedTime()
	return ptuo
}

// SetUpdatedTime sets the "updated_time" field.
func (ptuo *ProfileTypeUpdateOne) SetUpdatedTime(t time.Time) *ProfileTypeUpdateOne {
	ptuo.mutation.SetUpdatedTime(t)
	return ptuo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (ptuo *ProfileTypeUpdateOne) ClearUpdatedTime() *ProfileTypeUpdateOne {
	ptuo.mutation.ClearUpdatedTime()
	return ptuo
}

// Mutation returns the ProfileTypeMutation object of the builder.
func (ptuo *ProfileTypeUpdateOne) Mutation() *ProfileTypeMutation {
	return ptuo.mutation
}

// Where appends a list predicates to the ProfileTypeUpdate builder.
func (ptuo *ProfileTypeUpdateOne) Where(ps ...predicate.ProfileType) *ProfileTypeUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *ProfileTypeUpdateOne) Select(field string, fields ...string) *ProfileTypeUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated ProfileType entity.
func (ptuo *ProfileTypeUpdateOne) Save(ctx context.Context) (*ProfileType, error) {
	ptuo.defaults()
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *ProfileTypeUpdateOne) SaveX(ctx context.Context) *ProfileType {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *ProfileTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *ProfileTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptuo *ProfileTypeUpdateOne) defaults() {
	if _, ok := ptuo.mutation.UpdatedTime(); !ok && !ptuo.mutation.UpdatedTimeCleared() {
		v := profiletype.UpdateDefaultUpdatedTime()
		ptuo.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *ProfileTypeUpdateOne) check() error {
	if v, ok := ptuo.mutation.TypeName(); ok {
		if err := profiletype.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "type_name", err: fmt.Errorf(`genclients: validator failed for field "ProfileType.type_name": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.Description(); ok {
		if err := profiletype.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`genclients: validator failed for field "ProfileType.description": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.TypeCode(); ok {
		if err := profiletype.TypeCodeValidator(v); err != nil {
			return &ValidationError{Name: "type_code", err: fmt.Errorf(`genclients: validator failed for field "ProfileType.type_code": %w`, err)}
		}
	}
	return nil
}

func (ptuo *ProfileTypeUpdateOne) sqlSave(ctx context.Context) (_node *ProfileType, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(profiletype.Table, profiletype.Columns, sqlgraph.NewFieldSpec(profiletype.FieldID, field.TypeInt64))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "ProfileType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profiletype.FieldID)
		for _, f := range fields {
			if !profiletype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != profiletype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.TypeName(); ok {
		_spec.SetField(profiletype.FieldTypeName, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.WarningLevel(); ok {
		_spec.SetField(profiletype.FieldWarningLevel, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AddedWarningLevel(); ok {
		_spec.AddField(profiletype.FieldWarningLevel, field.TypeInt, value)
	}
	if ptuo.mutation.WarningLevelCleared() {
		_spec.ClearField(profiletype.FieldWarningLevel, field.TypeInt)
	}
	if value, ok := ptuo.mutation.WarningEnabled(); ok {
		_spec.SetField(profiletype.FieldWarningEnabled, field.TypeBool, value)
	}
	if ptuo.mutation.WarningEnabledCleared() {
		_spec.ClearField(profiletype.FieldWarningEnabled, field.TypeBool)
	}
	if value, ok := ptuo.mutation.TenantID(); ok {
		_spec.SetField(profiletype.FieldTenantID, field.TypeUUID, value)
	}
	if ptuo.mutation.TenantIDCleared() {
		_spec.ClearField(profiletype.FieldTenantID, field.TypeUUID)
	}
	if value, ok := ptuo.mutation.Description(); ok {
		_spec.SetField(profiletype.FieldDescription, field.TypeString, value)
	}
	if ptuo.mutation.DescriptionCleared() {
		_spec.ClearField(profiletype.FieldDescription, field.TypeString)
	}
	if value, ok := ptuo.mutation.Deleteable(); ok {
		_spec.SetField(profiletype.FieldDeleteable, field.TypeBool, value)
	}
	if ptuo.mutation.DeleteableCleared() {
		_spec.ClearField(profiletype.FieldDeleteable, field.TypeBool)
	}
	if value, ok := ptuo.mutation.Enabled(); ok {
		_spec.SetField(profiletype.FieldEnabled, field.TypeBool, value)
	}
	if ptuo.mutation.EnabledCleared() {
		_spec.ClearField(profiletype.FieldEnabled, field.TypeBool)
	}
	if value, ok := ptuo.mutation.TypeCode(); ok {
		_spec.SetField(profiletype.FieldTypeCode, field.TypeString, value)
	}
	if ptuo.mutation.TypeCodeCleared() {
		_spec.ClearField(profiletype.FieldTypeCode, field.TypeString)
	}
	if value, ok := ptuo.mutation.FaceValidityHours(); ok {
		_spec.SetField(profiletype.FieldFaceValidityHours, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AddedFaceValidityHours(); ok {
		_spec.AddField(profiletype.FieldFaceValidityHours, field.TypeInt, value)
	}
	if ptuo.mutation.FaceValidityHoursCleared() {
		_spec.ClearField(profiletype.FieldFaceValidityHours, field.TypeInt)
	}
	if value, ok := ptuo.mutation.CreatedTime(); ok {
		_spec.SetField(profiletype.FieldCreatedTime, field.TypeTime, value)
	}
	if ptuo.mutation.CreatedTimeCleared() {
		_spec.ClearField(profiletype.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := ptuo.mutation.UpdatedTime(); ok {
		_spec.SetField(profiletype.FieldUpdatedTime, field.TypeTime, value)
	}
	if ptuo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(profiletype.FieldUpdatedTime, field.TypeTime)
	}
	_node = &ProfileType{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profiletype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
