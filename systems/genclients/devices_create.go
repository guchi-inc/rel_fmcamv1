// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/devices"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DevicesCreate is the builder for creating a Devices entity.
type DevicesCreate struct {
	config
	mutation *DevicesMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (dc *DevicesCreate) SetTenantID(u uuid.UUID) *DevicesCreate {
	dc.mutation.SetTenantID(u)
	return dc
}

// SetName sets the "name" field.
func (dc *DevicesCreate) SetName(s string) *DevicesCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableName(s *string) *DevicesCreate {
	if s != nil {
		dc.SetName(*s)
	}
	return dc
}

// SetURL sets the "url" field.
func (dc *DevicesCreate) SetURL(s string) *DevicesCreate {
	dc.mutation.SetURL(s)
	return dc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableURL(s *string) *DevicesCreate {
	if s != nil {
		dc.SetURL(*s)
	}
	return dc
}

// SetLocation sets the "location" field.
func (dc *DevicesCreate) SetLocation(s string) *DevicesCreate {
	dc.mutation.SetLocation(s)
	return dc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableLocation(s *string) *DevicesCreate {
	if s != nil {
		dc.SetLocation(*s)
	}
	return dc
}

// SetFuncType sets the "func_type" field.
func (dc *DevicesCreate) SetFuncType(i int) *DevicesCreate {
	dc.mutation.SetFuncType(i)
	return dc
}

// SetNillableFuncType sets the "func_type" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableFuncType(i *int) *DevicesCreate {
	if i != nil {
		dc.SetFuncType(*i)
	}
	return dc
}

// SetDisplayWidth sets the "display_width" field.
func (dc *DevicesCreate) SetDisplayWidth(u uint16) *DevicesCreate {
	dc.mutation.SetDisplayWidth(u)
	return dc
}

// SetNillableDisplayWidth sets the "display_width" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableDisplayWidth(u *uint16) *DevicesCreate {
	if u != nil {
		dc.SetDisplayWidth(*u)
	}
	return dc
}

// SetDisplayHeight sets the "display_height" field.
func (dc *DevicesCreate) SetDisplayHeight(u uint16) *DevicesCreate {
	dc.mutation.SetDisplayHeight(u)
	return dc
}

// SetNillableDisplayHeight sets the "display_height" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableDisplayHeight(u *uint16) *DevicesCreate {
	if u != nil {
		dc.SetDisplayHeight(*u)
	}
	return dc
}

// SetRoiX sets the "roi_x" field.
func (dc *DevicesCreate) SetRoiX(u uint16) *DevicesCreate {
	dc.mutation.SetRoiX(u)
	return dc
}

// SetNillableRoiX sets the "roi_x" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableRoiX(u *uint16) *DevicesCreate {
	if u != nil {
		dc.SetRoiX(*u)
	}
	return dc
}

// SetRoiY sets the "roi_y" field.
func (dc *DevicesCreate) SetRoiY(u uint16) *DevicesCreate {
	dc.mutation.SetRoiY(u)
	return dc
}

// SetNillableRoiY sets the "roi_y" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableRoiY(u *uint16) *DevicesCreate {
	if u != nil {
		dc.SetRoiY(*u)
	}
	return dc
}

// SetRoiWidth sets the "roi_width" field.
func (dc *DevicesCreate) SetRoiWidth(u uint16) *DevicesCreate {
	dc.mutation.SetRoiWidth(u)
	return dc
}

// SetNillableRoiWidth sets the "roi_width" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableRoiWidth(u *uint16) *DevicesCreate {
	if u != nil {
		dc.SetRoiWidth(*u)
	}
	return dc
}

// SetRoiHeight sets the "roi_height" field.
func (dc *DevicesCreate) SetRoiHeight(u uint16) *DevicesCreate {
	dc.mutation.SetRoiHeight(u)
	return dc
}

// SetNillableRoiHeight sets the "roi_height" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableRoiHeight(u *uint16) *DevicesCreate {
	if u != nil {
		dc.SetRoiHeight(*u)
	}
	return dc
}

// SetRoiRotationAngle sets the "roi_rotation_angle" field.
func (dc *DevicesCreate) SetRoiRotationAngle(f float64) *DevicesCreate {
	dc.mutation.SetRoiRotationAngle(f)
	return dc
}

// SetNillableRoiRotationAngle sets the "roi_rotation_angle" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableRoiRotationAngle(f *float64) *DevicesCreate {
	if f != nil {
		dc.SetRoiRotationAngle(*f)
	}
	return dc
}

// SetRoiEnabled sets the "roi_enabled" field.
func (dc *DevicesCreate) SetRoiEnabled(b bool) *DevicesCreate {
	dc.mutation.SetRoiEnabled(b)
	return dc
}

// SetNillableRoiEnabled sets the "roi_enabled" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableRoiEnabled(b *bool) *DevicesCreate {
	if b != nil {
		dc.SetRoiEnabled(*b)
	}
	return dc
}

// SetEnabled sets the "enabled" field.
func (dc *DevicesCreate) SetEnabled(b bool) *DevicesCreate {
	dc.mutation.SetEnabled(b)
	return dc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableEnabled(b *bool) *DevicesCreate {
	if b != nil {
		dc.SetEnabled(*b)
	}
	return dc
}

// SetTargetFps sets the "target_fps" field.
func (dc *DevicesCreate) SetTargetFps(i int64) *DevicesCreate {
	dc.mutation.SetTargetFps(i)
	return dc
}

// SetNillableTargetFps sets the "target_fps" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableTargetFps(i *int64) *DevicesCreate {
	if i != nil {
		dc.SetTargetFps(*i)
	}
	return dc
}

// SetDwellDuration sets the "dwell_duration" field.
func (dc *DevicesCreate) SetDwellDuration(i int64) *DevicesCreate {
	dc.mutation.SetDwellDuration(i)
	return dc
}

// SetNillableDwellDuration sets the "dwell_duration" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableDwellDuration(i *int64) *DevicesCreate {
	if i != nil {
		dc.SetDwellDuration(*i)
	}
	return dc
}

// SetCreatedTime sets the "created_time" field.
func (dc *DevicesCreate) SetCreatedTime(t time.Time) *DevicesCreate {
	dc.mutation.SetCreatedTime(t)
	return dc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableCreatedTime(t *time.Time) *DevicesCreate {
	if t != nil {
		dc.SetCreatedTime(*t)
	}
	return dc
}

// SetUpdatedTime sets the "updated_time" field.
func (dc *DevicesCreate) SetUpdatedTime(t time.Time) *DevicesCreate {
	dc.mutation.SetUpdatedTime(t)
	return dc
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (dc *DevicesCreate) SetNillableUpdatedTime(t *time.Time) *DevicesCreate {
	if t != nil {
		dc.SetUpdatedTime(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DevicesCreate) SetID(i int64) *DevicesCreate {
	dc.mutation.SetID(i)
	return dc
}

// Mutation returns the DevicesMutation object of the builder.
func (dc *DevicesCreate) Mutation() *DevicesMutation {
	return dc.mutation
}

// Save creates the Devices in the database.
func (dc *DevicesCreate) Save(ctx context.Context) (*Devices, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DevicesCreate) SaveX(ctx context.Context) *Devices {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DevicesCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DevicesCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DevicesCreate) defaults() {
	if _, ok := dc.mutation.Name(); !ok {
		v := devices.DefaultName
		dc.mutation.SetName(v)
	}
	if _, ok := dc.mutation.URL(); !ok {
		v := devices.DefaultURL
		dc.mutation.SetURL(v)
	}
	if _, ok := dc.mutation.Location(); !ok {
		v := devices.DefaultLocation
		dc.mutation.SetLocation(v)
	}
	if _, ok := dc.mutation.FuncType(); !ok {
		v := devices.DefaultFuncType
		dc.mutation.SetFuncType(v)
	}
	if _, ok := dc.mutation.RoiEnabled(); !ok {
		v := devices.DefaultRoiEnabled
		dc.mutation.SetRoiEnabled(v)
	}
	if _, ok := dc.mutation.Enabled(); !ok {
		v := devices.DefaultEnabled
		dc.mutation.SetEnabled(v)
	}
	if _, ok := dc.mutation.TargetFps(); !ok {
		v := devices.DefaultTargetFps
		dc.mutation.SetTargetFps(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DevicesCreate) check() error {
	if _, ok := dc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`genclients: missing required field "Devices.tenant_id"`)}
	}
	if v, ok := dc.mutation.Name(); ok {
		if err := devices.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`genclients: validator failed for field "Devices.name": %w`, err)}
		}
	}
	if _, ok := dc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`genclients: missing required field "Devices.url"`)}
	}
	if v, ok := dc.mutation.URL(); ok {
		if err := devices.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`genclients: validator failed for field "Devices.url": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`genclients: missing required field "Devices.location"`)}
	}
	if v, ok := dc.mutation.Location(); ok {
		if err := devices.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`genclients: validator failed for field "Devices.location": %w`, err)}
		}
	}
	if _, ok := dc.mutation.RoiEnabled(); !ok {
		return &ValidationError{Name: "roi_enabled", err: errors.New(`genclients: missing required field "Devices.roi_enabled"`)}
	}
	if _, ok := dc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`genclients: missing required field "Devices.enabled"`)}
	}
	if _, ok := dc.mutation.TargetFps(); !ok {
		return &ValidationError{Name: "target_fps", err: errors.New(`genclients: missing required field "Devices.target_fps"`)}
	}
	return nil
}

func (dc *DevicesCreate) sqlSave(ctx context.Context) (*Devices, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DevicesCreate) createSpec() (*Devices, *sqlgraph.CreateSpec) {
	var (
		_node = &Devices{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(devices.Table, sqlgraph.NewFieldSpec(devices.FieldID, field.TypeInt64))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.TenantID(); ok {
		_spec.SetField(devices.FieldTenantID, field.TypeUUID, value)
		_node.TenantID = value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(devices.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := dc.mutation.URL(); ok {
		_spec.SetField(devices.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := dc.mutation.Location(); ok {
		_spec.SetField(devices.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := dc.mutation.FuncType(); ok {
		_spec.SetField(devices.FieldFuncType, field.TypeInt, value)
		_node.FuncType = value
	}
	if value, ok := dc.mutation.DisplayWidth(); ok {
		_spec.SetField(devices.FieldDisplayWidth, field.TypeUint16, value)
		_node.DisplayWidth = &value
	}
	if value, ok := dc.mutation.DisplayHeight(); ok {
		_spec.SetField(devices.FieldDisplayHeight, field.TypeUint16, value)
		_node.DisplayHeight = &value
	}
	if value, ok := dc.mutation.RoiX(); ok {
		_spec.SetField(devices.FieldRoiX, field.TypeUint16, value)
		_node.RoiX = &value
	}
	if value, ok := dc.mutation.RoiY(); ok {
		_spec.SetField(devices.FieldRoiY, field.TypeUint16, value)
		_node.RoiY = &value
	}
	if value, ok := dc.mutation.RoiWidth(); ok {
		_spec.SetField(devices.FieldRoiWidth, field.TypeUint16, value)
		_node.RoiWidth = &value
	}
	if value, ok := dc.mutation.RoiHeight(); ok {
		_spec.SetField(devices.FieldRoiHeight, field.TypeUint16, value)
		_node.RoiHeight = &value
	}
	if value, ok := dc.mutation.RoiRotationAngle(); ok {
		_spec.SetField(devices.FieldRoiRotationAngle, field.TypeFloat64, value)
		_node.RoiRotationAngle = &value
	}
	if value, ok := dc.mutation.RoiEnabled(); ok {
		_spec.SetField(devices.FieldRoiEnabled, field.TypeBool, value)
		_node.RoiEnabled = value
	}
	if value, ok := dc.mutation.Enabled(); ok {
		_spec.SetField(devices.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := dc.mutation.TargetFps(); ok {
		_spec.SetField(devices.FieldTargetFps, field.TypeInt64, value)
		_node.TargetFps = value
	}
	if value, ok := dc.mutation.DwellDuration(); ok {
		_spec.SetField(devices.FieldDwellDuration, field.TypeInt64, value)
		_node.DwellDuration = &value
	}
	if value, ok := dc.mutation.CreatedTime(); ok {
		_spec.SetField(devices.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	if value, ok := dc.mutation.UpdatedTime(); ok {
		_spec.SetField(devices.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = &value
	}
	return _node, _spec
}

// DevicesCreateBulk is the builder for creating many Devices entities in bulk.
type DevicesCreateBulk struct {
	config
	err      error
	builders []*DevicesCreate
}

// Save creates the Devices entities in the database.
func (dcb *DevicesCreateBulk) Save(ctx context.Context) ([]*Devices, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Devices, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DevicesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DevicesCreateBulk) SaveX(ctx context.Context) []*Devices {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DevicesCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DevicesCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
