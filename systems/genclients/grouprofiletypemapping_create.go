// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/grouprofiletypemapping"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GrouProfileTypeMappingCreate is the builder for creating a GrouProfileTypeMapping entity.
type GrouProfileTypeMappingCreate struct {
	config
	mutation *GrouProfileTypeMappingMutation
	hooks    []Hook
}

// SetGroupID sets the "group_id" field.
func (gptmc *GrouProfileTypeMappingCreate) SetGroupID(i int64) *GrouProfileTypeMappingCreate {
	gptmc.mutation.SetGroupID(i)
	return gptmc
}

// SetProfileTypeID sets the "profile_type_id" field.
func (gptmc *GrouProfileTypeMappingCreate) SetProfileTypeID(i int64) *GrouProfileTypeMappingCreate {
	gptmc.mutation.SetProfileTypeID(i)
	return gptmc
}

// SetCreator sets the "creator" field.
func (gptmc *GrouProfileTypeMappingCreate) SetCreator(s string) *GrouProfileTypeMappingCreate {
	gptmc.mutation.SetCreator(s)
	return gptmc
}

// SetCreatedTime sets the "created_time" field.
func (gptmc *GrouProfileTypeMappingCreate) SetCreatedTime(t time.Time) *GrouProfileTypeMappingCreate {
	gptmc.mutation.SetCreatedTime(t)
	return gptmc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (gptmc *GrouProfileTypeMappingCreate) SetNillableCreatedTime(t *time.Time) *GrouProfileTypeMappingCreate {
	if t != nil {
		gptmc.SetCreatedTime(*t)
	}
	return gptmc
}

// SetID sets the "id" field.
func (gptmc *GrouProfileTypeMappingCreate) SetID(i int64) *GrouProfileTypeMappingCreate {
	gptmc.mutation.SetID(i)
	return gptmc
}

// Mutation returns the GrouProfileTypeMappingMutation object of the builder.
func (gptmc *GrouProfileTypeMappingCreate) Mutation() *GrouProfileTypeMappingMutation {
	return gptmc.mutation
}

// Save creates the GrouProfileTypeMapping in the database.
func (gptmc *GrouProfileTypeMappingCreate) Save(ctx context.Context) (*GrouProfileTypeMapping, error) {
	return withHooks(ctx, gptmc.sqlSave, gptmc.mutation, gptmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gptmc *GrouProfileTypeMappingCreate) SaveX(ctx context.Context) *GrouProfileTypeMapping {
	v, err := gptmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gptmc *GrouProfileTypeMappingCreate) Exec(ctx context.Context) error {
	_, err := gptmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gptmc *GrouProfileTypeMappingCreate) ExecX(ctx context.Context) {
	if err := gptmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gptmc *GrouProfileTypeMappingCreate) check() error {
	if _, ok := gptmc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`genclients: missing required field "GrouProfileTypeMapping.group_id"`)}
	}
	if _, ok := gptmc.mutation.ProfileTypeID(); !ok {
		return &ValidationError{Name: "profile_type_id", err: errors.New(`genclients: missing required field "GrouProfileTypeMapping.profile_type_id"`)}
	}
	if _, ok := gptmc.mutation.Creator(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`genclients: missing required field "GrouProfileTypeMapping.creator"`)}
	}
	return nil
}

func (gptmc *GrouProfileTypeMappingCreate) sqlSave(ctx context.Context) (*GrouProfileTypeMapping, error) {
	if err := gptmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gptmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gptmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	gptmc.mutation.id = &_node.ID
	gptmc.mutation.done = true
	return _node, nil
}

func (gptmc *GrouProfileTypeMappingCreate) createSpec() (*GrouProfileTypeMapping, *sqlgraph.CreateSpec) {
	var (
		_node = &GrouProfileTypeMapping{config: gptmc.config}
		_spec = sqlgraph.NewCreateSpec(grouprofiletypemapping.Table, sqlgraph.NewFieldSpec(grouprofiletypemapping.FieldID, field.TypeInt64))
	)
	if id, ok := gptmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gptmc.mutation.GroupID(); ok {
		_spec.SetField(grouprofiletypemapping.FieldGroupID, field.TypeInt64, value)
		_node.GroupID = value
	}
	if value, ok := gptmc.mutation.ProfileTypeID(); ok {
		_spec.SetField(grouprofiletypemapping.FieldProfileTypeID, field.TypeInt64, value)
		_node.ProfileTypeID = value
	}
	if value, ok := gptmc.mutation.Creator(); ok {
		_spec.SetField(grouprofiletypemapping.FieldCreator, field.TypeString, value)
		_node.Creator = value
	}
	if value, ok := gptmc.mutation.CreatedTime(); ok {
		_spec.SetField(grouprofiletypemapping.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	return _node, _spec
}

// GrouProfileTypeMappingCreateBulk is the builder for creating many GrouProfileTypeMapping entities in bulk.
type GrouProfileTypeMappingCreateBulk struct {
	config
	err      error
	builders []*GrouProfileTypeMappingCreate
}

// Save creates the GrouProfileTypeMapping entities in the database.
func (gptmcb *GrouProfileTypeMappingCreateBulk) Save(ctx context.Context) ([]*GrouProfileTypeMapping, error) {
	if gptmcb.err != nil {
		return nil, gptmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gptmcb.builders))
	nodes := make([]*GrouProfileTypeMapping, len(gptmcb.builders))
	mutators := make([]Mutator, len(gptmcb.builders))
	for i := range gptmcb.builders {
		func(i int, root context.Context) {
			builder := gptmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GrouProfileTypeMappingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gptmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gptmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gptmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gptmcb *GrouProfileTypeMappingCreateBulk) SaveX(ctx context.Context) []*GrouProfileTypeMapping {
	v, err := gptmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gptmcb *GrouProfileTypeMappingCreateBulk) Exec(ctx context.Context) error {
	_, err := gptmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gptmcb *GrouProfileTypeMappingCreateBulk) ExecX(ctx context.Context) {
	if err := gptmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
