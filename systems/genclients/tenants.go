// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/models/schema"
	"fmcam/systems/genclients/tenants"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Tenants is the model entity for the Tenants schema.
type Tenants struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// 租户名
	Supplier string `json:"supplier"  db:"supplier"`
	// 租户号
	TenantID uuid.UUID `json:"tenant_id"  db:"tenant_id"`
	// 联系人
	Contacts string `json:"contacts"  db:"contacts"`
	// 电子邮箱
	Email string `json:"email"  db:"email"`
	// 备注
	Description string `json:"description"  db:"description"`
	// 类型
	Type string `json:"type"  db:"type"`
	// 省份
	Province string `json:"province"  db:"province"`
	// 城市
	City string `json:"city"  db:"city"`
	// 区县
	Area string `json:"area"  db:"area"`
	// 街道乡镇
	Street string `json:"street"  db:"street"`
	// 门牌地址
	Address string `json:"address"  db:"address"`
	// 地址编码
	AddrCode string `json:"addr_code"  db:"addr_code"`
	// 传真
	Fax string `json:"fax"  db:"fax"`
	// 固定电话
	PhoneNum string `json:"phone_num"  db:"phone_num"`
	// 手机号
	Telephone string `json:"telephone"  db:"telephone"`
	// 纳税人,识别号
	TaxNum string `json:"tax_num"  db:"tax_num"`
	// 开户行
	BankName string `json:"bank_name"  db:"bank_name"`
	// 账号
	AccountNumber string `json:"account_number"  db:"account_number"`
	// 排序
	Sort string `json:"sort"  db:"sort"`
	// 启用
	Enabled bool `json:"enabled" db:"enabled"`
	// 已删除
	DeleteFlag string `json:"delete_flag" db:"delete_flag"`
	// 系统内置
	Isystem bool `json:"isystem" db:"isystem"`
	// 税率
	TaxRate schema.Decimal `json:"tax_rate,omitempty"`
	// 预收款
	AdvanceIn schema.Decimal `json:"advance_in,omitempty"`
	// 期初应收
	BeginNeedGet schema.Decimal `json:"begin_need_get,omitempty"`
	// 期初应付
	BeginNeedPay schema.Decimal `json:"begin_need_pay,omitempty"`
	// 累计应收
	AllNeedGet schema.Decimal `json:"all_need_get,omitempty"`
	// 累计应付
	AllNeedPay schema.Decimal `json:"all_need_pay,omitempty"`
	// 操作人
	Creator string `json:"creator"  db:"creator"`
	// 创建时间
	CreatedTime *time.Time `json:"created_time" db:"created_time"`
	// 更新时间
	UpdatedTime  *time.Time `json:"updated_time" db:"updated_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tenants) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenants.FieldTaxRate, tenants.FieldAdvanceIn, tenants.FieldBeginNeedGet, tenants.FieldBeginNeedPay, tenants.FieldAllNeedGet, tenants.FieldAllNeedPay:
			values[i] = new(schema.Decimal)
		case tenants.FieldEnabled, tenants.FieldIsystem:
			values[i] = new(sql.NullBool)
		case tenants.FieldID:
			values[i] = new(sql.NullInt64)
		case tenants.FieldSupplier, tenants.FieldContacts, tenants.FieldEmail, tenants.FieldDescription, tenants.FieldType, tenants.FieldProvince, tenants.FieldCity, tenants.FieldArea, tenants.FieldStreet, tenants.FieldAddress, tenants.FieldAddrCode, tenants.FieldFax, tenants.FieldPhoneNum, tenants.FieldTelephone, tenants.FieldTaxNum, tenants.FieldBankName, tenants.FieldAccountNumber, tenants.FieldSort, tenants.FieldDeleteFlag, tenants.FieldCreator:
			values[i] = new(sql.NullString)
		case tenants.FieldCreatedTime, tenants.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		case tenants.FieldTenantID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tenants fields.
func (t *Tenants) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenants.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int64(value.Int64)
		case tenants.FieldSupplier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supplier", values[i])
			} else if value.Valid {
				t.Supplier = value.String
			}
		case tenants.FieldTenantID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				t.TenantID = *value
			}
		case tenants.FieldContacts:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contacts", values[i])
			} else if value.Valid {
				t.Contacts = value.String
			}
		case tenants.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				t.Email = value.String
			}
		case tenants.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case tenants.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = value.String
			}
		case tenants.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[i])
			} else if value.Valid {
				t.Province = value.String
			}
		case tenants.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				t.City = value.String
			}
		case tenants.FieldArea:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field area", values[i])
			} else if value.Valid {
				t.Area = value.String
			}
		case tenants.FieldStreet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street", values[i])
			} else if value.Valid {
				t.Street = value.String
			}
		case tenants.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				t.Address = value.String
			}
		case tenants.FieldAddrCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field addr_code", values[i])
			} else if value.Valid {
				t.AddrCode = value.String
			}
		case tenants.FieldFax:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fax", values[i])
			} else if value.Valid {
				t.Fax = value.String
			}
		case tenants.FieldPhoneNum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_num", values[i])
			} else if value.Valid {
				t.PhoneNum = value.String
			}
		case tenants.FieldTelephone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field telephone", values[i])
			} else if value.Valid {
				t.Telephone = value.String
			}
		case tenants.FieldTaxNum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_num", values[i])
			} else if value.Valid {
				t.TaxNum = value.String
			}
		case tenants.FieldBankName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_name", values[i])
			} else if value.Valid {
				t.BankName = value.String
			}
		case tenants.FieldAccountNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_number", values[i])
			} else if value.Valid {
				t.AccountNumber = value.String
			}
		case tenants.FieldSort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				t.Sort = value.String
			}
		case tenants.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				t.Enabled = value.Bool
			}
		case tenants.FieldDeleteFlag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delete_flag", values[i])
			} else if value.Valid {
				t.DeleteFlag = value.String
			}
		case tenants.FieldIsystem:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isystem", values[i])
			} else if value.Valid {
				t.Isystem = value.Bool
			}
		case tenants.FieldTaxRate:
			if value, ok := values[i].(*schema.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field tax_rate", values[i])
			} else if value != nil {
				t.TaxRate = *value
			}
		case tenants.FieldAdvanceIn:
			if value, ok := values[i].(*schema.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field advance_in", values[i])
			} else if value != nil {
				t.AdvanceIn = *value
			}
		case tenants.FieldBeginNeedGet:
			if value, ok := values[i].(*schema.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field begin_need_get", values[i])
			} else if value != nil {
				t.BeginNeedGet = *value
			}
		case tenants.FieldBeginNeedPay:
			if value, ok := values[i].(*schema.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field begin_need_pay", values[i])
			} else if value != nil {
				t.BeginNeedPay = *value
			}
		case tenants.FieldAllNeedGet:
			if value, ok := values[i].(*schema.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field all_need_get", values[i])
			} else if value != nil {
				t.AllNeedGet = *value
			}
		case tenants.FieldAllNeedPay:
			if value, ok := values[i].(*schema.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field all_need_pay", values[i])
			} else if value != nil {
				t.AllNeedPay = *value
			}
		case tenants.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				t.Creator = value.String
			}
		case tenants.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				t.CreatedTime = new(time.Time)
				*t.CreatedTime = value.Time
			}
		case tenants.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				t.UpdatedTime = new(time.Time)
				*t.UpdatedTime = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tenants.
// This includes values selected through modifiers, order, etc.
func (t *Tenants) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Tenants.
// Note that you need to call Tenants.Unwrap() before calling this method if this Tenants
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tenants) Update() *TenantsUpdateOne {
	return NewTenantsClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tenants entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tenants) Unwrap() *Tenants {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("genclients: Tenants is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tenants) String() string {
	var builder strings.Builder
	builder.WriteString("Tenants(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("supplier=")
	builder.WriteString(t.Supplier)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", t.TenantID))
	builder.WriteString(", ")
	builder.WriteString("contacts=")
	builder.WriteString(t.Contacts)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(t.Email)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(t.Type)
	builder.WriteString(", ")
	builder.WriteString("province=")
	builder.WriteString(t.Province)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(t.City)
	builder.WriteString(", ")
	builder.WriteString("area=")
	builder.WriteString(t.Area)
	builder.WriteString(", ")
	builder.WriteString("street=")
	builder.WriteString(t.Street)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(t.Address)
	builder.WriteString(", ")
	builder.WriteString("addr_code=")
	builder.WriteString(t.AddrCode)
	builder.WriteString(", ")
	builder.WriteString("fax=")
	builder.WriteString(t.Fax)
	builder.WriteString(", ")
	builder.WriteString("phone_num=")
	builder.WriteString(t.PhoneNum)
	builder.WriteString(", ")
	builder.WriteString("telephone=")
	builder.WriteString(t.Telephone)
	builder.WriteString(", ")
	builder.WriteString("tax_num=")
	builder.WriteString(t.TaxNum)
	builder.WriteString(", ")
	builder.WriteString("bank_name=")
	builder.WriteString(t.BankName)
	builder.WriteString(", ")
	builder.WriteString("account_number=")
	builder.WriteString(t.AccountNumber)
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(t.Sort)
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", t.Enabled))
	builder.WriteString(", ")
	builder.WriteString("delete_flag=")
	builder.WriteString(t.DeleteFlag)
	builder.WriteString(", ")
	builder.WriteString("isystem=")
	builder.WriteString(fmt.Sprintf("%v", t.Isystem))
	builder.WriteString(", ")
	builder.WriteString("tax_rate=")
	builder.WriteString(fmt.Sprintf("%v", t.TaxRate))
	builder.WriteString(", ")
	builder.WriteString("advance_in=")
	builder.WriteString(fmt.Sprintf("%v", t.AdvanceIn))
	builder.WriteString(", ")
	builder.WriteString("begin_need_get=")
	builder.WriteString(fmt.Sprintf("%v", t.BeginNeedGet))
	builder.WriteString(", ")
	builder.WriteString("begin_need_pay=")
	builder.WriteString(fmt.Sprintf("%v", t.BeginNeedPay))
	builder.WriteString(", ")
	builder.WriteString("all_need_get=")
	builder.WriteString(fmt.Sprintf("%v", t.AllNeedGet))
	builder.WriteString(", ")
	builder.WriteString("all_need_pay=")
	builder.WriteString(fmt.Sprintf("%v", t.AllNeedPay))
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(t.Creator)
	builder.WriteString(", ")
	if v := t.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := t.UpdatedTime; v != nil {
		builder.WriteString("updated_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// TenantsSlice is a parsable slice of Tenants.
type TenantsSlice []*Tenants
