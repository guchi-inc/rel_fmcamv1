// Code generated by ent, DO NOT EDIT.

package tenants

import (
	"fmcam/models/schema"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the tenants type in the database.
	Label = "tenants"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSupplier holds the string denoting the supplier field in the database.
	FieldSupplier = "supplier"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldContacts holds the string denoting the contacts field in the database.
	FieldContacts = "contacts"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldProvince holds the string denoting the province field in the database.
	FieldProvince = "province"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldArea holds the string denoting the area field in the database.
	FieldArea = "area"
	// FieldStreet holds the string denoting the street field in the database.
	FieldStreet = "street"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldAddrCode holds the string denoting the addr_code field in the database.
	FieldAddrCode = "addr_code"
	// FieldFax holds the string denoting the fax field in the database.
	FieldFax = "fax"
	// FieldPhoneNum holds the string denoting the phone_num field in the database.
	FieldPhoneNum = "phone_num"
	// FieldTelephone holds the string denoting the telephone field in the database.
	FieldTelephone = "telephone"
	// FieldTaxNum holds the string denoting the tax_num field in the database.
	FieldTaxNum = "tax_num"
	// FieldBankName holds the string denoting the bank_name field in the database.
	FieldBankName = "bank_name"
	// FieldAccountNumber holds the string denoting the account_number field in the database.
	FieldAccountNumber = "account_number"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldDeleteFlag holds the string denoting the delete_flag field in the database.
	FieldDeleteFlag = "delete_flag"
	// FieldIsystem holds the string denoting the isystem field in the database.
	FieldIsystem = "isystem"
	// FieldTaxRate holds the string denoting the tax_rate field in the database.
	FieldTaxRate = "tax_rate"
	// FieldAdvanceIn holds the string denoting the advance_in field in the database.
	FieldAdvanceIn = "advance_in"
	// FieldBeginNeedGet holds the string denoting the begin_need_get field in the database.
	FieldBeginNeedGet = "begin_need_get"
	// FieldBeginNeedPay holds the string denoting the begin_need_pay field in the database.
	FieldBeginNeedPay = "begin_need_pay"
	// FieldAllNeedGet holds the string denoting the all_need_get field in the database.
	FieldAllNeedGet = "all_need_get"
	// FieldAllNeedPay holds the string denoting the all_need_pay field in the database.
	FieldAllNeedPay = "all_need_pay"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// Table holds the table name of the tenants in the database.
	Table = "fm_tenant"
)

// Columns holds all SQL columns for tenants fields.
var Columns = []string{
	FieldID,
	FieldSupplier,
	FieldTenantID,
	FieldContacts,
	FieldEmail,
	FieldDescription,
	FieldType,
	FieldProvince,
	FieldCity,
	FieldArea,
	FieldStreet,
	FieldAddress,
	FieldAddrCode,
	FieldFax,
	FieldPhoneNum,
	FieldTelephone,
	FieldTaxNum,
	FieldBankName,
	FieldAccountNumber,
	FieldSort,
	FieldEnabled,
	FieldDeleteFlag,
	FieldIsystem,
	FieldTaxRate,
	FieldAdvanceIn,
	FieldBeginNeedGet,
	FieldBeginNeedPay,
	FieldAllNeedGet,
	FieldAllNeedPay,
	FieldCreator,
	FieldCreatedTime,
	FieldUpdatedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SupplierValidator is a validator for the "supplier" field. It is called by the builders before save.
	SupplierValidator func(string) error
	// DefaultTenantID holds the default value on creation for the "tenant_id" field.
	DefaultTenantID func() uuid.UUID
	// DefaultContacts holds the default value on creation for the "contacts" field.
	DefaultContacts string
	// ContactsValidator is a validator for the "contacts" field. It is called by the builders before save.
	ContactsValidator func(string) error
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// DefaultProvince holds the default value on creation for the "province" field.
	DefaultProvince string
	// ProvinceValidator is a validator for the "province" field. It is called by the builders before save.
	ProvinceValidator func(string) error
	// DefaultCity holds the default value on creation for the "city" field.
	DefaultCity string
	// CityValidator is a validator for the "city" field. It is called by the builders before save.
	CityValidator func(string) error
	// DefaultArea holds the default value on creation for the "area" field.
	DefaultArea string
	// AreaValidator is a validator for the "area" field. It is called by the builders before save.
	AreaValidator func(string) error
	// DefaultStreet holds the default value on creation for the "street" field.
	DefaultStreet string
	// StreetValidator is a validator for the "street" field. It is called by the builders before save.
	StreetValidator func(string) error
	// DefaultAddress holds the default value on creation for the "address" field.
	DefaultAddress string
	// AddressValidator is a validator for the "address" field. It is called by the builders before save.
	AddressValidator func(string) error
	// DefaultAddrCode holds the default value on creation for the "addr_code" field.
	DefaultAddrCode string
	// AddrCodeValidator is a validator for the "addr_code" field. It is called by the builders before save.
	AddrCodeValidator func(string) error
	// DefaultFax holds the default value on creation for the "fax" field.
	DefaultFax string
	// FaxValidator is a validator for the "fax" field. It is called by the builders before save.
	FaxValidator func(string) error
	// DefaultPhoneNum holds the default value on creation for the "phone_num" field.
	DefaultPhoneNum string
	// PhoneNumValidator is a validator for the "phone_num" field. It is called by the builders before save.
	PhoneNumValidator func(string) error
	// DefaultTelephone holds the default value on creation for the "telephone" field.
	DefaultTelephone string
	// TelephoneValidator is a validator for the "telephone" field. It is called by the builders before save.
	TelephoneValidator func(string) error
	// DefaultTaxNum holds the default value on creation for the "tax_num" field.
	DefaultTaxNum string
	// TaxNumValidator is a validator for the "tax_num" field. It is called by the builders before save.
	TaxNumValidator func(string) error
	// DefaultBankName holds the default value on creation for the "bank_name" field.
	DefaultBankName string
	// BankNameValidator is a validator for the "bank_name" field. It is called by the builders before save.
	BankNameValidator func(string) error
	// DefaultAccountNumber holds the default value on creation for the "account_number" field.
	DefaultAccountNumber string
	// AccountNumberValidator is a validator for the "account_number" field. It is called by the builders before save.
	AccountNumberValidator func(string) error
	// DefaultSort holds the default value on creation for the "sort" field.
	DefaultSort string
	// SortValidator is a validator for the "sort" field. It is called by the builders before save.
	SortValidator func(string) error
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultDeleteFlag holds the default value on creation for the "delete_flag" field.
	DefaultDeleteFlag string
	// DefaultIsystem holds the default value on creation for the "isystem" field.
	DefaultIsystem bool
	// DefaultTaxRate holds the default value on creation for the "tax_rate" field.
	DefaultTaxRate schema.Decimal
	// DefaultAdvanceIn holds the default value on creation for the "advance_in" field.
	DefaultAdvanceIn schema.Decimal
	// DefaultBeginNeedGet holds the default value on creation for the "begin_need_get" field.
	DefaultBeginNeedGet schema.Decimal
	// DefaultBeginNeedPay holds the default value on creation for the "begin_need_pay" field.
	DefaultBeginNeedPay schema.Decimal
	// DefaultAllNeedGet holds the default value on creation for the "all_need_get" field.
	DefaultAllNeedGet schema.Decimal
	// DefaultAllNeedPay holds the default value on creation for the "all_need_pay" field.
	DefaultAllNeedPay schema.Decimal
	// DefaultCreator holds the default value on creation for the "creator" field.
	DefaultCreator string
	// CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	CreatorValidator func(string) error
	// UpdateDefaultUpdatedTime holds the default value on update for the "updated_time" field.
	UpdateDefaultUpdatedTime func() time.Time
)

// OrderOption defines the ordering options for the Tenants queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySupplier orders the results by the supplier field.
func BySupplier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSupplier, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByContacts orders the results by the contacts field.
func ByContacts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContacts, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByProvince orders the results by the province field.
func ByProvince(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvince, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByArea orders the results by the area field.
func ByArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArea, opts...).ToFunc()
}

// ByStreet orders the results by the street field.
func ByStreet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreet, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByAddrCode orders the results by the addr_code field.
func ByAddrCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddrCode, opts...).ToFunc()
}

// ByFax orders the results by the fax field.
func ByFax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFax, opts...).ToFunc()
}

// ByPhoneNum orders the results by the phone_num field.
func ByPhoneNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNum, opts...).ToFunc()
}

// ByTelephone orders the results by the telephone field.
func ByTelephone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelephone, opts...).ToFunc()
}

// ByTaxNum orders the results by the tax_num field.
func ByTaxNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxNum, opts...).ToFunc()
}

// ByBankName orders the results by the bank_name field.
func ByBankName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBankName, opts...).ToFunc()
}

// ByAccountNumber orders the results by the account_number field.
func ByAccountNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountNumber, opts...).ToFunc()
}

// BySort orders the results by the sort field.
func BySort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSort, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByDeleteFlag orders the results by the delete_flag field.
func ByDeleteFlag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteFlag, opts...).ToFunc()
}

// ByIsystem orders the results by the isystem field.
func ByIsystem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsystem, opts...).ToFunc()
}

// ByTaxRate orders the results by the tax_rate field.
func ByTaxRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxRate, opts...).ToFunc()
}

// ByAdvanceIn orders the results by the advance_in field.
func ByAdvanceIn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdvanceIn, opts...).ToFunc()
}

// ByBeginNeedGet orders the results by the begin_need_get field.
func ByBeginNeedGet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBeginNeedGet, opts...).ToFunc()
}

// ByBeginNeedPay orders the results by the begin_need_pay field.
func ByBeginNeedPay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBeginNeedPay, opts...).ToFunc()
}

// ByAllNeedGet orders the results by the all_need_get field.
func ByAllNeedGet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllNeedGet, opts...).ToFunc()
}

// ByAllNeedPay orders the results by the all_need_pay field.
func ByAllNeedPay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllNeedPay, opts...).ToFunc()
}

// ByCreator orders the results by the creator field.
func ByCreator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreator, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}
