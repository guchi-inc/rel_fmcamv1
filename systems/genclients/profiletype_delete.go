// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"fmcam/systems/genclients/predicate"
	"fmcam/systems/genclients/profiletype"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProfileTypeDelete is the builder for deleting a ProfileType entity.
type ProfileTypeDelete struct {
	config
	hooks    []Hook
	mutation *ProfileTypeMutation
}

// Where appends a list predicates to the ProfileTypeDelete builder.
func (ptd *ProfileTypeDelete) Where(ps ...predicate.ProfileType) *ProfileTypeDelete {
	ptd.mutation.Where(ps...)
	return ptd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ptd *ProfileTypeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ptd.sqlExec, ptd.mutation, ptd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ptd *ProfileTypeDelete) ExecX(ctx context.Context) int {
	n, err := ptd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ptd *ProfileTypeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(profiletype.Table, sqlgraph.NewFieldSpec(profiletype.FieldID, field.TypeInt64))
	if ps := ptd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ptd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ptd.mutation.done = true
	return affected, err
}

// ProfileTypeDeleteOne is the builder for deleting a single ProfileType entity.
type ProfileTypeDeleteOne struct {
	ptd *ProfileTypeDelete
}

// Where appends a list predicates to the ProfileTypeDelete builder.
func (ptdo *ProfileTypeDeleteOne) Where(ps ...predicate.ProfileType) *ProfileTypeDeleteOne {
	ptdo.ptd.mutation.Where(ps...)
	return ptdo
}

// Exec executes the deletion query.
func (ptdo *ProfileTypeDeleteOne) Exec(ctx context.Context) error {
	n, err := ptdo.ptd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{profiletype.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ptdo *ProfileTypeDeleteOne) ExecX(ctx context.Context) {
	if err := ptdo.Exec(ctx); err != nil {
		panic(err)
	}
}
