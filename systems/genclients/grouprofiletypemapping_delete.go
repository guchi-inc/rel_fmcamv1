// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"fmcam/systems/genclients/grouprofiletypemapping"
	"fmcam/systems/genclients/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GrouProfileTypeMappingDelete is the builder for deleting a GrouProfileTypeMapping entity.
type GrouProfileTypeMappingDelete struct {
	config
	hooks    []Hook
	mutation *GrouProfileTypeMappingMutation
}

// Where appends a list predicates to the GrouProfileTypeMappingDelete builder.
func (gptmd *GrouProfileTypeMappingDelete) Where(ps ...predicate.GrouProfileTypeMapping) *GrouProfileTypeMappingDelete {
	gptmd.mutation.Where(ps...)
	return gptmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gptmd *GrouProfileTypeMappingDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gptmd.sqlExec, gptmd.mutation, gptmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gptmd *GrouProfileTypeMappingDelete) ExecX(ctx context.Context) int {
	n, err := gptmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gptmd *GrouProfileTypeMappingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(grouprofiletypemapping.Table, sqlgraph.NewFieldSpec(grouprofiletypemapping.FieldID, field.TypeInt64))
	if ps := gptmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gptmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gptmd.mutation.done = true
	return affected, err
}

// GrouProfileTypeMappingDeleteOne is the builder for deleting a single GrouProfileTypeMapping entity.
type GrouProfileTypeMappingDeleteOne struct {
	gptmd *GrouProfileTypeMappingDelete
}

// Where appends a list predicates to the GrouProfileTypeMappingDelete builder.
func (gptmdo *GrouProfileTypeMappingDeleteOne) Where(ps ...predicate.GrouProfileTypeMapping) *GrouProfileTypeMappingDeleteOne {
	gptmdo.gptmd.mutation.Where(ps...)
	return gptmdo
}

// Exec executes the deletion query.
func (gptmdo *GrouProfileTypeMappingDeleteOne) Exec(ctx context.Context) error {
	n, err := gptmdo.gptmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{grouprofiletypemapping.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gptmdo *GrouProfileTypeMappingDeleteOne) ExecX(ctx context.Context) {
	if err := gptmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
