// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/fmpmsapi"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FMPMSApi is the model entity for the FMPMSApi schema.
type FMPMSApi struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// PMS商名
	PmsName string `json:"pms_name"  db:"pms_name"`
	// 对接地址
	PmsAPI string `json:"pms_api"  db:"pms_api"`
	// 启用
	Enabled *bool `json:"enabled" db:"enabled"`
	// 联系人
	Contact string `json:"contact"  db:"contact"`
	// 联系电话
	Phonenum *string `json:"phonenum"  db:"phonenum"`
	// 功能描述
	Description *string `json:"description"  db:"description"`
	// 删除标记
	DeleteFlag *string `json:"delete_flag"  db:"delete_flag"`
	// 操作员
	Creator *string `json:"creator"  db:"creator"`
	// 创建时间
	CreatedTime *time.Time `json:"created_time" db:"created_time"`
	// 更新时间
	UpdatedTime  *time.Time `json:"updated_time" db:"updated_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FMPMSApi) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fmpmsapi.FieldEnabled:
			values[i] = new(sql.NullBool)
		case fmpmsapi.FieldID:
			values[i] = new(sql.NullInt64)
		case fmpmsapi.FieldPmsName, fmpmsapi.FieldPmsAPI, fmpmsapi.FieldContact, fmpmsapi.FieldPhonenum, fmpmsapi.FieldDescription, fmpmsapi.FieldDeleteFlag, fmpmsapi.FieldCreator:
			values[i] = new(sql.NullString)
		case fmpmsapi.FieldCreatedTime, fmpmsapi.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FMPMSApi fields.
func (fa *FMPMSApi) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fmpmsapi.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fa.ID = int64(value.Int64)
		case fmpmsapi.FieldPmsName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pms_name", values[i])
			} else if value.Valid {
				fa.PmsName = value.String
			}
		case fmpmsapi.FieldPmsAPI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pms_api", values[i])
			} else if value.Valid {
				fa.PmsAPI = value.String
			}
		case fmpmsapi.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				fa.Enabled = new(bool)
				*fa.Enabled = value.Bool
			}
		case fmpmsapi.FieldContact:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact", values[i])
			} else if value.Valid {
				fa.Contact = value.String
			}
		case fmpmsapi.FieldPhonenum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phonenum", values[i])
			} else if value.Valid {
				fa.Phonenum = new(string)
				*fa.Phonenum = value.String
			}
		case fmpmsapi.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				fa.Description = new(string)
				*fa.Description = value.String
			}
		case fmpmsapi.FieldDeleteFlag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delete_flag", values[i])
			} else if value.Valid {
				fa.DeleteFlag = new(string)
				*fa.DeleteFlag = value.String
			}
		case fmpmsapi.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				fa.Creator = new(string)
				*fa.Creator = value.String
			}
		case fmpmsapi.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				fa.CreatedTime = new(time.Time)
				*fa.CreatedTime = value.Time
			}
		case fmpmsapi.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				fa.UpdatedTime = new(time.Time)
				*fa.UpdatedTime = value.Time
			}
		default:
			fa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FMPMSApi.
// This includes values selected through modifiers, order, etc.
func (fa *FMPMSApi) Value(name string) (ent.Value, error) {
	return fa.selectValues.Get(name)
}

// Update returns a builder for updating this FMPMSApi.
// Note that you need to call FMPMSApi.Unwrap() before calling this method if this FMPMSApi
// was returned from a transaction, and the transaction was committed or rolled back.
func (fa *FMPMSApi) Update() *FMPMSApiUpdateOne {
	return NewFMPMSApiClient(fa.config).UpdateOne(fa)
}

// Unwrap unwraps the FMPMSApi entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fa *FMPMSApi) Unwrap() *FMPMSApi {
	_tx, ok := fa.config.driver.(*txDriver)
	if !ok {
		panic("genclients: FMPMSApi is not a transactional entity")
	}
	fa.config.driver = _tx.drv
	return fa
}

// String implements the fmt.Stringer.
func (fa *FMPMSApi) String() string {
	var builder strings.Builder
	builder.WriteString("FMPMSApi(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fa.ID))
	builder.WriteString("pms_name=")
	builder.WriteString(fa.PmsName)
	builder.WriteString(", ")
	builder.WriteString("pms_api=")
	builder.WriteString(fa.PmsAPI)
	builder.WriteString(", ")
	if v := fa.Enabled; v != nil {
		builder.WriteString("enabled=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("contact=")
	builder.WriteString(fa.Contact)
	builder.WriteString(", ")
	if v := fa.Phonenum; v != nil {
		builder.WriteString("phonenum=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fa.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fa.DeleteFlag; v != nil {
		builder.WriteString("delete_flag=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fa.Creator; v != nil {
		builder.WriteString("creator=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fa.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := fa.UpdatedTime; v != nil {
		builder.WriteString("updated_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// FMPMSApis is a parsable slice of FMPMSApi.
type FMPMSApis []*FMPMSApi
