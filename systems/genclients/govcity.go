// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/govcity"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GovCity is the model entity for the GovCity schema.
type GovCity struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// 编号
	Code string `json:"code"  db:"code"`
	// 名称
	Name string `json:"name"  db:"name"`
	// 省编号
	ProvinceCode string `json:"province_code"  db:"province_code"`
	// 操作人
	Creator string `json:"creator"  db:"creator"`
	// 删除标记
	DeleteFlag string `json:"delete_flag"  db:"delete_flag"`
	// 创建时间
	CreatedTime  *time.Time `json:"created_time" db:"created_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GovCity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case govcity.FieldID:
			values[i] = new(sql.NullInt64)
		case govcity.FieldCode, govcity.FieldName, govcity.FieldProvinceCode, govcity.FieldCreator, govcity.FieldDeleteFlag:
			values[i] = new(sql.NullString)
		case govcity.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GovCity fields.
func (gc *GovCity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case govcity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gc.ID = int64(value.Int64)
		case govcity.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				gc.Code = value.String
			}
		case govcity.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gc.Name = value.String
			}
		case govcity.FieldProvinceCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province_code", values[i])
			} else if value.Valid {
				gc.ProvinceCode = value.String
			}
		case govcity.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				gc.Creator = value.String
			}
		case govcity.FieldDeleteFlag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delete_flag", values[i])
			} else if value.Valid {
				gc.DeleteFlag = value.String
			}
		case govcity.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				gc.CreatedTime = new(time.Time)
				*gc.CreatedTime = value.Time
			}
		default:
			gc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GovCity.
// This includes values selected through modifiers, order, etc.
func (gc *GovCity) Value(name string) (ent.Value, error) {
	return gc.selectValues.Get(name)
}

// Update returns a builder for updating this GovCity.
// Note that you need to call GovCity.Unwrap() before calling this method if this GovCity
// was returned from a transaction, and the transaction was committed or rolled back.
func (gc *GovCity) Update() *GovCityUpdateOne {
	return NewGovCityClient(gc.config).UpdateOne(gc)
}

// Unwrap unwraps the GovCity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gc *GovCity) Unwrap() *GovCity {
	_tx, ok := gc.config.driver.(*txDriver)
	if !ok {
		panic("genclients: GovCity is not a transactional entity")
	}
	gc.config.driver = _tx.drv
	return gc
}

// String implements the fmt.Stringer.
func (gc *GovCity) String() string {
	var builder strings.Builder
	builder.WriteString("GovCity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gc.ID))
	builder.WriteString("code=")
	builder.WriteString(gc.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(gc.Name)
	builder.WriteString(", ")
	builder.WriteString("province_code=")
	builder.WriteString(gc.ProvinceCode)
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(gc.Creator)
	builder.WriteString(", ")
	builder.WriteString("delete_flag=")
	builder.WriteString(gc.DeleteFlag)
	builder.WriteString(", ")
	if v := gc.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// GovCities is a parsable slice of GovCity.
type GovCities []*GovCity
