// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/faces"
	"fmcam/systems/genclients/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FacesUpdate is the builder for updating Faces entities.
type FacesUpdate struct {
	config
	hooks    []Hook
	mutation *FacesMutation
}

// Where appends a list predicates to the FacesUpdate builder.
func (fu *FacesUpdate) Where(ps ...predicate.Faces) *FacesUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetFaceEmbedding sets the "face_embedding" field.
func (fu *FacesUpdate) SetFaceEmbedding(b []byte) *FacesUpdate {
	fu.mutation.SetFaceEmbedding(b)
	return fu
}

// SetImageURL sets the "image_url" field.
func (fu *FacesUpdate) SetImageURL(s string) *FacesUpdate {
	fu.mutation.SetImageURL(s)
	return fu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (fu *FacesUpdate) SetNillableImageURL(s *string) *FacesUpdate {
	if s != nil {
		fu.SetImageURL(*s)
	}
	return fu
}

// SetIsPrimary sets the "is_primary" field.
func (fu *FacesUpdate) SetIsPrimary(b bool) *FacesUpdate {
	fu.mutation.SetIsPrimary(b)
	return fu
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (fu *FacesUpdate) SetNillableIsPrimary(b *bool) *FacesUpdate {
	if b != nil {
		fu.SetIsPrimary(*b)
	}
	return fu
}

// SetUpdatedLocation sets the "updated_location" field.
func (fu *FacesUpdate) SetUpdatedLocation(s string) *FacesUpdate {
	fu.mutation.SetUpdatedLocation(s)
	return fu
}

// SetNillableUpdatedLocation sets the "updated_location" field if the given value is not nil.
func (fu *FacesUpdate) SetNillableUpdatedLocation(s *string) *FacesUpdate {
	if s != nil {
		fu.SetUpdatedLocation(*s)
	}
	return fu
}

// ClearUpdatedLocation clears the value of the "updated_location" field.
func (fu *FacesUpdate) ClearUpdatedLocation() *FacesUpdate {
	fu.mutation.ClearUpdatedLocation()
	return fu
}

// SetCaptureCount sets the "capture_count" field.
func (fu *FacesUpdate) SetCaptureCount(i int) *FacesUpdate {
	fu.mutation.ResetCaptureCount()
	fu.mutation.SetCaptureCount(i)
	return fu
}

// SetNillableCaptureCount sets the "capture_count" field if the given value is not nil.
func (fu *FacesUpdate) SetNillableCaptureCount(i *int) *FacesUpdate {
	if i != nil {
		fu.SetCaptureCount(*i)
	}
	return fu
}

// AddCaptureCount adds i to the "capture_count" field.
func (fu *FacesUpdate) AddCaptureCount(i int) *FacesUpdate {
	fu.mutation.AddCaptureCount(i)
	return fu
}

// SetExpiresTime sets the "expires_time" field.
func (fu *FacesUpdate) SetExpiresTime(t time.Time) *FacesUpdate {
	fu.mutation.SetExpiresTime(t)
	return fu
}

// SetNillableExpiresTime sets the "expires_time" field if the given value is not nil.
func (fu *FacesUpdate) SetNillableExpiresTime(t *time.Time) *FacesUpdate {
	if t != nil {
		fu.SetExpiresTime(*t)
	}
	return fu
}

// SetCreatedTime sets the "created_time" field.
func (fu *FacesUpdate) SetCreatedTime(t time.Time) *FacesUpdate {
	fu.mutation.SetCreatedTime(t)
	return fu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fu *FacesUpdate) SetNillableCreatedTime(t *time.Time) *FacesUpdate {
	if t != nil {
		fu.SetCreatedTime(*t)
	}
	return fu
}

// ClearCreatedTime clears the value of the "created_time" field.
func (fu *FacesUpdate) ClearCreatedTime() *FacesUpdate {
	fu.mutation.ClearCreatedTime()
	return fu
}

// SetUpdatedTime sets the "updated_time" field.
func (fu *FacesUpdate) SetUpdatedTime(t time.Time) *FacesUpdate {
	fu.mutation.SetUpdatedTime(t)
	return fu
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (fu *FacesUpdate) ClearUpdatedTime() *FacesUpdate {
	fu.mutation.ClearUpdatedTime()
	return fu
}

// Mutation returns the FacesMutation object of the builder.
func (fu *FacesUpdate) Mutation() *FacesMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FacesUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FacesUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FacesUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FacesUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FacesUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedTime(); !ok && !fu.mutation.UpdatedTimeCleared() {
		v := faces.UpdateDefaultUpdatedTime()
		fu.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FacesUpdate) check() error {
	if v, ok := fu.mutation.FaceEmbedding(); ok {
		if err := faces.FaceEmbeddingValidator(v); err != nil {
			return &ValidationError{Name: "face_embedding", err: fmt.Errorf(`genclients: validator failed for field "Faces.face_embedding": %w`, err)}
		}
	}
	if v, ok := fu.mutation.ImageURL(); ok {
		if err := faces.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`genclients: validator failed for field "Faces.image_url": %w`, err)}
		}
	}
	if v, ok := fu.mutation.UpdatedLocation(); ok {
		if err := faces.UpdatedLocationValidator(v); err != nil {
			return &ValidationError{Name: "updated_location", err: fmt.Errorf(`genclients: validator failed for field "Faces.updated_location": %w`, err)}
		}
	}
	return nil
}

func (fu *FacesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(faces.Table, faces.Columns, sqlgraph.NewFieldSpec(faces.FieldID, field.TypeInt64))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.FaceEmbedding(); ok {
		_spec.SetField(faces.FieldFaceEmbedding, field.TypeBytes, value)
	}
	if value, ok := fu.mutation.ImageURL(); ok {
		_spec.SetField(faces.FieldImageURL, field.TypeString, value)
	}
	if value, ok := fu.mutation.IsPrimary(); ok {
		_spec.SetField(faces.FieldIsPrimary, field.TypeBool, value)
	}
	if value, ok := fu.mutation.UpdatedLocation(); ok {
		_spec.SetField(faces.FieldUpdatedLocation, field.TypeString, value)
	}
	if fu.mutation.UpdatedLocationCleared() {
		_spec.ClearField(faces.FieldUpdatedLocation, field.TypeString)
	}
	if value, ok := fu.mutation.CaptureCount(); ok {
		_spec.SetField(faces.FieldCaptureCount, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedCaptureCount(); ok {
		_spec.AddField(faces.FieldCaptureCount, field.TypeInt, value)
	}
	if value, ok := fu.mutation.ExpiresTime(); ok {
		_spec.SetField(faces.FieldExpiresTime, field.TypeTime, value)
	}
	if value, ok := fu.mutation.CreatedTime(); ok {
		_spec.SetField(faces.FieldCreatedTime, field.TypeTime, value)
	}
	if fu.mutation.CreatedTimeCleared() {
		_spec.ClearField(faces.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := fu.mutation.UpdatedTime(); ok {
		_spec.SetField(faces.FieldUpdatedTime, field.TypeTime, value)
	}
	if fu.mutation.UpdatedTimeCleared() {
		_spec.ClearField(faces.FieldUpdatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{faces.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FacesUpdateOne is the builder for updating a single Faces entity.
type FacesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FacesMutation
}

// SetFaceEmbedding sets the "face_embedding" field.
func (fuo *FacesUpdateOne) SetFaceEmbedding(b []byte) *FacesUpdateOne {
	fuo.mutation.SetFaceEmbedding(b)
	return fuo
}

// SetImageURL sets the "image_url" field.
func (fuo *FacesUpdateOne) SetImageURL(s string) *FacesUpdateOne {
	fuo.mutation.SetImageURL(s)
	return fuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (fuo *FacesUpdateOne) SetNillableImageURL(s *string) *FacesUpdateOne {
	if s != nil {
		fuo.SetImageURL(*s)
	}
	return fuo
}

// SetIsPrimary sets the "is_primary" field.
func (fuo *FacesUpdateOne) SetIsPrimary(b bool) *FacesUpdateOne {
	fuo.mutation.SetIsPrimary(b)
	return fuo
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (fuo *FacesUpdateOne) SetNillableIsPrimary(b *bool) *FacesUpdateOne {
	if b != nil {
		fuo.SetIsPrimary(*b)
	}
	return fuo
}

// SetUpdatedLocation sets the "updated_location" field.
func (fuo *FacesUpdateOne) SetUpdatedLocation(s string) *FacesUpdateOne {
	fuo.mutation.SetUpdatedLocation(s)
	return fuo
}

// SetNillableUpdatedLocation sets the "updated_location" field if the given value is not nil.
func (fuo *FacesUpdateOne) SetNillableUpdatedLocation(s *string) *FacesUpdateOne {
	if s != nil {
		fuo.SetUpdatedLocation(*s)
	}
	return fuo
}

// ClearUpdatedLocation clears the value of the "updated_location" field.
func (fuo *FacesUpdateOne) ClearUpdatedLocation() *FacesUpdateOne {
	fuo.mutation.ClearUpdatedLocation()
	return fuo
}

// SetCaptureCount sets the "capture_count" field.
func (fuo *FacesUpdateOne) SetCaptureCount(i int) *FacesUpdateOne {
	fuo.mutation.ResetCaptureCount()
	fuo.mutation.SetCaptureCount(i)
	return fuo
}

// SetNillableCaptureCount sets the "capture_count" field if the given value is not nil.
func (fuo *FacesUpdateOne) SetNillableCaptureCount(i *int) *FacesUpdateOne {
	if i != nil {
		fuo.SetCaptureCount(*i)
	}
	return fuo
}

// AddCaptureCount adds i to the "capture_count" field.
func (fuo *FacesUpdateOne) AddCaptureCount(i int) *FacesUpdateOne {
	fuo.mutation.AddCaptureCount(i)
	return fuo
}

// SetExpiresTime sets the "expires_time" field.
func (fuo *FacesUpdateOne) SetExpiresTime(t time.Time) *FacesUpdateOne {
	fuo.mutation.SetExpiresTime(t)
	return fuo
}

// SetNillableExpiresTime sets the "expires_time" field if the given value is not nil.
func (fuo *FacesUpdateOne) SetNillableExpiresTime(t *time.Time) *FacesUpdateOne {
	if t != nil {
		fuo.SetExpiresTime(*t)
	}
	return fuo
}

// SetCreatedTime sets the "created_time" field.
func (fuo *FacesUpdateOne) SetCreatedTime(t time.Time) *FacesUpdateOne {
	fuo.mutation.SetCreatedTime(t)
	return fuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fuo *FacesUpdateOne) SetNillableCreatedTime(t *time.Time) *FacesUpdateOne {
	if t != nil {
		fuo.SetCreatedTime(*t)
	}
	return fuo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (fuo *FacesUpdateOne) ClearCreatedTime() *FacesUpdateOne {
	fuo.mutation.ClearCreatedTime()
	return fuo
}

// SetUpdatedTime sets the "updated_time" field.
func (fuo *FacesUpdateOne) SetUpdatedTime(t time.Time) *FacesUpdateOne {
	fuo.mutation.SetUpdatedTime(t)
	return fuo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (fuo *FacesUpdateOne) ClearUpdatedTime() *FacesUpdateOne {
	fuo.mutation.ClearUpdatedTime()
	return fuo
}

// Mutation returns the FacesMutation object of the builder.
func (fuo *FacesUpdateOne) Mutation() *FacesMutation {
	return fuo.mutation
}

// Where appends a list predicates to the FacesUpdate builder.
func (fuo *FacesUpdateOne) Where(ps ...predicate.Faces) *FacesUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FacesUpdateOne) Select(field string, fields ...string) *FacesUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Faces entity.
func (fuo *FacesUpdateOne) Save(ctx context.Context) (*Faces, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FacesUpdateOne) SaveX(ctx context.Context) *Faces {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FacesUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FacesUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FacesUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedTime(); !ok && !fuo.mutation.UpdatedTimeCleared() {
		v := faces.UpdateDefaultUpdatedTime()
		fuo.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FacesUpdateOne) check() error {
	if v, ok := fuo.mutation.FaceEmbedding(); ok {
		if err := faces.FaceEmbeddingValidator(v); err != nil {
			return &ValidationError{Name: "face_embedding", err: fmt.Errorf(`genclients: validator failed for field "Faces.face_embedding": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.ImageURL(); ok {
		if err := faces.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`genclients: validator failed for field "Faces.image_url": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.UpdatedLocation(); ok {
		if err := faces.UpdatedLocationValidator(v); err != nil {
			return &ValidationError{Name: "updated_location", err: fmt.Errorf(`genclients: validator failed for field "Faces.updated_location": %w`, err)}
		}
	}
	return nil
}

func (fuo *FacesUpdateOne) sqlSave(ctx context.Context) (_node *Faces, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(faces.Table, faces.Columns, sqlgraph.NewFieldSpec(faces.FieldID, field.TypeInt64))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "Faces.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, faces.FieldID)
		for _, f := range fields {
			if !faces.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != faces.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.FaceEmbedding(); ok {
		_spec.SetField(faces.FieldFaceEmbedding, field.TypeBytes, value)
	}
	if value, ok := fuo.mutation.ImageURL(); ok {
		_spec.SetField(faces.FieldImageURL, field.TypeString, value)
	}
	if value, ok := fuo.mutation.IsPrimary(); ok {
		_spec.SetField(faces.FieldIsPrimary, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.UpdatedLocation(); ok {
		_spec.SetField(faces.FieldUpdatedLocation, field.TypeString, value)
	}
	if fuo.mutation.UpdatedLocationCleared() {
		_spec.ClearField(faces.FieldUpdatedLocation, field.TypeString)
	}
	if value, ok := fuo.mutation.CaptureCount(); ok {
		_spec.SetField(faces.FieldCaptureCount, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedCaptureCount(); ok {
		_spec.AddField(faces.FieldCaptureCount, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.ExpiresTime(); ok {
		_spec.SetField(faces.FieldExpiresTime, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.CreatedTime(); ok {
		_spec.SetField(faces.FieldCreatedTime, field.TypeTime, value)
	}
	if fuo.mutation.CreatedTimeCleared() {
		_spec.ClearField(faces.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := fuo.mutation.UpdatedTime(); ok {
		_spec.SetField(faces.FieldUpdatedTime, field.TypeTime, value)
	}
	if fuo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(faces.FieldUpdatedTime, field.TypeTime)
	}
	_node = &Faces{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{faces.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
