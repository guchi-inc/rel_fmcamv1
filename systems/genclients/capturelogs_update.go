// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/capturelogs"
	"fmcam/systems/genclients/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CaptureLogsUpdate is the builder for updating CaptureLogs entities.
type CaptureLogsUpdate struct {
	config
	hooks    []Hook
	mutation *CaptureLogsMutation
}

// Where appends a list predicates to the CaptureLogsUpdate builder.
func (clu *CaptureLogsUpdate) Where(ps ...predicate.CaptureLogs) *CaptureLogsUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetFuncType sets the "func_type" field.
func (clu *CaptureLogsUpdate) SetFuncType(i int8) *CaptureLogsUpdate {
	clu.mutation.ResetFuncType()
	clu.mutation.SetFuncType(i)
	return clu
}

// SetNillableFuncType sets the "func_type" field if the given value is not nil.
func (clu *CaptureLogsUpdate) SetNillableFuncType(i *int8) *CaptureLogsUpdate {
	if i != nil {
		clu.SetFuncType(*i)
	}
	return clu
}

// AddFuncType adds i to the "func_type" field.
func (clu *CaptureLogsUpdate) AddFuncType(i int8) *CaptureLogsUpdate {
	clu.mutation.AddFuncType(i)
	return clu
}

// ClearFuncType clears the value of the "func_type" field.
func (clu *CaptureLogsUpdate) ClearFuncType() *CaptureLogsUpdate {
	clu.mutation.ClearFuncType()
	return clu
}

// SetMatchScore sets the "match_score" field.
func (clu *CaptureLogsUpdate) SetMatchScore(f float32) *CaptureLogsUpdate {
	clu.mutation.ResetMatchScore()
	clu.mutation.SetMatchScore(f)
	return clu
}

// SetNillableMatchScore sets the "match_score" field if the given value is not nil.
func (clu *CaptureLogsUpdate) SetNillableMatchScore(f *float32) *CaptureLogsUpdate {
	if f != nil {
		clu.SetMatchScore(*f)
	}
	return clu
}

// AddMatchScore adds f to the "match_score" field.
func (clu *CaptureLogsUpdate) AddMatchScore(f float32) *CaptureLogsUpdate {
	clu.mutation.AddMatchScore(f)
	return clu
}

// ClearMatchScore clears the value of the "match_score" field.
func (clu *CaptureLogsUpdate) ClearMatchScore() *CaptureLogsUpdate {
	clu.mutation.ClearMatchScore()
	return clu
}

// SetHasAlert sets the "has_alert" field.
func (clu *CaptureLogsUpdate) SetHasAlert(b bool) *CaptureLogsUpdate {
	clu.mutation.SetHasAlert(b)
	return clu
}

// SetNillableHasAlert sets the "has_alert" field if the given value is not nil.
func (clu *CaptureLogsUpdate) SetNillableHasAlert(b *bool) *CaptureLogsUpdate {
	if b != nil {
		clu.SetHasAlert(*b)
	}
	return clu
}

// SetDeviceName sets the "device_name" field.
func (clu *CaptureLogsUpdate) SetDeviceName(s string) *CaptureLogsUpdate {
	clu.mutation.SetDeviceName(s)
	return clu
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (clu *CaptureLogsUpdate) SetNillableDeviceName(s *string) *CaptureLogsUpdate {
	if s != nil {
		clu.SetDeviceName(*s)
	}
	return clu
}

// ClearDeviceName clears the value of the "device_name" field.
func (clu *CaptureLogsUpdate) ClearDeviceName() *CaptureLogsUpdate {
	clu.mutation.ClearDeviceName()
	return clu
}

// SetDeviceLocation sets the "device_location" field.
func (clu *CaptureLogsUpdate) SetDeviceLocation(s string) *CaptureLogsUpdate {
	clu.mutation.SetDeviceLocation(s)
	return clu
}

// SetNillableDeviceLocation sets the "device_location" field if the given value is not nil.
func (clu *CaptureLogsUpdate) SetNillableDeviceLocation(s *string) *CaptureLogsUpdate {
	if s != nil {
		clu.SetDeviceLocation(*s)
	}
	return clu
}

// ClearDeviceLocation clears the value of the "device_location" field.
func (clu *CaptureLogsUpdate) ClearDeviceLocation() *CaptureLogsUpdate {
	clu.mutation.ClearDeviceLocation()
	return clu
}

// SetContent sets the "content" field.
func (clu *CaptureLogsUpdate) SetContent(s string) *CaptureLogsUpdate {
	clu.mutation.SetContent(s)
	return clu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (clu *CaptureLogsUpdate) SetNillableContent(s *string) *CaptureLogsUpdate {
	if s != nil {
		clu.SetContent(*s)
	}
	return clu
}

// ClearContent clears the value of the "content" field.
func (clu *CaptureLogsUpdate) ClearContent() *CaptureLogsUpdate {
	clu.mutation.ClearContent()
	return clu
}

// SetCaptureImageURL sets the "capture_image_url" field.
func (clu *CaptureLogsUpdate) SetCaptureImageURL(s string) *CaptureLogsUpdate {
	clu.mutation.SetCaptureImageURL(s)
	return clu
}

// SetNillableCaptureImageURL sets the "capture_image_url" field if the given value is not nil.
func (clu *CaptureLogsUpdate) SetNillableCaptureImageURL(s *string) *CaptureLogsUpdate {
	if s != nil {
		clu.SetCaptureImageURL(*s)
	}
	return clu
}

// ClearCaptureImageURL clears the value of the "capture_image_url" field.
func (clu *CaptureLogsUpdate) ClearCaptureImageURL() *CaptureLogsUpdate {
	clu.mutation.ClearCaptureImageURL()
	return clu
}

// SetCaptureTime sets the "capture_time" field.
func (clu *CaptureLogsUpdate) SetCaptureTime(t time.Time) *CaptureLogsUpdate {
	clu.mutation.SetCaptureTime(t)
	return clu
}

// SetNillableCaptureTime sets the "capture_time" field if the given value is not nil.
func (clu *CaptureLogsUpdate) SetNillableCaptureTime(t *time.Time) *CaptureLogsUpdate {
	if t != nil {
		clu.SetCaptureTime(*t)
	}
	return clu
}

// ClearCaptureTime clears the value of the "capture_time" field.
func (clu *CaptureLogsUpdate) ClearCaptureTime() *CaptureLogsUpdate {
	clu.mutation.ClearCaptureTime()
	return clu
}

// Mutation returns the CaptureLogsMutation object of the builder.
func (clu *CaptureLogsUpdate) Mutation() *CaptureLogsMutation {
	return clu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *CaptureLogsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, clu.sqlSave, clu.mutation, clu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clu *CaptureLogsUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *CaptureLogsUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *CaptureLogsUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clu *CaptureLogsUpdate) check() error {
	if v, ok := clu.mutation.CaptureImageURL(); ok {
		if err := capturelogs.CaptureImageURLValidator(v); err != nil {
			return &ValidationError{Name: "capture_image_url", err: fmt.Errorf(`genclients: validator failed for field "CaptureLogs.capture_image_url": %w`, err)}
		}
	}
	return nil
}

func (clu *CaptureLogsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := clu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(capturelogs.Table, capturelogs.Columns, sqlgraph.NewFieldSpec(capturelogs.FieldID, field.TypeInt64))
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clu.mutation.FuncType(); ok {
		_spec.SetField(capturelogs.FieldFuncType, field.TypeInt8, value)
	}
	if value, ok := clu.mutation.AddedFuncType(); ok {
		_spec.AddField(capturelogs.FieldFuncType, field.TypeInt8, value)
	}
	if clu.mutation.FuncTypeCleared() {
		_spec.ClearField(capturelogs.FieldFuncType, field.TypeInt8)
	}
	if value, ok := clu.mutation.MatchScore(); ok {
		_spec.SetField(capturelogs.FieldMatchScore, field.TypeFloat32, value)
	}
	if value, ok := clu.mutation.AddedMatchScore(); ok {
		_spec.AddField(capturelogs.FieldMatchScore, field.TypeFloat32, value)
	}
	if clu.mutation.MatchScoreCleared() {
		_spec.ClearField(capturelogs.FieldMatchScore, field.TypeFloat32)
	}
	if value, ok := clu.mutation.HasAlert(); ok {
		_spec.SetField(capturelogs.FieldHasAlert, field.TypeBool, value)
	}
	if value, ok := clu.mutation.DeviceName(); ok {
		_spec.SetField(capturelogs.FieldDeviceName, field.TypeString, value)
	}
	if clu.mutation.DeviceNameCleared() {
		_spec.ClearField(capturelogs.FieldDeviceName, field.TypeString)
	}
	if value, ok := clu.mutation.DeviceLocation(); ok {
		_spec.SetField(capturelogs.FieldDeviceLocation, field.TypeString, value)
	}
	if clu.mutation.DeviceLocationCleared() {
		_spec.ClearField(capturelogs.FieldDeviceLocation, field.TypeString)
	}
	if value, ok := clu.mutation.Content(); ok {
		_spec.SetField(capturelogs.FieldContent, field.TypeString, value)
	}
	if clu.mutation.ContentCleared() {
		_spec.ClearField(capturelogs.FieldContent, field.TypeString)
	}
	if value, ok := clu.mutation.CaptureImageURL(); ok {
		_spec.SetField(capturelogs.FieldCaptureImageURL, field.TypeString, value)
	}
	if clu.mutation.CaptureImageURLCleared() {
		_spec.ClearField(capturelogs.FieldCaptureImageURL, field.TypeString)
	}
	if value, ok := clu.mutation.CaptureTime(); ok {
		_spec.SetField(capturelogs.FieldCaptureTime, field.TypeTime, value)
	}
	if clu.mutation.CaptureTimeCleared() {
		_spec.ClearField(capturelogs.FieldCaptureTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{capturelogs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clu.mutation.done = true
	return n, nil
}

// CaptureLogsUpdateOne is the builder for updating a single CaptureLogs entity.
type CaptureLogsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CaptureLogsMutation
}

// SetFuncType sets the "func_type" field.
func (cluo *CaptureLogsUpdateOne) SetFuncType(i int8) *CaptureLogsUpdateOne {
	cluo.mutation.ResetFuncType()
	cluo.mutation.SetFuncType(i)
	return cluo
}

// SetNillableFuncType sets the "func_type" field if the given value is not nil.
func (cluo *CaptureLogsUpdateOne) SetNillableFuncType(i *int8) *CaptureLogsUpdateOne {
	if i != nil {
		cluo.SetFuncType(*i)
	}
	return cluo
}

// AddFuncType adds i to the "func_type" field.
func (cluo *CaptureLogsUpdateOne) AddFuncType(i int8) *CaptureLogsUpdateOne {
	cluo.mutation.AddFuncType(i)
	return cluo
}

// ClearFuncType clears the value of the "func_type" field.
func (cluo *CaptureLogsUpdateOne) ClearFuncType() *CaptureLogsUpdateOne {
	cluo.mutation.ClearFuncType()
	return cluo
}

// SetMatchScore sets the "match_score" field.
func (cluo *CaptureLogsUpdateOne) SetMatchScore(f float32) *CaptureLogsUpdateOne {
	cluo.mutation.ResetMatchScore()
	cluo.mutation.SetMatchScore(f)
	return cluo
}

// SetNillableMatchScore sets the "match_score" field if the given value is not nil.
func (cluo *CaptureLogsUpdateOne) SetNillableMatchScore(f *float32) *CaptureLogsUpdateOne {
	if f != nil {
		cluo.SetMatchScore(*f)
	}
	return cluo
}

// AddMatchScore adds f to the "match_score" field.
func (cluo *CaptureLogsUpdateOne) AddMatchScore(f float32) *CaptureLogsUpdateOne {
	cluo.mutation.AddMatchScore(f)
	return cluo
}

// ClearMatchScore clears the value of the "match_score" field.
func (cluo *CaptureLogsUpdateOne) ClearMatchScore() *CaptureLogsUpdateOne {
	cluo.mutation.ClearMatchScore()
	return cluo
}

// SetHasAlert sets the "has_alert" field.
func (cluo *CaptureLogsUpdateOne) SetHasAlert(b bool) *CaptureLogsUpdateOne {
	cluo.mutation.SetHasAlert(b)
	return cluo
}

// SetNillableHasAlert sets the "has_alert" field if the given value is not nil.
func (cluo *CaptureLogsUpdateOne) SetNillableHasAlert(b *bool) *CaptureLogsUpdateOne {
	if b != nil {
		cluo.SetHasAlert(*b)
	}
	return cluo
}

// SetDeviceName sets the "device_name" field.
func (cluo *CaptureLogsUpdateOne) SetDeviceName(s string) *CaptureLogsUpdateOne {
	cluo.mutation.SetDeviceName(s)
	return cluo
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (cluo *CaptureLogsUpdateOne) SetNillableDeviceName(s *string) *CaptureLogsUpdateOne {
	if s != nil {
		cluo.SetDeviceName(*s)
	}
	return cluo
}

// ClearDeviceName clears the value of the "device_name" field.
func (cluo *CaptureLogsUpdateOne) ClearDeviceName() *CaptureLogsUpdateOne {
	cluo.mutation.ClearDeviceName()
	return cluo
}

// SetDeviceLocation sets the "device_location" field.
func (cluo *CaptureLogsUpdateOne) SetDeviceLocation(s string) *CaptureLogsUpdateOne {
	cluo.mutation.SetDeviceLocation(s)
	return cluo
}

// SetNillableDeviceLocation sets the "device_location" field if the given value is not nil.
func (cluo *CaptureLogsUpdateOne) SetNillableDeviceLocation(s *string) *CaptureLogsUpdateOne {
	if s != nil {
		cluo.SetDeviceLocation(*s)
	}
	return cluo
}

// ClearDeviceLocation clears the value of the "device_location" field.
func (cluo *CaptureLogsUpdateOne) ClearDeviceLocation() *CaptureLogsUpdateOne {
	cluo.mutation.ClearDeviceLocation()
	return cluo
}

// SetContent sets the "content" field.
func (cluo *CaptureLogsUpdateOne) SetContent(s string) *CaptureLogsUpdateOne {
	cluo.mutation.SetContent(s)
	return cluo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cluo *CaptureLogsUpdateOne) SetNillableContent(s *string) *CaptureLogsUpdateOne {
	if s != nil {
		cluo.SetContent(*s)
	}
	return cluo
}

// ClearContent clears the value of the "content" field.
func (cluo *CaptureLogsUpdateOne) ClearContent() *CaptureLogsUpdateOne {
	cluo.mutation.ClearContent()
	return cluo
}

// SetCaptureImageURL sets the "capture_image_url" field.
func (cluo *CaptureLogsUpdateOne) SetCaptureImageURL(s string) *CaptureLogsUpdateOne {
	cluo.mutation.SetCaptureImageURL(s)
	return cluo
}

// SetNillableCaptureImageURL sets the "capture_image_url" field if the given value is not nil.
func (cluo *CaptureLogsUpdateOne) SetNillableCaptureImageURL(s *string) *CaptureLogsUpdateOne {
	if s != nil {
		cluo.SetCaptureImageURL(*s)
	}
	return cluo
}

// ClearCaptureImageURL clears the value of the "capture_image_url" field.
func (cluo *CaptureLogsUpdateOne) ClearCaptureImageURL() *CaptureLogsUpdateOne {
	cluo.mutation.ClearCaptureImageURL()
	return cluo
}

// SetCaptureTime sets the "capture_time" field.
func (cluo *CaptureLogsUpdateOne) SetCaptureTime(t time.Time) *CaptureLogsUpdateOne {
	cluo.mutation.SetCaptureTime(t)
	return cluo
}

// SetNillableCaptureTime sets the "capture_time" field if the given value is not nil.
func (cluo *CaptureLogsUpdateOne) SetNillableCaptureTime(t *time.Time) *CaptureLogsUpdateOne {
	if t != nil {
		cluo.SetCaptureTime(*t)
	}
	return cluo
}

// ClearCaptureTime clears the value of the "capture_time" field.
func (cluo *CaptureLogsUpdateOne) ClearCaptureTime() *CaptureLogsUpdateOne {
	cluo.mutation.ClearCaptureTime()
	return cluo
}

// Mutation returns the CaptureLogsMutation object of the builder.
func (cluo *CaptureLogsUpdateOne) Mutation() *CaptureLogsMutation {
	return cluo.mutation
}

// Where appends a list predicates to the CaptureLogsUpdate builder.
func (cluo *CaptureLogsUpdateOne) Where(ps ...predicate.CaptureLogs) *CaptureLogsUpdateOne {
	cluo.mutation.Where(ps...)
	return cluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *CaptureLogsUpdateOne) Select(field string, fields ...string) *CaptureLogsUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated CaptureLogs entity.
func (cluo *CaptureLogsUpdateOne) Save(ctx context.Context) (*CaptureLogs, error) {
	return withHooks(ctx, cluo.sqlSave, cluo.mutation, cluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *CaptureLogsUpdateOne) SaveX(ctx context.Context) *CaptureLogs {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *CaptureLogsUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *CaptureLogsUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cluo *CaptureLogsUpdateOne) check() error {
	if v, ok := cluo.mutation.CaptureImageURL(); ok {
		if err := capturelogs.CaptureImageURLValidator(v); err != nil {
			return &ValidationError{Name: "capture_image_url", err: fmt.Errorf(`genclients: validator failed for field "CaptureLogs.capture_image_url": %w`, err)}
		}
	}
	return nil
}

func (cluo *CaptureLogsUpdateOne) sqlSave(ctx context.Context) (_node *CaptureLogs, err error) {
	if err := cluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(capturelogs.Table, capturelogs.Columns, sqlgraph.NewFieldSpec(capturelogs.FieldID, field.TypeInt64))
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "CaptureLogs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, capturelogs.FieldID)
		for _, f := range fields {
			if !capturelogs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != capturelogs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluo.mutation.FuncType(); ok {
		_spec.SetField(capturelogs.FieldFuncType, field.TypeInt8, value)
	}
	if value, ok := cluo.mutation.AddedFuncType(); ok {
		_spec.AddField(capturelogs.FieldFuncType, field.TypeInt8, value)
	}
	if cluo.mutation.FuncTypeCleared() {
		_spec.ClearField(capturelogs.FieldFuncType, field.TypeInt8)
	}
	if value, ok := cluo.mutation.MatchScore(); ok {
		_spec.SetField(capturelogs.FieldMatchScore, field.TypeFloat32, value)
	}
	if value, ok := cluo.mutation.AddedMatchScore(); ok {
		_spec.AddField(capturelogs.FieldMatchScore, field.TypeFloat32, value)
	}
	if cluo.mutation.MatchScoreCleared() {
		_spec.ClearField(capturelogs.FieldMatchScore, field.TypeFloat32)
	}
	if value, ok := cluo.mutation.HasAlert(); ok {
		_spec.SetField(capturelogs.FieldHasAlert, field.TypeBool, value)
	}
	if value, ok := cluo.mutation.DeviceName(); ok {
		_spec.SetField(capturelogs.FieldDeviceName, field.TypeString, value)
	}
	if cluo.mutation.DeviceNameCleared() {
		_spec.ClearField(capturelogs.FieldDeviceName, field.TypeString)
	}
	if value, ok := cluo.mutation.DeviceLocation(); ok {
		_spec.SetField(capturelogs.FieldDeviceLocation, field.TypeString, value)
	}
	if cluo.mutation.DeviceLocationCleared() {
		_spec.ClearField(capturelogs.FieldDeviceLocation, field.TypeString)
	}
	if value, ok := cluo.mutation.Content(); ok {
		_spec.SetField(capturelogs.FieldContent, field.TypeString, value)
	}
	if cluo.mutation.ContentCleared() {
		_spec.ClearField(capturelogs.FieldContent, field.TypeString)
	}
	if value, ok := cluo.mutation.CaptureImageURL(); ok {
		_spec.SetField(capturelogs.FieldCaptureImageURL, field.TypeString, value)
	}
	if cluo.mutation.CaptureImageURLCleared() {
		_spec.ClearField(capturelogs.FieldCaptureImageURL, field.TypeString)
	}
	if value, ok := cluo.mutation.CaptureTime(); ok {
		_spec.SetField(capturelogs.FieldCaptureTime, field.TypeTime, value)
	}
	if cluo.mutation.CaptureTimeCleared() {
		_spec.ClearField(capturelogs.FieldCaptureTime, field.TypeTime)
	}
	_node = &CaptureLogs{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{capturelogs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluo.mutation.done = true
	return _node, nil
}
