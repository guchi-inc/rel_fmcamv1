// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/faces"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FacesCreate is the builder for creating a Faces entity.
type FacesCreate struct {
	config
	mutation *FacesMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (fc *FacesCreate) SetTenantID(u uuid.UUID) *FacesCreate {
	fc.mutation.SetTenantID(u)
	return fc
}

// SetProfileID sets the "profile_id" field.
func (fc *FacesCreate) SetProfileID(i int64) *FacesCreate {
	fc.mutation.SetProfileID(i)
	return fc
}

// SetFaceEmbedding sets the "face_embedding" field.
func (fc *FacesCreate) SetFaceEmbedding(b []byte) *FacesCreate {
	fc.mutation.SetFaceEmbedding(b)
	return fc
}

// SetImageURL sets the "image_url" field.
func (fc *FacesCreate) SetImageURL(s string) *FacesCreate {
	fc.mutation.SetImageURL(s)
	return fc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (fc *FacesCreate) SetNillableImageURL(s *string) *FacesCreate {
	if s != nil {
		fc.SetImageURL(*s)
	}
	return fc
}

// SetIsPrimary sets the "is_primary" field.
func (fc *FacesCreate) SetIsPrimary(b bool) *FacesCreate {
	fc.mutation.SetIsPrimary(b)
	return fc
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (fc *FacesCreate) SetNillableIsPrimary(b *bool) *FacesCreate {
	if b != nil {
		fc.SetIsPrimary(*b)
	}
	return fc
}

// SetUpdatedLocation sets the "updated_location" field.
func (fc *FacesCreate) SetUpdatedLocation(s string) *FacesCreate {
	fc.mutation.SetUpdatedLocation(s)
	return fc
}

// SetNillableUpdatedLocation sets the "updated_location" field if the given value is not nil.
func (fc *FacesCreate) SetNillableUpdatedLocation(s *string) *FacesCreate {
	if s != nil {
		fc.SetUpdatedLocation(*s)
	}
	return fc
}

// SetCaptureCount sets the "capture_count" field.
func (fc *FacesCreate) SetCaptureCount(i int) *FacesCreate {
	fc.mutation.SetCaptureCount(i)
	return fc
}

// SetExpiresTime sets the "expires_time" field.
func (fc *FacesCreate) SetExpiresTime(t time.Time) *FacesCreate {
	fc.mutation.SetExpiresTime(t)
	return fc
}

// SetCreatedTime sets the "created_time" field.
func (fc *FacesCreate) SetCreatedTime(t time.Time) *FacesCreate {
	fc.mutation.SetCreatedTime(t)
	return fc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fc *FacesCreate) SetNillableCreatedTime(t *time.Time) *FacesCreate {
	if t != nil {
		fc.SetCreatedTime(*t)
	}
	return fc
}

// SetUpdatedTime sets the "updated_time" field.
func (fc *FacesCreate) SetUpdatedTime(t time.Time) *FacesCreate {
	fc.mutation.SetUpdatedTime(t)
	return fc
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (fc *FacesCreate) SetNillableUpdatedTime(t *time.Time) *FacesCreate {
	if t != nil {
		fc.SetUpdatedTime(*t)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FacesCreate) SetID(i int64) *FacesCreate {
	fc.mutation.SetID(i)
	return fc
}

// Mutation returns the FacesMutation object of the builder.
func (fc *FacesCreate) Mutation() *FacesMutation {
	return fc.mutation
}

// Save creates the Faces in the database.
func (fc *FacesCreate) Save(ctx context.Context) (*Faces, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FacesCreate) SaveX(ctx context.Context) *Faces {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FacesCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FacesCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FacesCreate) defaults() {
	if _, ok := fc.mutation.ImageURL(); !ok {
		v := faces.DefaultImageURL
		fc.mutation.SetImageURL(v)
	}
	if _, ok := fc.mutation.IsPrimary(); !ok {
		v := faces.DefaultIsPrimary
		fc.mutation.SetIsPrimary(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FacesCreate) check() error {
	if _, ok := fc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`genclients: missing required field "Faces.tenant_id"`)}
	}
	if _, ok := fc.mutation.ProfileID(); !ok {
		return &ValidationError{Name: "profile_id", err: errors.New(`genclients: missing required field "Faces.profile_id"`)}
	}
	if _, ok := fc.mutation.FaceEmbedding(); !ok {
		return &ValidationError{Name: "face_embedding", err: errors.New(`genclients: missing required field "Faces.face_embedding"`)}
	}
	if v, ok := fc.mutation.FaceEmbedding(); ok {
		if err := faces.FaceEmbeddingValidator(v); err != nil {
			return &ValidationError{Name: "face_embedding", err: fmt.Errorf(`genclients: validator failed for field "Faces.face_embedding": %w`, err)}
		}
	}
	if _, ok := fc.mutation.ImageURL(); !ok {
		return &ValidationError{Name: "image_url", err: errors.New(`genclients: missing required field "Faces.image_url"`)}
	}
	if v, ok := fc.mutation.ImageURL(); ok {
		if err := faces.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`genclients: validator failed for field "Faces.image_url": %w`, err)}
		}
	}
	if _, ok := fc.mutation.IsPrimary(); !ok {
		return &ValidationError{Name: "is_primary", err: errors.New(`genclients: missing required field "Faces.is_primary"`)}
	}
	if v, ok := fc.mutation.UpdatedLocation(); ok {
		if err := faces.UpdatedLocationValidator(v); err != nil {
			return &ValidationError{Name: "updated_location", err: fmt.Errorf(`genclients: validator failed for field "Faces.updated_location": %w`, err)}
		}
	}
	if _, ok := fc.mutation.CaptureCount(); !ok {
		return &ValidationError{Name: "capture_count", err: errors.New(`genclients: missing required field "Faces.capture_count"`)}
	}
	if _, ok := fc.mutation.ExpiresTime(); !ok {
		return &ValidationError{Name: "expires_time", err: errors.New(`genclients: missing required field "Faces.expires_time"`)}
	}
	return nil
}

func (fc *FacesCreate) sqlSave(ctx context.Context) (*Faces, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FacesCreate) createSpec() (*Faces, *sqlgraph.CreateSpec) {
	var (
		_node = &Faces{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(faces.Table, sqlgraph.NewFieldSpec(faces.FieldID, field.TypeInt64))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.TenantID(); ok {
		_spec.SetField(faces.FieldTenantID, field.TypeUUID, value)
		_node.TenantID = value
	}
	if value, ok := fc.mutation.ProfileID(); ok {
		_spec.SetField(faces.FieldProfileID, field.TypeInt64, value)
		_node.ProfileID = value
	}
	if value, ok := fc.mutation.FaceEmbedding(); ok {
		_spec.SetField(faces.FieldFaceEmbedding, field.TypeBytes, value)
		_node.FaceEmbedding = value
	}
	if value, ok := fc.mutation.ImageURL(); ok {
		_spec.SetField(faces.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := fc.mutation.IsPrimary(); ok {
		_spec.SetField(faces.FieldIsPrimary, field.TypeBool, value)
		_node.IsPrimary = value
	}
	if value, ok := fc.mutation.UpdatedLocation(); ok {
		_spec.SetField(faces.FieldUpdatedLocation, field.TypeString, value)
		_node.UpdatedLocation = &value
	}
	if value, ok := fc.mutation.CaptureCount(); ok {
		_spec.SetField(faces.FieldCaptureCount, field.TypeInt, value)
		_node.CaptureCount = value
	}
	if value, ok := fc.mutation.ExpiresTime(); ok {
		_spec.SetField(faces.FieldExpiresTime, field.TypeTime, value)
		_node.ExpiresTime = value
	}
	if value, ok := fc.mutation.CreatedTime(); ok {
		_spec.SetField(faces.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	if value, ok := fc.mutation.UpdatedTime(); ok {
		_spec.SetField(faces.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = &value
	}
	return _node, _spec
}

// FacesCreateBulk is the builder for creating many Faces entities in bulk.
type FacesCreateBulk struct {
	config
	err      error
	builders []*FacesCreate
}

// Save creates the Faces entities in the database.
func (fcb *FacesCreateBulk) Save(ctx context.Context) ([]*Faces, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Faces, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FacesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FacesCreateBulk) SaveX(ctx context.Context) []*Faces {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FacesCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FacesCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
