// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/fmuseraccount"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FmUserAccountCreate is the builder for creating a FmUserAccount entity.
type FmUserAccountCreate struct {
	config
	mutation *FmUserAccountMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (fuac *FmUserAccountCreate) SetUsername(s string) *FmUserAccountCreate {
	fuac.mutation.SetUsername(s)
	return fuac
}

// SetLoginName sets the "login_name" field.
func (fuac *FmUserAccountCreate) SetLoginName(s string) *FmUserAccountCreate {
	fuac.mutation.SetLoginName(s)
	return fuac
}

// SetNillableLoginName sets the "login_name" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableLoginName(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetLoginName(*s)
	}
	return fuac
}

// SetPassword sets the "password" field.
func (fuac *FmUserAccountCreate) SetPassword(s string) *FmUserAccountCreate {
	fuac.mutation.SetPassword(s)
	return fuac
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillablePassword(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetPassword(*s)
	}
	return fuac
}

// SetLeaderFlag sets the "leader_flag" field.
func (fuac *FmUserAccountCreate) SetLeaderFlag(s string) *FmUserAccountCreate {
	fuac.mutation.SetLeaderFlag(s)
	return fuac
}

// SetNillableLeaderFlag sets the "leader_flag" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableLeaderFlag(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetLeaderFlag(*s)
	}
	return fuac
}

// SetPosition sets the "position" field.
func (fuac *FmUserAccountCreate) SetPosition(s string) *FmUserAccountCreate {
	fuac.mutation.SetPosition(s)
	return fuac
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillablePosition(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetPosition(*s)
	}
	return fuac
}

// SetDepartment sets the "department" field.
func (fuac *FmUserAccountCreate) SetDepartment(s string) *FmUserAccountCreate {
	fuac.mutation.SetDepartment(s)
	return fuac
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableDepartment(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetDepartment(*s)
	}
	return fuac
}

// SetEmail sets the "email" field.
func (fuac *FmUserAccountCreate) SetEmail(s string) *FmUserAccountCreate {
	fuac.mutation.SetEmail(s)
	return fuac
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableEmail(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetEmail(*s)
	}
	return fuac
}

// SetPhonenum sets the "phonenum" field.
func (fuac *FmUserAccountCreate) SetPhonenum(s string) *FmUserAccountCreate {
	fuac.mutation.SetPhonenum(s)
	return fuac
}

// SetNillablePhonenum sets the "phonenum" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillablePhonenum(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetPhonenum(*s)
	}
	return fuac
}

// SetDescription sets the "description" field.
func (fuac *FmUserAccountCreate) SetDescription(s string) *FmUserAccountCreate {
	fuac.mutation.SetDescription(s)
	return fuac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableDescription(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetDescription(*s)
	}
	return fuac
}

// SetEthnicity sets the "ethnicity" field.
func (fuac *FmUserAccountCreate) SetEthnicity(s string) *FmUserAccountCreate {
	fuac.mutation.SetEthnicity(s)
	return fuac
}

// SetNillableEthnicity sets the "ethnicity" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableEthnicity(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetEthnicity(*s)
	}
	return fuac
}

// SetGender sets the "gender" field.
func (fuac *FmUserAccountCreate) SetGender(s string) *FmUserAccountCreate {
	fuac.mutation.SetGender(s)
	return fuac
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableGender(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetGender(*s)
	}
	return fuac
}

// SetLocal sets the "local" field.
func (fuac *FmUserAccountCreate) SetLocal(s string) *FmUserAccountCreate {
	fuac.mutation.SetLocal(s)
	return fuac
}

// SetNillableLocal sets the "local" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableLocal(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetLocal(*s)
	}
	return fuac
}

// SetLocalhost sets the "localhost" field.
func (fuac *FmUserAccountCreate) SetLocalhost(s string) *FmUserAccountCreate {
	fuac.mutation.SetLocalhost(s)
	return fuac
}

// SetNillableLocalhost sets the "localhost" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableLocalhost(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetLocalhost(*s)
	}
	return fuac
}

// SetM2Localhost sets the "m2_localhost" field.
func (fuac *FmUserAccountCreate) SetM2Localhost(s string) *FmUserAccountCreate {
	fuac.mutation.SetM2Localhost(s)
	return fuac
}

// SetNillableM2Localhost sets the "m2_localhost" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableM2Localhost(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetM2Localhost(*s)
	}
	return fuac
}

// SetIsmanager sets the "ismanager" field.
func (fuac *FmUserAccountCreate) SetIsmanager(s string) *FmUserAccountCreate {
	fuac.mutation.SetIsmanager(s)
	return fuac
}

// SetNillableIsmanager sets the "ismanager" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableIsmanager(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetIsmanager(*s)
	}
	return fuac
}

// SetIsystem sets the "isystem" field.
func (fuac *FmUserAccountCreate) SetIsystem(s string) *FmUserAccountCreate {
	fuac.mutation.SetIsystem(s)
	return fuac
}

// SetNillableIsystem sets the "isystem" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableIsystem(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetIsystem(*s)
	}
	return fuac
}

// SetEnabled sets the "enabled" field.
func (fuac *FmUserAccountCreate) SetEnabled(b bool) *FmUserAccountCreate {
	fuac.mutation.SetEnabled(b)
	return fuac
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableEnabled(b *bool) *FmUserAccountCreate {
	if b != nil {
		fuac.SetEnabled(*b)
	}
	return fuac
}

// SetIsSms sets the "is_sms" field.
func (fuac *FmUserAccountCreate) SetIsSms(b bool) *FmUserAccountCreate {
	fuac.mutation.SetIsSms(b)
	return fuac
}

// SetNillableIsSms sets the "is_sms" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableIsSms(b *bool) *FmUserAccountCreate {
	if b != nil {
		fuac.SetIsSms(*b)
	}
	return fuac
}

// SetMemberID sets the "member_id" field.
func (fuac *FmUserAccountCreate) SetMemberID(s string) *FmUserAccountCreate {
	fuac.mutation.SetMemberID(s)
	return fuac
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableMemberID(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetMemberID(*s)
	}
	return fuac
}

// SetLeaderID sets the "leader_id" field.
func (fuac *FmUserAccountCreate) SetLeaderID(s string) *FmUserAccountCreate {
	fuac.mutation.SetLeaderID(s)
	return fuac
}

// SetNillableLeaderID sets the "leader_id" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableLeaderID(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetLeaderID(*s)
	}
	return fuac
}

// SetDeviceTime sets the "device_time" field.
func (fuac *FmUserAccountCreate) SetDeviceTime(s string) *FmUserAccountCreate {
	fuac.mutation.SetDeviceTime(s)
	return fuac
}

// SetNillableDeviceTime sets the "device_time" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableDeviceTime(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetDeviceTime(*s)
	}
	return fuac
}

// SetTenantID sets the "tenant_id" field.
func (fuac *FmUserAccountCreate) SetTenantID(u uuid.UUID) *FmUserAccountCreate {
	fuac.mutation.SetTenantID(u)
	return fuac
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableTenantID(u *uuid.UUID) *FmUserAccountCreate {
	if u != nil {
		fuac.SetTenantID(*u)
	}
	return fuac
}

// SetDeleteFlag sets the "delete_flag" field.
func (fuac *FmUserAccountCreate) SetDeleteFlag(s string) *FmUserAccountCreate {
	fuac.mutation.SetDeleteFlag(s)
	return fuac
}

// SetNillableDeleteFlag sets the "delete_flag" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableDeleteFlag(s *string) *FmUserAccountCreate {
	if s != nil {
		fuac.SetDeleteFlag(*s)
	}
	return fuac
}

// SetCreatedTime sets the "created_time" field.
func (fuac *FmUserAccountCreate) SetCreatedTime(t time.Time) *FmUserAccountCreate {
	fuac.mutation.SetCreatedTime(t)
	return fuac
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableCreatedTime(t *time.Time) *FmUserAccountCreate {
	if t != nil {
		fuac.SetCreatedTime(*t)
	}
	return fuac
}

// SetUpdatedTime sets the "updated_time" field.
func (fuac *FmUserAccountCreate) SetUpdatedTime(t time.Time) *FmUserAccountCreate {
	fuac.mutation.SetUpdatedTime(t)
	return fuac
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableUpdatedTime(t *time.Time) *FmUserAccountCreate {
	if t != nil {
		fuac.SetUpdatedTime(*t)
	}
	return fuac
}

// SetDeletedTime sets the "deleted_time" field.
func (fuac *FmUserAccountCreate) SetDeletedTime(t time.Time) *FmUserAccountCreate {
	fuac.mutation.SetDeletedTime(t)
	return fuac
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (fuac *FmUserAccountCreate) SetNillableDeletedTime(t *time.Time) *FmUserAccountCreate {
	if t != nil {
		fuac.SetDeletedTime(*t)
	}
	return fuac
}

// SetID sets the "id" field.
func (fuac *FmUserAccountCreate) SetID(i int64) *FmUserAccountCreate {
	fuac.mutation.SetID(i)
	return fuac
}

// Mutation returns the FmUserAccountMutation object of the builder.
func (fuac *FmUserAccountCreate) Mutation() *FmUserAccountMutation {
	return fuac.mutation
}

// Save creates the FmUserAccount in the database.
func (fuac *FmUserAccountCreate) Save(ctx context.Context) (*FmUserAccount, error) {
	fuac.defaults()
	return withHooks(ctx, fuac.sqlSave, fuac.mutation, fuac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fuac *FmUserAccountCreate) SaveX(ctx context.Context) *FmUserAccount {
	v, err := fuac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fuac *FmUserAccountCreate) Exec(ctx context.Context) error {
	_, err := fuac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuac *FmUserAccountCreate) ExecX(ctx context.Context) {
	if err := fuac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuac *FmUserAccountCreate) defaults() {
	if _, ok := fuac.mutation.LoginName(); !ok {
		v := fmuseraccount.DefaultLoginName
		fuac.mutation.SetLoginName(v)
	}
	if _, ok := fuac.mutation.Password(); !ok {
		v := fmuseraccount.DefaultPassword
		fuac.mutation.SetPassword(v)
	}
	if _, ok := fuac.mutation.Enabled(); !ok {
		v := fmuseraccount.DefaultEnabled
		fuac.mutation.SetEnabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuac *FmUserAccountCreate) check() error {
	if _, ok := fuac.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`genclients: missing required field "FmUserAccount.username"`)}
	}
	if v, ok := fuac.mutation.Username(); ok {
		if err := fmuseraccount.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`genclients: validator failed for field "FmUserAccount.username": %w`, err)}
		}
	}
	if _, ok := fuac.mutation.LoginName(); !ok {
		return &ValidationError{Name: "login_name", err: errors.New(`genclients: missing required field "FmUserAccount.login_name"`)}
	}
	if v, ok := fuac.mutation.LoginName(); ok {
		if err := fmuseraccount.LoginNameValidator(v); err != nil {
			return &ValidationError{Name: "login_name", err: fmt.Errorf(`genclients: validator failed for field "FmUserAccount.login_name": %w`, err)}
		}
	}
	if _, ok := fuac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`genclients: missing required field "FmUserAccount.password"`)}
	}
	if v, ok := fuac.mutation.Password(); ok {
		if err := fmuseraccount.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`genclients: validator failed for field "FmUserAccount.password": %w`, err)}
		}
	}
	return nil
}

func (fuac *FmUserAccountCreate) sqlSave(ctx context.Context) (*FmUserAccount, error) {
	if err := fuac.check(); err != nil {
		return nil, err
	}
	_node, _spec := fuac.createSpec()
	if err := sqlgraph.CreateNode(ctx, fuac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fuac.mutation.id = &_node.ID
	fuac.mutation.done = true
	return _node, nil
}

func (fuac *FmUserAccountCreate) createSpec() (*FmUserAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &FmUserAccount{config: fuac.config}
		_spec = sqlgraph.NewCreateSpec(fmuseraccount.Table, sqlgraph.NewFieldSpec(fmuseraccount.FieldID, field.TypeInt64))
	)
	if id, ok := fuac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fuac.mutation.Username(); ok {
		_spec.SetField(fmuseraccount.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := fuac.mutation.LoginName(); ok {
		_spec.SetField(fmuseraccount.FieldLoginName, field.TypeString, value)
		_node.LoginName = value
	}
	if value, ok := fuac.mutation.Password(); ok {
		_spec.SetField(fmuseraccount.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := fuac.mutation.LeaderFlag(); ok {
		_spec.SetField(fmuseraccount.FieldLeaderFlag, field.TypeString, value)
		_node.LeaderFlag = value
	}
	if value, ok := fuac.mutation.Position(); ok {
		_spec.SetField(fmuseraccount.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := fuac.mutation.Department(); ok {
		_spec.SetField(fmuseraccount.FieldDepartment, field.TypeString, value)
		_node.Department = value
	}
	if value, ok := fuac.mutation.Email(); ok {
		_spec.SetField(fmuseraccount.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := fuac.mutation.Phonenum(); ok {
		_spec.SetField(fmuseraccount.FieldPhonenum, field.TypeString, value)
		_node.Phonenum = value
	}
	if value, ok := fuac.mutation.Description(); ok {
		_spec.SetField(fmuseraccount.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fuac.mutation.Ethnicity(); ok {
		_spec.SetField(fmuseraccount.FieldEthnicity, field.TypeString, value)
		_node.Ethnicity = value
	}
	if value, ok := fuac.mutation.Gender(); ok {
		_spec.SetField(fmuseraccount.FieldGender, field.TypeString, value)
		_node.Gender = value
	}
	if value, ok := fuac.mutation.Local(); ok {
		_spec.SetField(fmuseraccount.FieldLocal, field.TypeString, value)
		_node.Local = value
	}
	if value, ok := fuac.mutation.Localhost(); ok {
		_spec.SetField(fmuseraccount.FieldLocalhost, field.TypeString, value)
		_node.Localhost = value
	}
	if value, ok := fuac.mutation.M2Localhost(); ok {
		_spec.SetField(fmuseraccount.FieldM2Localhost, field.TypeString, value)
		_node.M2Localhost = value
	}
	if value, ok := fuac.mutation.Ismanager(); ok {
		_spec.SetField(fmuseraccount.FieldIsmanager, field.TypeString, value)
		_node.Ismanager = value
	}
	if value, ok := fuac.mutation.Isystem(); ok {
		_spec.SetField(fmuseraccount.FieldIsystem, field.TypeString, value)
		_node.Isystem = value
	}
	if value, ok := fuac.mutation.Enabled(); ok {
		_spec.SetField(fmuseraccount.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := fuac.mutation.IsSms(); ok {
		_spec.SetField(fmuseraccount.FieldIsSms, field.TypeBool, value)
		_node.IsSms = value
	}
	if value, ok := fuac.mutation.MemberID(); ok {
		_spec.SetField(fmuseraccount.FieldMemberID, field.TypeString, value)
		_node.MemberID = value
	}
	if value, ok := fuac.mutation.LeaderID(); ok {
		_spec.SetField(fmuseraccount.FieldLeaderID, field.TypeString, value)
		_node.LeaderID = value
	}
	if value, ok := fuac.mutation.DeviceTime(); ok {
		_spec.SetField(fmuseraccount.FieldDeviceTime, field.TypeString, value)
		_node.DeviceTime = value
	}
	if value, ok := fuac.mutation.TenantID(); ok {
		_spec.SetField(fmuseraccount.FieldTenantID, field.TypeUUID, value)
		_node.TenantID = value
	}
	if value, ok := fuac.mutation.DeleteFlag(); ok {
		_spec.SetField(fmuseraccount.FieldDeleteFlag, field.TypeString, value)
		_node.DeleteFlag = value
	}
	if value, ok := fuac.mutation.CreatedTime(); ok {
		_spec.SetField(fmuseraccount.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	if value, ok := fuac.mutation.UpdatedTime(); ok {
		_spec.SetField(fmuseraccount.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = &value
	}
	if value, ok := fuac.mutation.DeletedTime(); ok {
		_spec.SetField(fmuseraccount.FieldDeletedTime, field.TypeTime, value)
		_node.DeletedTime = &value
	}
	return _node, _spec
}

// FmUserAccountCreateBulk is the builder for creating many FmUserAccount entities in bulk.
type FmUserAccountCreateBulk struct {
	config
	err      error
	builders []*FmUserAccountCreate
}

// Save creates the FmUserAccount entities in the database.
func (fuacb *FmUserAccountCreateBulk) Save(ctx context.Context) ([]*FmUserAccount, error) {
	if fuacb.err != nil {
		return nil, fuacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fuacb.builders))
	nodes := make([]*FmUserAccount, len(fuacb.builders))
	mutators := make([]Mutator, len(fuacb.builders))
	for i := range fuacb.builders {
		func(i int, root context.Context) {
			builder := fuacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FmUserAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fuacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fuacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fuacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fuacb *FmUserAccountCreateBulk) SaveX(ctx context.Context) []*FmUserAccount {
	v, err := fuacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fuacb *FmUserAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := fuacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuacb *FmUserAccountCreateBulk) ExecX(ctx context.Context) {
	if err := fuacb.Exec(ctx); err != nil {
		panic(err)
	}
}
