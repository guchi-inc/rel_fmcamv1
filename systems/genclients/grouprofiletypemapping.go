// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/grouprofiletypemapping"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GrouProfileTypeMapping is the model entity for the GrouProfileTypeMapping schema.
type GrouProfileTypeMapping struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// 分组ID
	GroupID int64 `json:"group_id" db:"group_id"`
	// 设备 ID
	ProfileTypeID int64 `json:"profile_type_id" db:"profile_type_id"`
	// 操作人
	Creator string `json:"creator" db:"creator"`
	// 操作时间
	CreatedTime  *time.Time `json:"created_time" db:"created_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GrouProfileTypeMapping) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case grouprofiletypemapping.FieldID, grouprofiletypemapping.FieldGroupID, grouprofiletypemapping.FieldProfileTypeID:
			values[i] = new(sql.NullInt64)
		case grouprofiletypemapping.FieldCreator:
			values[i] = new(sql.NullString)
		case grouprofiletypemapping.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GrouProfileTypeMapping fields.
func (gptm *GrouProfileTypeMapping) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grouprofiletypemapping.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gptm.ID = int64(value.Int64)
		case grouprofiletypemapping.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				gptm.GroupID = value.Int64
			}
		case grouprofiletypemapping.FieldProfileTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field profile_type_id", values[i])
			} else if value.Valid {
				gptm.ProfileTypeID = value.Int64
			}
		case grouprofiletypemapping.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				gptm.Creator = value.String
			}
		case grouprofiletypemapping.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				gptm.CreatedTime = new(time.Time)
				*gptm.CreatedTime = value.Time
			}
		default:
			gptm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GrouProfileTypeMapping.
// This includes values selected through modifiers, order, etc.
func (gptm *GrouProfileTypeMapping) Value(name string) (ent.Value, error) {
	return gptm.selectValues.Get(name)
}

// Update returns a builder for updating this GrouProfileTypeMapping.
// Note that you need to call GrouProfileTypeMapping.Unwrap() before calling this method if this GrouProfileTypeMapping
// was returned from a transaction, and the transaction was committed or rolled back.
func (gptm *GrouProfileTypeMapping) Update() *GrouProfileTypeMappingUpdateOne {
	return NewGrouProfileTypeMappingClient(gptm.config).UpdateOne(gptm)
}

// Unwrap unwraps the GrouProfileTypeMapping entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gptm *GrouProfileTypeMapping) Unwrap() *GrouProfileTypeMapping {
	_tx, ok := gptm.config.driver.(*txDriver)
	if !ok {
		panic("genclients: GrouProfileTypeMapping is not a transactional entity")
	}
	gptm.config.driver = _tx.drv
	return gptm
}

// String implements the fmt.Stringer.
func (gptm *GrouProfileTypeMapping) String() string {
	var builder strings.Builder
	builder.WriteString("GrouProfileTypeMapping(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gptm.ID))
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", gptm.GroupID))
	builder.WriteString(", ")
	builder.WriteString("profile_type_id=")
	builder.WriteString(fmt.Sprintf("%v", gptm.ProfileTypeID))
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(gptm.Creator)
	builder.WriteString(", ")
	if v := gptm.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// GrouProfileTypeMappings is a parsable slice of GrouProfileTypeMapping.
type GrouProfileTypeMappings []*GrouProfileTypeMapping
