// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"fmcam/systems/genclients/fmdemands"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FmDemandsCreate is the builder for creating a FmDemands entity.
type FmDemandsCreate struct {
	config
	mutation *FmDemandsMutation
	hooks    []Hook
}

// SetSupplier sets the "supplier" field.
func (fdc *FmDemandsCreate) SetSupplier(s string) *FmDemandsCreate {
	fdc.mutation.SetSupplier(s)
	return fdc
}

// SetNillableSupplier sets the "supplier" field if the given value is not nil.
func (fdc *FmDemandsCreate) SetNillableSupplier(s *string) *FmDemandsCreate {
	if s != nil {
		fdc.SetSupplier(*s)
	}
	return fdc
}

// SetUsername sets the "username" field.
func (fdc *FmDemandsCreate) SetUsername(s string) *FmDemandsCreate {
	fdc.mutation.SetUsername(s)
	return fdc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (fdc *FmDemandsCreate) SetNillableUsername(s *string) *FmDemandsCreate {
	if s != nil {
		fdc.SetUsername(*s)
	}
	return fdc
}

// SetPhonenum sets the "phonenum" field.
func (fdc *FmDemandsCreate) SetPhonenum(s string) *FmDemandsCreate {
	fdc.mutation.SetPhonenum(s)
	return fdc
}

// SetNillablePhonenum sets the "phonenum" field if the given value is not nil.
func (fdc *FmDemandsCreate) SetNillablePhonenum(s *string) *FmDemandsCreate {
	if s != nil {
		fdc.SetPhonenum(*s)
	}
	return fdc
}

// SetEmail sets the "email" field.
func (fdc *FmDemandsCreate) SetEmail(s string) *FmDemandsCreate {
	fdc.mutation.SetEmail(s)
	return fdc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (fdc *FmDemandsCreate) SetNillableEmail(s *string) *FmDemandsCreate {
	if s != nil {
		fdc.SetEmail(*s)
	}
	return fdc
}

// SetProvince sets the "province" field.
func (fdc *FmDemandsCreate) SetProvince(s string) *FmDemandsCreate {
	fdc.mutation.SetProvince(s)
	return fdc
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (fdc *FmDemandsCreate) SetNillableProvince(s *string) *FmDemandsCreate {
	if s != nil {
		fdc.SetProvince(*s)
	}
	return fdc
}

// SetCity sets the "city" field.
func (fdc *FmDemandsCreate) SetCity(s string) *FmDemandsCreate {
	fdc.mutation.SetCity(s)
	return fdc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (fdc *FmDemandsCreate) SetNillableCity(s *string) *FmDemandsCreate {
	if s != nil {
		fdc.SetCity(*s)
	}
	return fdc
}

// SetArea sets the "area" field.
func (fdc *FmDemandsCreate) SetArea(s string) *FmDemandsCreate {
	fdc.mutation.SetArea(s)
	return fdc
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (fdc *FmDemandsCreate) SetNillableArea(s *string) *FmDemandsCreate {
	if s != nil {
		fdc.SetArea(*s)
	}
	return fdc
}

// SetStreet sets the "street" field.
func (fdc *FmDemandsCreate) SetStreet(s string) *FmDemandsCreate {
	fdc.mutation.SetStreet(s)
	return fdc
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (fdc *FmDemandsCreate) SetNillableStreet(s *string) *FmDemandsCreate {
	if s != nil {
		fdc.SetStreet(*s)
	}
	return fdc
}

// SetMessage sets the "message" field.
func (fdc *FmDemandsCreate) SetMessage(s string) *FmDemandsCreate {
	fdc.mutation.SetMessage(s)
	return fdc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (fdc *FmDemandsCreate) SetNillableMessage(s *string) *FmDemandsCreate {
	if s != nil {
		fdc.SetMessage(*s)
	}
	return fdc
}

// SetCreator sets the "creator" field.
func (fdc *FmDemandsCreate) SetCreator(s string) *FmDemandsCreate {
	fdc.mutation.SetCreator(s)
	return fdc
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (fdc *FmDemandsCreate) SetNillableCreator(s *string) *FmDemandsCreate {
	if s != nil {
		fdc.SetCreator(*s)
	}
	return fdc
}

// SetCreatedTime sets the "created_time" field.
func (fdc *FmDemandsCreate) SetCreatedTime(t time.Time) *FmDemandsCreate {
	fdc.mutation.SetCreatedTime(t)
	return fdc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fdc *FmDemandsCreate) SetNillableCreatedTime(t *time.Time) *FmDemandsCreate {
	if t != nil {
		fdc.SetCreatedTime(*t)
	}
	return fdc
}

// SetID sets the "id" field.
func (fdc *FmDemandsCreate) SetID(i int64) *FmDemandsCreate {
	fdc.mutation.SetID(i)
	return fdc
}

// Mutation returns the FmDemandsMutation object of the builder.
func (fdc *FmDemandsCreate) Mutation() *FmDemandsMutation {
	return fdc.mutation
}

// Save creates the FmDemands in the database.
func (fdc *FmDemandsCreate) Save(ctx context.Context) (*FmDemands, error) {
	fdc.defaults()
	return withHooks(ctx, fdc.sqlSave, fdc.mutation, fdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fdc *FmDemandsCreate) SaveX(ctx context.Context) *FmDemands {
	v, err := fdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdc *FmDemandsCreate) Exec(ctx context.Context) error {
	_, err := fdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdc *FmDemandsCreate) ExecX(ctx context.Context) {
	if err := fdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fdc *FmDemandsCreate) defaults() {
	if _, ok := fdc.mutation.Supplier(); !ok {
		v := fmdemands.DefaultSupplier
		fdc.mutation.SetSupplier(v)
	}
	if _, ok := fdc.mutation.Username(); !ok {
		v := fmdemands.DefaultUsername
		fdc.mutation.SetUsername(v)
	}
	if _, ok := fdc.mutation.Phonenum(); !ok {
		v := fmdemands.DefaultPhonenum
		fdc.mutation.SetPhonenum(v)
	}
	if _, ok := fdc.mutation.Email(); !ok {
		v := fmdemands.DefaultEmail
		fdc.mutation.SetEmail(v)
	}
	if _, ok := fdc.mutation.Province(); !ok {
		v := fmdemands.DefaultProvince
		fdc.mutation.SetProvince(v)
	}
	if _, ok := fdc.mutation.City(); !ok {
		v := fmdemands.DefaultCity
		fdc.mutation.SetCity(v)
	}
	if _, ok := fdc.mutation.Area(); !ok {
		v := fmdemands.DefaultArea
		fdc.mutation.SetArea(v)
	}
	if _, ok := fdc.mutation.Street(); !ok {
		v := fmdemands.DefaultStreet
		fdc.mutation.SetStreet(v)
	}
	if _, ok := fdc.mutation.Message(); !ok {
		v := fmdemands.DefaultMessage
		fdc.mutation.SetMessage(v)
	}
	if _, ok := fdc.mutation.Creator(); !ok {
		v := fmdemands.DefaultCreator
		fdc.mutation.SetCreator(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fdc *FmDemandsCreate) check() error {
	if v, ok := fdc.mutation.Supplier(); ok {
		if err := fmdemands.SupplierValidator(v); err != nil {
			return &ValidationError{Name: "supplier", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.supplier": %w`, err)}
		}
	}
	if v, ok := fdc.mutation.Username(); ok {
		if err := fmdemands.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.username": %w`, err)}
		}
	}
	if v, ok := fdc.mutation.Phonenum(); ok {
		if err := fmdemands.PhonenumValidator(v); err != nil {
			return &ValidationError{Name: "phonenum", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.phonenum": %w`, err)}
		}
	}
	if v, ok := fdc.mutation.Email(); ok {
		if err := fmdemands.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.email": %w`, err)}
		}
	}
	if v, ok := fdc.mutation.Province(); ok {
		if err := fmdemands.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "province", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.province": %w`, err)}
		}
	}
	if v, ok := fdc.mutation.City(); ok {
		if err := fmdemands.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.city": %w`, err)}
		}
	}
	if v, ok := fdc.mutation.Area(); ok {
		if err := fmdemands.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.area": %w`, err)}
		}
	}
	if v, ok := fdc.mutation.Street(); ok {
		if err := fmdemands.StreetValidator(v); err != nil {
			return &ValidationError{Name: "street", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.street": %w`, err)}
		}
	}
	if v, ok := fdc.mutation.Message(); ok {
		if err := fmdemands.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.message": %w`, err)}
		}
	}
	if v, ok := fdc.mutation.Creator(); ok {
		if err := fmdemands.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`genclients: validator failed for field "FmDemands.creator": %w`, err)}
		}
	}
	return nil
}

func (fdc *FmDemandsCreate) sqlSave(ctx context.Context) (*FmDemands, error) {
	if err := fdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fdc.mutation.id = &_node.ID
	fdc.mutation.done = true
	return _node, nil
}

func (fdc *FmDemandsCreate) createSpec() (*FmDemands, *sqlgraph.CreateSpec) {
	var (
		_node = &FmDemands{config: fdc.config}
		_spec = sqlgraph.NewCreateSpec(fmdemands.Table, sqlgraph.NewFieldSpec(fmdemands.FieldID, field.TypeInt64))
	)
	if id, ok := fdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fdc.mutation.Supplier(); ok {
		_spec.SetField(fmdemands.FieldSupplier, field.TypeString, value)
		_node.Supplier = &value
	}
	if value, ok := fdc.mutation.Username(); ok {
		_spec.SetField(fmdemands.FieldUsername, field.TypeString, value)
		_node.Username = &value
	}
	if value, ok := fdc.mutation.Phonenum(); ok {
		_spec.SetField(fmdemands.FieldPhonenum, field.TypeString, value)
		_node.Phonenum = &value
	}
	if value, ok := fdc.mutation.Email(); ok {
		_spec.SetField(fmdemands.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := fdc.mutation.Province(); ok {
		_spec.SetField(fmdemands.FieldProvince, field.TypeString, value)
		_node.Province = &value
	}
	if value, ok := fdc.mutation.City(); ok {
		_spec.SetField(fmdemands.FieldCity, field.TypeString, value)
		_node.City = &value
	}
	if value, ok := fdc.mutation.Area(); ok {
		_spec.SetField(fmdemands.FieldArea, field.TypeString, value)
		_node.Area = &value
	}
	if value, ok := fdc.mutation.Street(); ok {
		_spec.SetField(fmdemands.FieldStreet, field.TypeString, value)
		_node.Street = &value
	}
	if value, ok := fdc.mutation.Message(); ok {
		_spec.SetField(fmdemands.FieldMessage, field.TypeString, value)
		_node.Message = &value
	}
	if value, ok := fdc.mutation.Creator(); ok {
		_spec.SetField(fmdemands.FieldCreator, field.TypeString, value)
		_node.Creator = &value
	}
	if value, ok := fdc.mutation.CreatedTime(); ok {
		_spec.SetField(fmdemands.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	return _node, _spec
}

// FmDemandsCreateBulk is the builder for creating many FmDemands entities in bulk.
type FmDemandsCreateBulk struct {
	config
	err      error
	builders []*FmDemandsCreate
}

// Save creates the FmDemands entities in the database.
func (fdcb *FmDemandsCreateBulk) Save(ctx context.Context) ([]*FmDemands, error) {
	if fdcb.err != nil {
		return nil, fdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fdcb.builders))
	nodes := make([]*FmDemands, len(fdcb.builders))
	mutators := make([]Mutator, len(fdcb.builders))
	for i := range fdcb.builders {
		func(i int, root context.Context) {
			builder := fdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FmDemandsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fdcb *FmDemandsCreateBulk) SaveX(ctx context.Context) []*FmDemands {
	v, err := fdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdcb *FmDemandsCreateBulk) Exec(ctx context.Context) error {
	_, err := fdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdcb *FmDemandsCreateBulk) ExecX(ctx context.Context) {
	if err := fdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
