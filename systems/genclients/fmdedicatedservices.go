// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"fmcam/systems/genclients/fmdedicatedservices"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FmDedicatedServices is the model entity for the FmDedicatedServices schema.
type FmDedicatedServices struct {
	config `db:"-" json:"-"`
	// ID of the ent.
	ID int64 `json:"id" db:"id"`
	// 酒店id
	WorkID *int64 `json:"work_id" db:"work_id"`
	// 服务客服名
	Contacts *string `json:"contacts"  db:"contacts"`
	// 酒店名
	Supplier *string `json:"supplier"  db:"supplier"`
	// 服务电话
	Phonenum *string `json:"phonenum"  db:"phonenum"`
	// 服务电邮
	Email *string `json:"email"  db:"email"`
	// 传真号
	Fax *string `json:"fax"  db:"fax"`
	// 描述
	Description *string `json:"description"  db:"description"`
	// 操作人
	Creator *string `json:"creator"  db:"creator"`
	// 创建时间
	CreatedTime  *time.Time `json:"created_time" db:"created_time"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FmDedicatedServices) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fmdedicatedservices.FieldID, fmdedicatedservices.FieldWorkID:
			values[i] = new(sql.NullInt64)
		case fmdedicatedservices.FieldContacts, fmdedicatedservices.FieldSupplier, fmdedicatedservices.FieldPhonenum, fmdedicatedservices.FieldEmail, fmdedicatedservices.FieldFax, fmdedicatedservices.FieldDescription, fmdedicatedservices.FieldCreator:
			values[i] = new(sql.NullString)
		case fmdedicatedservices.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FmDedicatedServices fields.
func (fds *FmDedicatedServices) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fmdedicatedservices.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fds.ID = int64(value.Int64)
		case fmdedicatedservices.FieldWorkID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field work_id", values[i])
			} else if value.Valid {
				fds.WorkID = new(int64)
				*fds.WorkID = value.Int64
			}
		case fmdedicatedservices.FieldContacts:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contacts", values[i])
			} else if value.Valid {
				fds.Contacts = new(string)
				*fds.Contacts = value.String
			}
		case fmdedicatedservices.FieldSupplier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supplier", values[i])
			} else if value.Valid {
				fds.Supplier = new(string)
				*fds.Supplier = value.String
			}
		case fmdedicatedservices.FieldPhonenum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phonenum", values[i])
			} else if value.Valid {
				fds.Phonenum = new(string)
				*fds.Phonenum = value.String
			}
		case fmdedicatedservices.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				fds.Email = new(string)
				*fds.Email = value.String
			}
		case fmdedicatedservices.FieldFax:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fax", values[i])
			} else if value.Valid {
				fds.Fax = new(string)
				*fds.Fax = value.String
			}
		case fmdedicatedservices.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				fds.Description = new(string)
				*fds.Description = value.String
			}
		case fmdedicatedservices.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				fds.Creator = new(string)
				*fds.Creator = value.String
			}
		case fmdedicatedservices.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				fds.CreatedTime = new(time.Time)
				*fds.CreatedTime = value.Time
			}
		default:
			fds.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FmDedicatedServices.
// This includes values selected through modifiers, order, etc.
func (fds *FmDedicatedServices) Value(name string) (ent.Value, error) {
	return fds.selectValues.Get(name)
}

// Update returns a builder for updating this FmDedicatedServices.
// Note that you need to call FmDedicatedServices.Unwrap() before calling this method if this FmDedicatedServices
// was returned from a transaction, and the transaction was committed or rolled back.
func (fds *FmDedicatedServices) Update() *FmDedicatedServicesUpdateOne {
	return NewFmDedicatedServicesClient(fds.config).UpdateOne(fds)
}

// Unwrap unwraps the FmDedicatedServices entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fds *FmDedicatedServices) Unwrap() *FmDedicatedServices {
	_tx, ok := fds.config.driver.(*txDriver)
	if !ok {
		panic("genclients: FmDedicatedServices is not a transactional entity")
	}
	fds.config.driver = _tx.drv
	return fds
}

// String implements the fmt.Stringer.
func (fds *FmDedicatedServices) String() string {
	var builder strings.Builder
	builder.WriteString("FmDedicatedServices(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fds.ID))
	if v := fds.WorkID; v != nil {
		builder.WriteString("work_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := fds.Contacts; v != nil {
		builder.WriteString("contacts=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fds.Supplier; v != nil {
		builder.WriteString("supplier=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fds.Phonenum; v != nil {
		builder.WriteString("phonenum=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fds.Email; v != nil {
		builder.WriteString("email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fds.Fax; v != nil {
		builder.WriteString("fax=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fds.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fds.Creator; v != nil {
		builder.WriteString("creator=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := fds.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// FmDedicatedServicesSlice is a parsable slice of FmDedicatedServices.
type FmDedicatedServicesSlice []*FmDedicatedServices
