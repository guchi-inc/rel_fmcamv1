// Code generated by ent, DO NOT EDIT.

package genclients

import (
	"context"
	"errors"
	"fmcam/systems/genclients/fmalertdefinition"
	"fmcam/systems/genclients/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FmAlertDefinitionUpdate is the builder for updating FmAlertDefinition entities.
type FmAlertDefinitionUpdate struct {
	config
	hooks    []Hook
	mutation *FmAlertDefinitionMutation
}

// Where appends a list predicates to the FmAlertDefinitionUpdate builder.
func (fadu *FmAlertDefinitionUpdate) Where(ps ...predicate.FmAlertDefinition) *FmAlertDefinitionUpdate {
	fadu.mutation.Where(ps...)
	return fadu
}

// SetAlertGroupID sets the "alert_group_id" field.
func (fadu *FmAlertDefinitionUpdate) SetAlertGroupID(i int64) *FmAlertDefinitionUpdate {
	fadu.mutation.ResetAlertGroupID()
	fadu.mutation.SetAlertGroupID(i)
	return fadu
}

// SetNillableAlertGroupID sets the "alert_group_id" field if the given value is not nil.
func (fadu *FmAlertDefinitionUpdate) SetNillableAlertGroupID(i *int64) *FmAlertDefinitionUpdate {
	if i != nil {
		fadu.SetAlertGroupID(*i)
	}
	return fadu
}

// AddAlertGroupID adds i to the "alert_group_id" field.
func (fadu *FmAlertDefinitionUpdate) AddAlertGroupID(i int64) *FmAlertDefinitionUpdate {
	fadu.mutation.AddAlertGroupID(i)
	return fadu
}

// ClearAlertGroupID clears the value of the "alert_group_id" field.
func (fadu *FmAlertDefinitionUpdate) ClearAlertGroupID() *FmAlertDefinitionUpdate {
	fadu.mutation.ClearAlertGroupID()
	return fadu
}

// SetLevel sets the "level" field.
func (fadu *FmAlertDefinitionUpdate) SetLevel(i int) *FmAlertDefinitionUpdate {
	fadu.mutation.ResetLevel()
	fadu.mutation.SetLevel(i)
	return fadu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (fadu *FmAlertDefinitionUpdate) SetNillableLevel(i *int) *FmAlertDefinitionUpdate {
	if i != nil {
		fadu.SetLevel(*i)
	}
	return fadu
}

// AddLevel adds i to the "level" field.
func (fadu *FmAlertDefinitionUpdate) AddLevel(i int) *FmAlertDefinitionUpdate {
	fadu.mutation.AddLevel(i)
	return fadu
}

// ClearLevel clears the value of the "level" field.
func (fadu *FmAlertDefinitionUpdate) ClearLevel() *FmAlertDefinitionUpdate {
	fadu.mutation.ClearLevel()
	return fadu
}

// SetProfileTypeID sets the "profile_type_id" field.
func (fadu *FmAlertDefinitionUpdate) SetProfileTypeID(i int64) *FmAlertDefinitionUpdate {
	fadu.mutation.ResetProfileTypeID()
	fadu.mutation.SetProfileTypeID(i)
	return fadu
}

// SetNillableProfileTypeID sets the "profile_type_id" field if the given value is not nil.
func (fadu *FmAlertDefinitionUpdate) SetNillableProfileTypeID(i *int64) *FmAlertDefinitionUpdate {
	if i != nil {
		fadu.SetProfileTypeID(*i)
	}
	return fadu
}

// AddProfileTypeID adds i to the "profile_type_id" field.
func (fadu *FmAlertDefinitionUpdate) AddProfileTypeID(i int64) *FmAlertDefinitionUpdate {
	fadu.mutation.AddProfileTypeID(i)
	return fadu
}

// ClearProfileTypeID clears the value of the "profile_type_id" field.
func (fadu *FmAlertDefinitionUpdate) ClearProfileTypeID() *FmAlertDefinitionUpdate {
	fadu.mutation.ClearProfileTypeID()
	return fadu
}

// SetAction sets the "action" field.
func (fadu *FmAlertDefinitionUpdate) SetAction(s string) *FmAlertDefinitionUpdate {
	fadu.mutation.SetAction(s)
	return fadu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (fadu *FmAlertDefinitionUpdate) SetNillableAction(s *string) *FmAlertDefinitionUpdate {
	if s != nil {
		fadu.SetAction(*s)
	}
	return fadu
}

// ClearAction clears the value of the "action" field.
func (fadu *FmAlertDefinitionUpdate) ClearAction() *FmAlertDefinitionUpdate {
	fadu.mutation.ClearAction()
	return fadu
}

// SetAlarmSound sets the "alarm_sound" field.
func (fadu *FmAlertDefinitionUpdate) SetAlarmSound(s string) *FmAlertDefinitionUpdate {
	fadu.mutation.SetAlarmSound(s)
	return fadu
}

// SetNillableAlarmSound sets the "alarm_sound" field if the given value is not nil.
func (fadu *FmAlertDefinitionUpdate) SetNillableAlarmSound(s *string) *FmAlertDefinitionUpdate {
	if s != nil {
		fadu.SetAlarmSound(*s)
	}
	return fadu
}

// ClearAlarmSound clears the value of the "alarm_sound" field.
func (fadu *FmAlertDefinitionUpdate) ClearAlarmSound() *FmAlertDefinitionUpdate {
	fadu.mutation.ClearAlarmSound()
	return fadu
}

// SetCreatedTime sets the "created_time" field.
func (fadu *FmAlertDefinitionUpdate) SetCreatedTime(t time.Time) *FmAlertDefinitionUpdate {
	fadu.mutation.SetCreatedTime(t)
	return fadu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fadu *FmAlertDefinitionUpdate) SetNillableCreatedTime(t *time.Time) *FmAlertDefinitionUpdate {
	if t != nil {
		fadu.SetCreatedTime(*t)
	}
	return fadu
}

// ClearCreatedTime clears the value of the "created_time" field.
func (fadu *FmAlertDefinitionUpdate) ClearCreatedTime() *FmAlertDefinitionUpdate {
	fadu.mutation.ClearCreatedTime()
	return fadu
}

// SetUpdatedTime sets the "updated_time" field.
func (fadu *FmAlertDefinitionUpdate) SetUpdatedTime(t time.Time) *FmAlertDefinitionUpdate {
	fadu.mutation.SetUpdatedTime(t)
	return fadu
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (fadu *FmAlertDefinitionUpdate) ClearUpdatedTime() *FmAlertDefinitionUpdate {
	fadu.mutation.ClearUpdatedTime()
	return fadu
}

// Mutation returns the FmAlertDefinitionMutation object of the builder.
func (fadu *FmAlertDefinitionUpdate) Mutation() *FmAlertDefinitionMutation {
	return fadu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fadu *FmAlertDefinitionUpdate) Save(ctx context.Context) (int, error) {
	fadu.defaults()
	return withHooks(ctx, fadu.sqlSave, fadu.mutation, fadu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fadu *FmAlertDefinitionUpdate) SaveX(ctx context.Context) int {
	affected, err := fadu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fadu *FmAlertDefinitionUpdate) Exec(ctx context.Context) error {
	_, err := fadu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fadu *FmAlertDefinitionUpdate) ExecX(ctx context.Context) {
	if err := fadu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fadu *FmAlertDefinitionUpdate) defaults() {
	if _, ok := fadu.mutation.UpdatedTime(); !ok && !fadu.mutation.UpdatedTimeCleared() {
		v := fmalertdefinition.UpdateDefaultUpdatedTime()
		fadu.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fadu *FmAlertDefinitionUpdate) check() error {
	if v, ok := fadu.mutation.Action(); ok {
		if err := fmalertdefinition.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`genclients: validator failed for field "FmAlertDefinition.action": %w`, err)}
		}
	}
	if v, ok := fadu.mutation.AlarmSound(); ok {
		if err := fmalertdefinition.AlarmSoundValidator(v); err != nil {
			return &ValidationError{Name: "alarm_sound", err: fmt.Errorf(`genclients: validator failed for field "FmAlertDefinition.alarm_sound": %w`, err)}
		}
	}
	return nil
}

func (fadu *FmAlertDefinitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fadu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fmalertdefinition.Table, fmalertdefinition.Columns, sqlgraph.NewFieldSpec(fmalertdefinition.FieldID, field.TypeInt64))
	if ps := fadu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fadu.mutation.AlertGroupID(); ok {
		_spec.SetField(fmalertdefinition.FieldAlertGroupID, field.TypeInt64, value)
	}
	if value, ok := fadu.mutation.AddedAlertGroupID(); ok {
		_spec.AddField(fmalertdefinition.FieldAlertGroupID, field.TypeInt64, value)
	}
	if fadu.mutation.AlertGroupIDCleared() {
		_spec.ClearField(fmalertdefinition.FieldAlertGroupID, field.TypeInt64)
	}
	if value, ok := fadu.mutation.Level(); ok {
		_spec.SetField(fmalertdefinition.FieldLevel, field.TypeInt, value)
	}
	if value, ok := fadu.mutation.AddedLevel(); ok {
		_spec.AddField(fmalertdefinition.FieldLevel, field.TypeInt, value)
	}
	if fadu.mutation.LevelCleared() {
		_spec.ClearField(fmalertdefinition.FieldLevel, field.TypeInt)
	}
	if value, ok := fadu.mutation.ProfileTypeID(); ok {
		_spec.SetField(fmalertdefinition.FieldProfileTypeID, field.TypeInt64, value)
	}
	if value, ok := fadu.mutation.AddedProfileTypeID(); ok {
		_spec.AddField(fmalertdefinition.FieldProfileTypeID, field.TypeInt64, value)
	}
	if fadu.mutation.ProfileTypeIDCleared() {
		_spec.ClearField(fmalertdefinition.FieldProfileTypeID, field.TypeInt64)
	}
	if value, ok := fadu.mutation.Action(); ok {
		_spec.SetField(fmalertdefinition.FieldAction, field.TypeString, value)
	}
	if fadu.mutation.ActionCleared() {
		_spec.ClearField(fmalertdefinition.FieldAction, field.TypeString)
	}
	if value, ok := fadu.mutation.AlarmSound(); ok {
		_spec.SetField(fmalertdefinition.FieldAlarmSound, field.TypeString, value)
	}
	if fadu.mutation.AlarmSoundCleared() {
		_spec.ClearField(fmalertdefinition.FieldAlarmSound, field.TypeString)
	}
	if value, ok := fadu.mutation.CreatedTime(); ok {
		_spec.SetField(fmalertdefinition.FieldCreatedTime, field.TypeTime, value)
	}
	if fadu.mutation.CreatedTimeCleared() {
		_spec.ClearField(fmalertdefinition.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := fadu.mutation.UpdatedTime(); ok {
		_spec.SetField(fmalertdefinition.FieldUpdatedTime, field.TypeTime, value)
	}
	if fadu.mutation.UpdatedTimeCleared() {
		_spec.ClearField(fmalertdefinition.FieldUpdatedTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fadu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fmalertdefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fadu.mutation.done = true
	return n, nil
}

// FmAlertDefinitionUpdateOne is the builder for updating a single FmAlertDefinition entity.
type FmAlertDefinitionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FmAlertDefinitionMutation
}

// SetAlertGroupID sets the "alert_group_id" field.
func (faduo *FmAlertDefinitionUpdateOne) SetAlertGroupID(i int64) *FmAlertDefinitionUpdateOne {
	faduo.mutation.ResetAlertGroupID()
	faduo.mutation.SetAlertGroupID(i)
	return faduo
}

// SetNillableAlertGroupID sets the "alert_group_id" field if the given value is not nil.
func (faduo *FmAlertDefinitionUpdateOne) SetNillableAlertGroupID(i *int64) *FmAlertDefinitionUpdateOne {
	if i != nil {
		faduo.SetAlertGroupID(*i)
	}
	return faduo
}

// AddAlertGroupID adds i to the "alert_group_id" field.
func (faduo *FmAlertDefinitionUpdateOne) AddAlertGroupID(i int64) *FmAlertDefinitionUpdateOne {
	faduo.mutation.AddAlertGroupID(i)
	return faduo
}

// ClearAlertGroupID clears the value of the "alert_group_id" field.
func (faduo *FmAlertDefinitionUpdateOne) ClearAlertGroupID() *FmAlertDefinitionUpdateOne {
	faduo.mutation.ClearAlertGroupID()
	return faduo
}

// SetLevel sets the "level" field.
func (faduo *FmAlertDefinitionUpdateOne) SetLevel(i int) *FmAlertDefinitionUpdateOne {
	faduo.mutation.ResetLevel()
	faduo.mutation.SetLevel(i)
	return faduo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (faduo *FmAlertDefinitionUpdateOne) SetNillableLevel(i *int) *FmAlertDefinitionUpdateOne {
	if i != nil {
		faduo.SetLevel(*i)
	}
	return faduo
}

// AddLevel adds i to the "level" field.
func (faduo *FmAlertDefinitionUpdateOne) AddLevel(i int) *FmAlertDefinitionUpdateOne {
	faduo.mutation.AddLevel(i)
	return faduo
}

// ClearLevel clears the value of the "level" field.
func (faduo *FmAlertDefinitionUpdateOne) ClearLevel() *FmAlertDefinitionUpdateOne {
	faduo.mutation.ClearLevel()
	return faduo
}

// SetProfileTypeID sets the "profile_type_id" field.
func (faduo *FmAlertDefinitionUpdateOne) SetProfileTypeID(i int64) *FmAlertDefinitionUpdateOne {
	faduo.mutation.ResetProfileTypeID()
	faduo.mutation.SetProfileTypeID(i)
	return faduo
}

// SetNillableProfileTypeID sets the "profile_type_id" field if the given value is not nil.
func (faduo *FmAlertDefinitionUpdateOne) SetNillableProfileTypeID(i *int64) *FmAlertDefinitionUpdateOne {
	if i != nil {
		faduo.SetProfileTypeID(*i)
	}
	return faduo
}

// AddProfileTypeID adds i to the "profile_type_id" field.
func (faduo *FmAlertDefinitionUpdateOne) AddProfileTypeID(i int64) *FmAlertDefinitionUpdateOne {
	faduo.mutation.AddProfileTypeID(i)
	return faduo
}

// ClearProfileTypeID clears the value of the "profile_type_id" field.
func (faduo *FmAlertDefinitionUpdateOne) ClearProfileTypeID() *FmAlertDefinitionUpdateOne {
	faduo.mutation.ClearProfileTypeID()
	return faduo
}

// SetAction sets the "action" field.
func (faduo *FmAlertDefinitionUpdateOne) SetAction(s string) *FmAlertDefinitionUpdateOne {
	faduo.mutation.SetAction(s)
	return faduo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (faduo *FmAlertDefinitionUpdateOne) SetNillableAction(s *string) *FmAlertDefinitionUpdateOne {
	if s != nil {
		faduo.SetAction(*s)
	}
	return faduo
}

// ClearAction clears the value of the "action" field.
func (faduo *FmAlertDefinitionUpdateOne) ClearAction() *FmAlertDefinitionUpdateOne {
	faduo.mutation.ClearAction()
	return faduo
}

// SetAlarmSound sets the "alarm_sound" field.
func (faduo *FmAlertDefinitionUpdateOne) SetAlarmSound(s string) *FmAlertDefinitionUpdateOne {
	faduo.mutation.SetAlarmSound(s)
	return faduo
}

// SetNillableAlarmSound sets the "alarm_sound" field if the given value is not nil.
func (faduo *FmAlertDefinitionUpdateOne) SetNillableAlarmSound(s *string) *FmAlertDefinitionUpdateOne {
	if s != nil {
		faduo.SetAlarmSound(*s)
	}
	return faduo
}

// ClearAlarmSound clears the value of the "alarm_sound" field.
func (faduo *FmAlertDefinitionUpdateOne) ClearAlarmSound() *FmAlertDefinitionUpdateOne {
	faduo.mutation.ClearAlarmSound()
	return faduo
}

// SetCreatedTime sets the "created_time" field.
func (faduo *FmAlertDefinitionUpdateOne) SetCreatedTime(t time.Time) *FmAlertDefinitionUpdateOne {
	faduo.mutation.SetCreatedTime(t)
	return faduo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (faduo *FmAlertDefinitionUpdateOne) SetNillableCreatedTime(t *time.Time) *FmAlertDefinitionUpdateOne {
	if t != nil {
		faduo.SetCreatedTime(*t)
	}
	return faduo
}

// ClearCreatedTime clears the value of the "created_time" field.
func (faduo *FmAlertDefinitionUpdateOne) ClearCreatedTime() *FmAlertDefinitionUpdateOne {
	faduo.mutation.ClearCreatedTime()
	return faduo
}

// SetUpdatedTime sets the "updated_time" field.
func (faduo *FmAlertDefinitionUpdateOne) SetUpdatedTime(t time.Time) *FmAlertDefinitionUpdateOne {
	faduo.mutation.SetUpdatedTime(t)
	return faduo
}

// ClearUpdatedTime clears the value of the "updated_time" field.
func (faduo *FmAlertDefinitionUpdateOne) ClearUpdatedTime() *FmAlertDefinitionUpdateOne {
	faduo.mutation.ClearUpdatedTime()
	return faduo
}

// Mutation returns the FmAlertDefinitionMutation object of the builder.
func (faduo *FmAlertDefinitionUpdateOne) Mutation() *FmAlertDefinitionMutation {
	return faduo.mutation
}

// Where appends a list predicates to the FmAlertDefinitionUpdate builder.
func (faduo *FmAlertDefinitionUpdateOne) Where(ps ...predicate.FmAlertDefinition) *FmAlertDefinitionUpdateOne {
	faduo.mutation.Where(ps...)
	return faduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (faduo *FmAlertDefinitionUpdateOne) Select(field string, fields ...string) *FmAlertDefinitionUpdateOne {
	faduo.fields = append([]string{field}, fields...)
	return faduo
}

// Save executes the query and returns the updated FmAlertDefinition entity.
func (faduo *FmAlertDefinitionUpdateOne) Save(ctx context.Context) (*FmAlertDefinition, error) {
	faduo.defaults()
	return withHooks(ctx, faduo.sqlSave, faduo.mutation, faduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (faduo *FmAlertDefinitionUpdateOne) SaveX(ctx context.Context) *FmAlertDefinition {
	node, err := faduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (faduo *FmAlertDefinitionUpdateOne) Exec(ctx context.Context) error {
	_, err := faduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (faduo *FmAlertDefinitionUpdateOne) ExecX(ctx context.Context) {
	if err := faduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (faduo *FmAlertDefinitionUpdateOne) defaults() {
	if _, ok := faduo.mutation.UpdatedTime(); !ok && !faduo.mutation.UpdatedTimeCleared() {
		v := fmalertdefinition.UpdateDefaultUpdatedTime()
		faduo.mutation.SetUpdatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (faduo *FmAlertDefinitionUpdateOne) check() error {
	if v, ok := faduo.mutation.Action(); ok {
		if err := fmalertdefinition.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`genclients: validator failed for field "FmAlertDefinition.action": %w`, err)}
		}
	}
	if v, ok := faduo.mutation.AlarmSound(); ok {
		if err := fmalertdefinition.AlarmSoundValidator(v); err != nil {
			return &ValidationError{Name: "alarm_sound", err: fmt.Errorf(`genclients: validator failed for field "FmAlertDefinition.alarm_sound": %w`, err)}
		}
	}
	return nil
}

func (faduo *FmAlertDefinitionUpdateOne) sqlSave(ctx context.Context) (_node *FmAlertDefinition, err error) {
	if err := faduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fmalertdefinition.Table, fmalertdefinition.Columns, sqlgraph.NewFieldSpec(fmalertdefinition.FieldID, field.TypeInt64))
	id, ok := faduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`genclients: missing "FmAlertDefinition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := faduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fmalertdefinition.FieldID)
		for _, f := range fields {
			if !fmalertdefinition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("genclients: invalid field %q for query", f)}
			}
			if f != fmalertdefinition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := faduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := faduo.mutation.AlertGroupID(); ok {
		_spec.SetField(fmalertdefinition.FieldAlertGroupID, field.TypeInt64, value)
	}
	if value, ok := faduo.mutation.AddedAlertGroupID(); ok {
		_spec.AddField(fmalertdefinition.FieldAlertGroupID, field.TypeInt64, value)
	}
	if faduo.mutation.AlertGroupIDCleared() {
		_spec.ClearField(fmalertdefinition.FieldAlertGroupID, field.TypeInt64)
	}
	if value, ok := faduo.mutation.Level(); ok {
		_spec.SetField(fmalertdefinition.FieldLevel, field.TypeInt, value)
	}
	if value, ok := faduo.mutation.AddedLevel(); ok {
		_spec.AddField(fmalertdefinition.FieldLevel, field.TypeInt, value)
	}
	if faduo.mutation.LevelCleared() {
		_spec.ClearField(fmalertdefinition.FieldLevel, field.TypeInt)
	}
	if value, ok := faduo.mutation.ProfileTypeID(); ok {
		_spec.SetField(fmalertdefinition.FieldProfileTypeID, field.TypeInt64, value)
	}
	if value, ok := faduo.mutation.AddedProfileTypeID(); ok {
		_spec.AddField(fmalertdefinition.FieldProfileTypeID, field.TypeInt64, value)
	}
	if faduo.mutation.ProfileTypeIDCleared() {
		_spec.ClearField(fmalertdefinition.FieldProfileTypeID, field.TypeInt64)
	}
	if value, ok := faduo.mutation.Action(); ok {
		_spec.SetField(fmalertdefinition.FieldAction, field.TypeString, value)
	}
	if faduo.mutation.ActionCleared() {
		_spec.ClearField(fmalertdefinition.FieldAction, field.TypeString)
	}
	if value, ok := faduo.mutation.AlarmSound(); ok {
		_spec.SetField(fmalertdefinition.FieldAlarmSound, field.TypeString, value)
	}
	if faduo.mutation.AlarmSoundCleared() {
		_spec.ClearField(fmalertdefinition.FieldAlarmSound, field.TypeString)
	}
	if value, ok := faduo.mutation.CreatedTime(); ok {
		_spec.SetField(fmalertdefinition.FieldCreatedTime, field.TypeTime, value)
	}
	if faduo.mutation.CreatedTimeCleared() {
		_spec.ClearField(fmalertdefinition.FieldCreatedTime, field.TypeTime)
	}
	if value, ok := faduo.mutation.UpdatedTime(); ok {
		_spec.SetField(fmalertdefinition.FieldUpdatedTime, field.TypeTime, value)
	}
	if faduo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(fmalertdefinition.FieldUpdatedTime, field.TypeTime)
	}
	_node = &FmAlertDefinition{config: faduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, faduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fmalertdefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	faduo.mutation.done = true
	return _node, nil
}
